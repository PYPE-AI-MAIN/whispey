This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
docs/
  api-reference.md
  contributing.md
  dashboard-guide.md
  faq.md
  getting-started.md
  sdk-reference.md
  self-hosting.md
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
sdk/
  whispey/
    __init__.py
    event_handlers.py
    metrics_service.py
    send_log.py
    whispey.py
  .gitattributes
  .gitignore
  agent.py
  readme.md
  requirements.txt
  setup.py
src/
  app/
    [projectid]/
      agents/
        page.tsx
    agents/
      [agentid]/
        page.tsx
    api/
      agents/
        [id]/
          route.ts
        route.ts
      audio/
        route.ts
      audio-proxy/
        route.ts
      campaign/
        route.ts
      campaign-logs/
        route.ts
      projects/
        [id]/
          members/
            route.ts
          route.ts
        route.ts
      schedule/
        route.ts
      send-logs/
        route.ts
      upload/
        route.ts
      user/
        projects/
          route.ts
      validate-sso-token/
        route.ts
      webhooks/
        clerk/
          route.ts
    auth/
      callback/
        page.tsx
    dashboard/
      page.tsx
    docs/
      page.tsx
    sign-in/
      page.tsx
    types/
      user.ts
    globals.css
    layout.tsx
    page.tsx
  components/
    agents/
      AgentCreationDialog.tsx
      AgentSelection.tsx
    buttons/
      MagicButton.tsx
    calls/
      AgentCustomLogsView.tsx
      CallDetailsDrawer.tsx
      CallLogs.tsx
    campaigns/
      CampaignDialog.tsx
      CampaignLogs.tsx
    projects/
      ProjectCreationDialog.tsx
      ProjectSelection.tsx
    shared/
      ColumnSelector.tsx
      Header.tsx
      LoadingSpinner.tsx
    tool-tip/
      costToolTip.tsx
    ui/
      alert.tsx
      avatar.tsx
      badge.tsx
      button.tsx
      calendar.tsx
      card.tsx
      checkbox.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      input.tsx
      label.tsx
      popover.tsx
      progress.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      slider.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      tooltip.tsx
    AudioPlayer.tsx
    AuthPage.tsx
    CallFilter.tsx
    Dashboard.tsx
    EnhancedChartBuilder.tsx
    FieldExtractorLogs.tsx
    MemberManagmentDialog.tsx
    Overview.tsx
    TokenRegenerationConfirmDialog.tsx
  hooks/
    useOverviewQuery.ts
    useSupabase.ts
  lib/
    supabase.ts
    user-data.ts
    utils.ts
  types/
    logs.ts
  utils/
    constants.ts
    cost.ts
    s3.ts
  middleware.ts
.env.example
.gitattributes
.gitignore
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
setup-supabase.sql
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="docs/api-reference.md">
# üîå API Reference

Complete API documentation for Obsera's REST endpoints and webhooks.

## üîë Authentication

All API requests require authentication using your API key:

```bash
curl -H "Authorization: Bearer YOUR_API_KEY" \
  https://api.obsera.ai/v1/agents
```

### API Key Management

Get your API key from the [Obsera Dashboard](https://pype-voice-analytics-dashboard.vercel.app/):

1. **Sign in** to your account
2. **Navigate** to Settings ‚Üí API Keys
3. **Generate** a new API key
4. **Copy** the key for use in requests

## üìä Base URL

- **Production**: `https://api.obsera.ai`
- **Development**: `https://dev-api.obsera.ai`

## üèóÔ∏è Core Endpoints

### Agents

#### List Agents

```http
GET /v1/agents
```

**Response:**
```json
{
  "success": true,
  "data": [
    {
      "id": "agent-123",
      "name": "Customer Support Bot",
      "project_id": "proj-456",
      "status": "active",
      "created_at": "2024-01-15T10:30:00Z",
      "total_calls": 1250,
      "success_rate": 94.2
    }
  ]
}
```

#### Get Agent Details

```http
GET /v1/agents/{agent_id}
```

**Response:**
```json
{
  "success": true,
  "data": {
    "id": "agent-123",
    "name": "Customer Support Bot",
    "project_id": "proj-456",
    "status": "active",
    "created_at": "2024-01-15T10:30:00Z",
    "metrics": {
      "total_calls": 1250,
      "success_rate": 94.2,
      "avg_duration": 180,
      "total_cost": 187.50
    }
  }
}
```

### Calls

#### List Calls

```http
GET /v1/calls?agent_id={agent_id}&limit=50&offset=0
```

**Query Parameters:**
- `agent_id` (optional): Filter by agent
- `limit` (optional): Number of results (default: 50, max: 100)
- `offset` (optional): Pagination offset
- `start_date` (optional): Filter from date (ISO 8601)
- `end_date` (optional): Filter to date (ISO 8601)
- `status` (optional): Filter by status (completed, failed, in_progress)

**Response:**
```json
{
  "success": true,
  "data": [
    {
      "id": "call-789",
      "agent_id": "agent-123",
      "session_id": "session-456",
      "status": "completed",
      "duration": 180,
      "cost": 0.15,
      "created_at": "2024-01-15T14:30:00Z",
      "metadata": {
        "phone_number": "+1234567890",
        "customer_name": "John Doe"
      }
    }
  ],
  "pagination": {
    "total": 1250,
    "limit": 50,
    "offset": 0,
    "has_more": true
  }
}
```

#### Get Call Details

```http
GET /v1/calls/{call_id}
```

**Response:**
```json
{
  "success": true,
  "data": {
    "id": "call-789",
    "agent_id": "agent-123",
    "session_id": "session-456",
    "status": "completed",
    "duration": 180,
    "cost": 0.15,
    "created_at": "2024-01-15T14:30:00Z",
    "metadata": {
      "phone_number": "+1234567890",
      "customer_name": "John Doe",
      "conversation_type": "support"
    },
    "transcript": [
      {
        "speaker": "user",
        "text": "I need help with my account",
        "timestamp": "2024-01-15T14:30:05Z"
      },
      {
        "speaker": "agent",
        "text": "I'd be happy to help you with your account. What specific issue are you experiencing?",
        "timestamp": "2024-01-15T14:30:08Z"
      }
    ],
    "metrics": {
      "stt_accuracy": 95.2,
      "tts_quality": 4.8,
      "response_time_avg": 1.2,
      "user_satisfaction": 4.5
    }
  }
}
```

### Analytics

#### Get Agent Analytics

```http
GET /v1/analytics/agents/{agent_id}?period=30d
```

**Query Parameters:**
- `period`: Time period (1d, 7d, 30d, 90d, 1y)

**Response:**
```json
{
  "success": true,
  "data": {
    "agent_id": "agent-123",
    "period": "30d",
    "metrics": {
      "total_calls": 1250,
      "success_rate": 94.2,
      "avg_duration": 180,
      "total_cost": 187.50,
      "cost_per_call": 0.15
    },
    "trends": {
      "calls_per_day": [45, 52, 48, 61, ...],
      "cost_per_day": [6.75, 7.80, 7.20, 9.15, ...],
      "success_rate_per_day": [92.1, 95.3, 93.8, 94.7, ...]
    },
    "provider_breakdown": {
      "openai": { "calls": 625, "cost": 93.75 },
      "deepgram": { "calls": 1250, "cost": 62.50 },
      "elevenlabs": { "calls": 1250, "cost": 31.25 }
    }
  }
}
```

#### Get Cost Analytics

```http
GET /v1/analytics/costs?agent_id={agent_id}&period=30d
```

**Response:**
```json
{
  "success": true,
  "data": {
    "period": "30d",
    "total_cost": 187.50,
    "cost_breakdown": {
      "llm": {
        "total": 93.75,
        "percentage": 50.0,
        "providers": {
          "openai": 93.75
        }
      },
      "stt": {
        "total": 62.50,
        "percentage": 33.3,
        "providers": {
          "deepgram": 62.50
        }
      },
      "tts": {
        "total": 31.25,
        "percentage": 16.7,
        "providers": {
          "elevenlabs": 31.25
        }
      }
    },
    "daily_costs": [
      { "date": "2024-01-01", "cost": 6.25 },
      { "date": "2024-01-02", "cost": 7.50 },
      // ...
    ]
  }
}
```

## üîî Webhooks

### Webhook Events

Obsera can send webhook notifications for various events:

#### Event Types

- `call.completed` - Call finished successfully
- `call.failed` - Call failed or was interrupted
- `cost.alert` - Cost threshold exceeded
- `performance.alert` - Performance threshold exceeded
- `agent.status_changed` - Agent status updated

#### Webhook Payload

```json
{
  "event": "call.completed",
  "timestamp": "2024-01-15T14:30:00Z",
  "data": {
    "call_id": "call-789",
    "agent_id": "agent-123",
    "duration": 180,
    "cost": 0.15,
    "status": "completed"
  }
}
```

#### Configure Webhooks

```http
POST /v1/webhooks
```

**Request Body:**
```json
{
  "url": "https://your-app.com/webhooks/obsera",
  "events": ["call.completed", "cost.alert"],
  "secret": "your_webhook_secret"
}
```

**Response:**
```json
{
  "success": true,
  "data": {
    "id": "webhook-123",
    "url": "https://your-app.com/webhooks/obsera",
    "events": ["call.completed", "cost.alert"],
    "status": "active",
    "created_at": "2024-01-15T10:30:00Z"
  }
}
```

## üìä Data Export

### Export Calls Data

```http
POST /v1/export/calls
```

**Request Body:**
```json
{
  "agent_id": "agent-123",
  "format": "csv",
  "date_range": {
    "start": "2024-01-01T00:00:00Z",
    "end": "2024-01-31T23:59:59Z"
  },
  "include_transcripts": true,
  "include_metrics": true
}
```

**Response:**
```json
{
  "success": true,
  "data": {
    "export_id": "export-456",
    "status": "processing",
    "download_url": "https://api.obsera.ai/v1/exports/export-456/download",
    "estimated_completion": "2024-01-15T15:00:00Z"
  }
}
```

### Check Export Status

```http
GET /v1/exports/{export_id}
```

**Response:**
```json
{
  "success": true,
  "data": {
    "id": "export-456",
    "status": "completed",
    "download_url": "https://api.obsera.ai/v1/exports/export-456/download",
    "file_size": "2.5MB",
    "record_count": 1250
  }
}
```

## üîß SDK Integration

### Python SDK

```python
from obsera import LivekitObserve

# Initialize
obsera = LivekitObserve(agent_id="your-agent-id")

# Start session
session_id = obsera.start_session(session, **metadata)

# Export data
result = await obsera.export(session_id)
```

### REST API Integration

```python
import requests

# API configuration
API_BASE = "https://api.obsera.ai/v1"
API_KEY = "your_api_key"

headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

# Get agent calls
response = requests.get(
    f"{API_BASE}/calls?agent_id=your-agent-id",
    headers=headers
)

calls = response.json()["data"]
```

## üõ†Ô∏è Error Handling

### Error Responses

```json
{
  "success": false,
  "error": {
    "code": "INVALID_API_KEY",
    "message": "The provided API key is invalid",
    "details": {
      "api_key": "invalid_key_format"
    }
  }
}
```

### Common Error Codes

| Code | Description | Solution |
|------|-------------|----------|
| `INVALID_API_KEY` | API key is invalid or expired | Generate new API key |
| `RATE_LIMIT_EXCEEDED` | Too many requests | Implement exponential backoff |
| `AGENT_NOT_FOUND` | Agent ID doesn't exist | Check agent ID |
| `INVALID_DATE_RANGE` | Date range is invalid | Use ISO 8601 format |
| `EXPORT_IN_PROGRESS` | Export already running | Wait for completion |

### Rate Limiting

- **Standard**: 1000 requests per hour
- **Enterprise**: 10000 requests per hour
- **Headers**: `X-RateLimit-Limit`, `X-RateLimit-Remaining`, `X-RateLimit-Reset`

## üìö SDK Methods

### Core Methods

#### `start_session(session, **metadata)`

Starts tracking a LiveKit session.

```python
session_id = obsera.start_session(
    session,
    phone_number="+1234567890",
    customer_name="John Doe"
)
```

#### `export(session_id, recording_url="")`

Exports session data to Obsera platform.

```python
result = await obsera.export(session_id, recording_url="https://...")
```

#### `get_data(session_id)`

Gets current session data without exporting.

```python
data = obsera.get_data(session_id)
```

#### `end(session_id)`

Manually ends a session.

```python
obsera.end(session_id)
```

## üÜò Support

### Getting Help

- **üìñ Documentation**: [https://pype-voice-analytics-dashboard.vercel.app/docs](https://pype-voice-analytics-dashboard.vercel.app/docs)
- **üí¨ Discord**: [Join our community](https://discord.gg/pypeai)
- **üìß Email**: api-support@obsera.ai
- **üêõ Issues**: [GitHub Issues](https://github.com/PYPE-AI-MAIN/obsera/issues)

### API Status

Check API status at: [https://status.obsera.ai](https://status.obsera.ai)

---

**üîå Ready to integrate?** Start with the [Getting Started Guide](getting-started.md) or explore the [SDK Reference](sdk-reference.md).
</file>

<file path="docs/contributing.md">
# ü§ù Contributing to Obsera

Thank you for your interest in contributing to Obsera! We welcome contributions from the community and appreciate your help in making Obsera better for everyone.

## üéØ How to Contribute

There are many ways to contribute to Obsera:

- **üêõ Bug Reports** - Help us identify and fix issues
- **üí° Feature Requests** - Suggest new features and improvements
- **üìù Documentation** - Improve our guides and tutorials
- **üîß Code Contributions** - Submit pull requests with code changes
- **üí¨ Community Support** - Help other users in Discord and GitHub
- **‚≠ê Star the Repository** - Show your support

## üöÄ Quick Start

### 1. Fork the Repository

```bash
# Fork on GitHub, then clone your fork
git clone https://github.com/YOUR_USERNAME/obsera.git
cd obsera

# Add the original repository as upstream
git remote add upstream https://github.com/PYPE-AI-MAIN/obsera.git
```

### 2. Set Up Development Environment

```bash
# Install dependencies
npm install

# Set up environment
cp .env.example .env.local

# Start development server
npm run dev
```

### 3. Create a Feature Branch

```bash
# Create and switch to a new branch
git checkout -b feature/amazing-feature

# Make your changes
# ... edit files ...

# Commit your changes
git commit -m "Add amazing feature"

# Push to your fork
git push origin feature/amazing-feature
```

### 4. Submit a Pull Request

1. **Go to your fork** on GitHub
2. **Click "New Pull Request"**
3. **Select your feature branch**
4. **Write a clear description** of your changes
5. **Submit the PR**

## üìã Development Guidelines

### Code Style

We follow these coding standards:

#### Python (SDK)
```python
# Use PEP 8 style guide
# Use type hints
# Add docstrings for functions
# Keep functions under 50 lines

def process_call_data(call_id: str, metadata: dict) -> dict:
    """Process call data and return analytics.
    
    Args:
        call_id: The unique call identifier
        metadata: Additional call metadata
        
    Returns:
        Processed analytics data
    """
    # Implementation here
    pass
```

#### TypeScript/JavaScript (Dashboard)
```typescript
// Use TypeScript for type safety
// Follow ESLint rules
// Use meaningful variable names
// Add JSDoc comments

/**
 * Process analytics data for display
 * @param data - Raw analytics data
 * @returns Processed analytics for UI
 */
function processAnalytics(data: AnalyticsData): ProcessedAnalytics {
  // Implementation here
  return processedData;
}
```

### Commit Messages

Use conventional commit format:

```
type(scope): description

feat(dashboard): add cost comparison chart
fix(sdk): resolve session export timeout
docs(readme): update installation instructions
style(ui): improve button spacing
refactor(api): simplify webhook handling
test(sdk): add unit tests for export function
```

### Pull Request Guidelines

#### Before Submitting

- [ ] **Tests pass** - Run `npm test` and `python -m pytest`
- [ ] **Code is formatted** - Use Prettier and Black
- [ ] **Documentation updated** - Update relevant docs
- [ ] **No breaking changes** - Unless clearly documented

#### PR Description Template

```markdown
## Description
Brief description of changes

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Documentation update
- [ ] Performance improvement
- [ ] Refactoring

## Testing
- [ ] Unit tests added/updated
- [ ] Manual testing completed
- [ ] No breaking changes

## Screenshots (if applicable)
Add screenshots for UI changes

## Checklist
- [ ] Code follows style guidelines
- [ ] Self-review completed
- [ ] Documentation updated
- [ ] Tests added/updated
```

## üèóÔ∏è Project Structure

```
obsera/
‚îú‚îÄ‚îÄ src/                    # Next.js dashboard
‚îÇ   ‚îú‚îÄ‚îÄ app/               # App router pages
‚îÇ   ‚îú‚îÄ‚îÄ components/        # React components
‚îÇ   ‚îú‚îÄ‚îÄ lib/              # Utility functions
‚îÇ   ‚îî‚îÄ‚îÄ types/            # TypeScript types
‚îú‚îÄ‚îÄ sdk/                   # Python SDK
‚îÇ   ‚îú‚îÄ‚îÄ obsera/           # SDK source code
‚îÇ   ‚îú‚îÄ‚îÄ tests/            # Unit tests
‚îÇ   ‚îî‚îÄ‚îÄ setup.py          # Package configuration
‚îú‚îÄ‚îÄ docs/                  # Documentation
‚îú‚îÄ‚îÄ public/               # Static assets
‚îî‚îÄ‚îÄ README.md             # Main documentation
```

## üß™ Testing

### Running Tests

```bash
# Frontend tests
npm test

# SDK tests
cd sdk
python -m pytest

# Integration tests
npm run test:integration
```

### Writing Tests

#### Python SDK Tests
```python
import pytest
from obsera import LivekitObserve

def test_session_creation():
    """Test that sessions can be created successfully."""
    obsera = LivekitObserve(agent_id="test-agent")
    # Test implementation
    assert True

def test_export_functionality():
    """Test that data export works correctly."""
    # Test implementation
    pass
```

#### Frontend Tests
```typescript
import { render, screen } from '@testing-library/react'
import { Dashboard } from '../components/Dashboard'

test('renders dashboard with metrics', () => {
  render(<Dashboard />)
  expect(screen.getByText('Total Calls')).toBeInTheDocument()
})
```

## üìù Documentation

### Documentation Standards

- **Clear and concise** - Write for developers
- **Include examples** - Show real usage
- **Keep updated** - Update when code changes
- **Use proper formatting** - Follow markdown guidelines

### Documentation Structure

```
docs/
‚îú‚îÄ‚îÄ getting-started.md     # Quick start guide
‚îú‚îÄ‚îÄ sdk-reference.md      # SDK documentation
‚îú‚îÄ‚îÄ dashboard-guide.md    # Dashboard tutorial
‚îú‚îÄ‚îÄ self-hosting.md       # Self-hosting guide
‚îú‚îÄ‚îÄ api-reference.md      # API documentation
‚îú‚îÄ‚îÄ faq.md               # Frequently asked questions
‚îî‚îÄ‚îÄ contributing.md       # This file
```

## üêõ Bug Reports

### Before Reporting

1. **Search existing issues** - Check if it's already reported
2. **Reproduce the issue** - Ensure it's reproducible
3. **Check documentation** - Verify it's not user error
4. **Test with latest version** - Ensure it's not already fixed

### Bug Report Template

```markdown
## Bug Description
Clear description of the issue

## Steps to Reproduce
1. Step 1
2. Step 2
3. Step 3

## Expected Behavior
What should happen

## Actual Behavior
What actually happens

## Environment
- OS: [e.g., macOS 14.0]
- Node.js: [e.g., 18.17.0]
- Python: [e.g., 3.11.0]
- Obsera Version: [e.g., 1.2.0]

## Additional Information
Screenshots, logs, or other relevant information
```

## üí° Feature Requests

### Before Requesting

1. **Check existing features** - Ensure it's not already available
2. **Search discussions** - Check if it's been discussed
3. **Consider alternatives** - Look for existing solutions
4. **Think about scope** - Consider implementation complexity

### Feature Request Template

```markdown
## Feature Description
Clear description of the requested feature

## Use Case
Why this feature is needed

## Proposed Solution
How you think it should work

## Alternatives Considered
Other approaches you've considered

## Additional Information
Mockups, examples, or other context
```

## üè∑Ô∏è Issue Labels

We use these labels to organize issues:

- **üêõ bug** - Something isn't working
- **üí° enhancement** - New feature or request
- **üìù documentation** - Improvements to docs
- **üîß good first issue** - Good for newcomers
- **üèóÔ∏è help wanted** - Extra attention needed
- **üö® high priority** - Urgent issues
- **üîí security** - Security-related issues

## üéâ Recognition

### Contributors Hall of Fame

We recognize contributors in several ways:

- **GitHub Contributors** - Listed on the main repository
- **Release Notes** - Credit in release announcements
- **Documentation** - Credit in relevant docs
- **Community Shoutouts** - Recognition in Discord

### Contribution Levels

- **ü•â Bronze** - 1-5 contributions
- **ü•à Silver** - 6-20 contributions  
- **ü•á Gold** - 21+ contributions
- **üíé Diamond** - Major contributions

## üÜò Getting Help

### Development Questions

- **üí¨ Discord**: [Join our community](https://discord.gg/pypeai)
- **üêõ GitHub Issues**: Open an issue for technical questions
- **üìß Email**: dev-support@obsera.ai for private discussions

### Mentorship

New contributors can:

- **Ask for help** in Discord or GitHub
- **Request pairing** with experienced contributors
- **Get code reviews** from maintainers
- **Join office hours** for live help

## üìã Code of Conduct

### Our Standards

- **Be respectful** - Treat everyone with respect
- **Be inclusive** - Welcome diverse perspectives
- **Be constructive** - Provide helpful feedback
- **Be collaborative** - Work together effectively

### Unacceptable Behavior

- **Harassment** - Any form of harassment
- **Discrimination** - Based on any protected characteristic
- **Trolling** - Deliberately disruptive behavior
- **Spam** - Unwanted promotional content

### Reporting

Report violations to:
- **üìß Email**: conduct@obsera.ai
- **üí¨ Discord**: Message moderators
- **üêõ GitHub**: Open private issue

## üìÑ License

By contributing to Obsera, you agree that your contributions will be licensed under the MIT License.

## üôè Thank You

Thank you for contributing to Obsera! Your contributions help make voice AI analytics better for everyone.

---

**Ready to contribute?** Start with a [good first issue](https://github.com/PYPE-AI-MAIN/obsera/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) or join our [Discord community](https://discord.gg/pypeai)!
</file>

<file path="docs/dashboard-guide.md">
# üìä Dashboard Tutorial

Master the Obsera dashboard to analyze your voice AI performance and gain actionable insights.

## üéØ Dashboard Overview

The Obsera dashboard provides comprehensive analytics for your voice AI applications:

- **üìà Real-time Metrics** - Live performance monitoring
- **üí∞ Cost Analysis** - Track spending across providers
- **üéôÔ∏è Voice Quality** - Audio and transcription insights
- **üí¨ Conversation Flow** - Turn analysis and patterns
- **üìä Custom Reports** - Build your own analytics views

## üöÄ Getting Started

### Accessing Your Dashboard

1. **Visit**: [https://pype-voice-analytics-dashboard.vercel.app](https://pype-voice-analytics-dashboard.vercel.app)
2. **Sign in** with your account
3. **Select your project** from the dropdown
4. **Navigate** to different sections using the sidebar

### Dashboard Layout

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Header: Project Selector | User Menu | Notifications   ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Sidebar:                                                ‚îÇ
‚îÇ üìä Overview                                            ‚îÇ
‚îÇ üéôÔ∏è Calls                                              ‚îÇ
‚îÇ üí∞ Costs                                               ‚îÇ
‚îÇ üìà Analytics                                           ‚îÇ
‚îÇ ‚öôÔ∏è Settings                                            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## üìä Overview Dashboard

### Key Metrics Cards

The overview shows your most important metrics:

- **Total Calls** - Number of voice interactions
- **Success Rate** - Percentage of completed calls
- **Average Duration** - Mean call length
- **Total Cost** - Cumulative spending
- **Active Agents** - Currently running agents

### Real-time Charts

#### Call Volume Over Time
```
üìà Call Volume (Last 24 Hours)
‚îÇ    ‚ñà‚ñà‚ñà‚ñà
‚îÇ   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚îÇ  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚îÇ ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 00:00  12:00  24:00
```

#### Cost Breakdown
```
üí∞ Cost by Provider
OpenAI: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 45%
Deepgram: ‚ñà‚ñà‚ñà‚ñà‚ñà 25%
ElevenLabs: ‚ñà‚ñà‚ñà 15%
Others: ‚ñà‚ñà 15%
```

## üéôÔ∏è Calls Section

### Call List View

| Call ID | Agent | Duration | Cost | Status | Actions |
|---------|-------|----------|------|--------|---------|
| `abc123` | Support Bot | 2:34 | $0.12 | ‚úÖ Complete | üìä View |
| `def456` | Sales Agent | 1:45 | $0.08 | ‚ùå Failed | üìä View |

### Call Details

Click on any call to see detailed information:

#### Call Summary
```
üìû Call Details
Customer: +1 (555) 123-4567
Agent: Support Bot v2.1
Duration: 2 minutes 34 seconds
Cost: $0.12
Status: Completed successfully
```

#### Conversation Transcript
```
üë§ User: "I need help with my account"
ü§ñ Agent: "I'd be happy to help you with your account. 
    What specific issue are you experiencing?"
üë§ User: "I can't log in"
ü§ñ Agent: "Let me help you troubleshoot that. 
    Have you tried resetting your password?"
```

#### Performance Metrics
```
‚ö° Performance
Response Time: 1.2s average
STT Accuracy: 95.2%
TTS Quality: 4.8/5.0
User Satisfaction: 4.5/5.0
```

## üí∞ Costs Section

### Cost Overview

Track spending across different providers and time periods:

#### Monthly Cost Breakdown
```
üìä January 2024 Costs
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ OpenAI (LLM)     ‚îÇ $245.67 ‚îÇ 45%  ‚îÇ
‚îÇ Deepgram (STT)   ‚îÇ $134.23 ‚îÇ 25%  ‚îÇ
‚îÇ ElevenLabs (TTS) ‚îÇ $89.45  ‚îÇ 16%  ‚îÇ
‚îÇ Azure (STT)      ‚îÇ $67.89  ‚îÇ 12%  ‚îÇ
‚îÇ Others           ‚îÇ $12.76  ‚îÇ 2%   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
Total: $550.00
```

### Cost Optimization

#### High-Cost Calls Analysis
```
üö® High-Cost Calls (>$1.00)
Call ID: xyz789
Duration: 8:45
Cost: $2.34
Reason: Long conversation with complex queries
Recommendation: Implement conversation summarization
```

#### Provider Comparison
```
üìä Provider Cost Comparison
Provider    ‚îÇ Avg Cost/Call ‚îÇ Quality Score ‚îÇ Recommendation
OpenAI      ‚îÇ $0.12        ‚îÇ 4.8/5.0      ‚îÇ ‚úÖ Optimal
Anthropic   ‚îÇ $0.15        ‚îÇ 4.9/5.0      ‚îÇ ‚ö†Ô∏è Higher cost
Google      ‚îÇ $0.08        ‚îÇ 4.2/5.0      ‚îÇ ‚ö†Ô∏è Lower quality
```

## üìà Analytics Section

### Custom Reports

Build your own analytics views:

#### 1. Create New Report
```
üìä New Report
Name: Agent Performance Comparison
Description: Compare different agent versions
```

#### 2. Select Metrics
```
‚úÖ Metrics to Include:
‚òëÔ∏è Call Duration
‚òëÔ∏è Success Rate
‚òëÔ∏è Cost per Call
‚òëÔ∏è User Satisfaction
‚òëÔ∏è Response Time
```

#### 3. Choose Visualization
```
üìä Chart Type:
‚óã Line Chart (Time series)
‚óè Bar Chart (Comparison)
‚óã Pie Chart (Distribution)
‚óã Heatmap (Correlation)
```

### Advanced Analytics

#### Trend Analysis
```
üìà Response Time Trends
Week 1: 1.2s average
Week 2: 1.1s average ‚¨áÔ∏è 8% improvement
Week 3: 1.0s average ‚¨áÔ∏è 9% improvement
Week 4: 0.9s average ‚¨áÔ∏è 10% improvement
```

#### Correlation Analysis
```
üîç Cost vs. Satisfaction
Correlation: 0.15 (weak positive)
Insight: Higher cost doesn't guarantee better satisfaction
Recommendation: Focus on efficiency over spending
```

## ‚öôÔ∏è Settings & Configuration

### Project Settings

#### Agent Configuration
```
ü§ñ Agent Settings
Name: Customer Support Bot
Version: 2.1.0
Status: Active
Cost Alerts: $1.00 per call
Performance Alerts: >3s response time
```

#### Notification Preferences
```
üîî Notifications
Email Alerts: ‚úÖ Enabled
Slack Integration: ‚ö†Ô∏è Not configured
Cost Threshold: $100/day
Performance Threshold: 2s response time
```

### Data Export

#### Export Options
```
üì§ Export Data
Format: CSV, JSON, Excel
Date Range: Last 30 days
Include: Calls, Costs, Transcripts
Schedule: Weekly automated export
```

## üéØ Best Practices

### Daily Monitoring

1. **Check Overview** - Review key metrics
2. **Monitor Costs** - Watch for unusual spending
3. **Review Failures** - Analyze failed calls
4. **Update Alerts** - Adjust thresholds as needed

### Weekly Analysis

1. **Performance Review** - Compare weekly metrics
2. **Cost Optimization** - Identify savings opportunities
3. **Quality Assessment** - Review user satisfaction
4. **Report Generation** - Create executive summaries

### Monthly Planning

1. **Trend Analysis** - Identify long-term patterns
2. **Provider Evaluation** - Compare service quality
3. **Budget Planning** - Forecast future costs
4. **Strategy Updates** - Adjust based on insights

## üîß Advanced Features

### Custom Dashboards

Create personalized views for different stakeholders:

#### Executive Dashboard
```
üìä Executive Summary
- Total calls this month: 1,234
- Cost per call: $0.15
- Success rate: 94.2%
- ROI: 340% improvement
```

#### Technical Dashboard
```
üîß Technical Metrics
- Average response time: 1.1s
- STT accuracy: 96.8%
- TTS quality: 4.7/5.0
- System uptime: 99.9%
```

### API Integration

#### Webhook Notifications
```
üîî Webhook Configuration
URL: https://your-app.com/webhooks/obsera
Events: call_completed, cost_alert, performance_alert
Secret: your_webhook_secret
```

#### Custom Metrics
```
üìä Custom Metrics
- Business conversion rate
- Customer satisfaction score
- Agent efficiency rating
- Cost per conversion
```

## üÜò Troubleshooting

### Common Issues

#### Dashboard Not Loading
```
‚ùå Issue: Dashboard shows loading spinner
‚úÖ Solution: Check browser console for errors
‚úÖ Solution: Clear browser cache
‚úÖ Solution: Verify internet connection
```

#### Missing Data
```
‚ùå Issue: Recent calls not appearing
‚úÖ Solution: Check API key configuration
‚úÖ Solution: Verify agent ID is correct
‚úÖ Solution: Check SDK integration
```

#### Performance Issues
```
‚ùå Issue: Dashboard is slow
‚úÖ Solution: Use date filters to limit data
‚úÖ Solution: Clear browser cache
‚úÖ Solution: Check network connection
```

## üìö Related Documentation

- [üöÄ Getting Started Guide](getting-started.md)
- [üîß SDK Reference](sdk-reference.md)
- [üè† Self-hosting Guide](self-hosting.md)

## üí¨ Support

- **üí¨ Discord**: [Join our community](https://discord.gg/pypeai)
- **üìß Email**: support@obsera.ai
- **üêõ Issues**: [GitHub Issues](https://github.com/PYPE-AI-MAIN/obsera/issues)

---

**üéâ You're now a dashboard expert!** Use these insights to optimize your voice AI applications and drive better results.
</file>

<file path="docs/faq.md">
# ‚ùì Frequently Asked Questions

Common questions and answers about Obsera voice analytics platform.

## üöÄ Getting Started

### Q: How do I get started with Obsera?

**A:** Getting started is easy! Follow these steps:

1. **Sign up** at [https://pype-voice-analytics-dashboard.vercel.app](https://pype-voice-analytics-dashboard.vercel.app)
2. **Create a project** and add an agent
3. **Get your Agent ID** from the dashboard
4. **Generate an API key** from your account settings
5. **Install the SDK**: `pip install obsera`
6. **Integrate** with your LiveKit agent

See our [Getting Started Guide](getting-started.md) for detailed instructions.

### Q: What are the system requirements?

**A:** Obsera requires:

- **Python 3.8+** for the SDK
- **LiveKit Agents 1.2.2+** for integration
- **Modern web browser** for the dashboard
- **Internet connection** for data synchronization

### Q: Is Obsera free to use?

**A:** Obsera offers both free and paid tiers:

- **Free Tier**: 100 calls/month, basic analytics
- **Pro Tier**: $49/month, unlimited calls, advanced features
- **Enterprise**: Custom pricing, dedicated support

## üîß Integration & SDK

### Q: How do I integrate Obsera with my existing LiveKit agent?

**A:** Integration is straightforward:

```python
from obsera import LivekitObserve

# Initialize with your agent ID
obsera = LivekitObserve(agent_id="your-agent-id")

# Start tracking
session_id = obsera.start_session(session)

# Export on shutdown
async def shutdown():
    await obsera.export(session_id)

ctx.add_shutdown_callback(shutdown)
```

### Q: Does Obsera affect my agent's performance?

**A:** No, Obsera is designed to be lightweight and non-intrusive:

- **Minimal overhead**: <1% performance impact
- **Asynchronous**: Data collection happens in background
- **Non-blocking**: Doesn't interfere with your agent's responses
- **Optional**: You can disable tracking for specific sessions

### Q: What data does Obsera collect?

**A:** Obsera collects comprehensive metrics:

- **üéôÔ∏è Speech-to-Text**: Audio duration, processing time, accuracy
- **üß† LLM**: Token usage, response time, costs
- **üó£Ô∏è Text-to-Speech**: Character count, audio duration, quality
- **‚è±Ô∏è Timing**: Turn-taking, response latency
- **üí∞ Costs**: Real-time cost tracking across providers

### Q: Is my conversation data secure?

**A:** Yes, security is our top priority:

- **End-to-end encryption** for data in transit
- **SOC 2 compliant** infrastructure
- **GDPR compliant** data handling
- **Self-hosting option** for complete data control
- **No sensitive data** stored in plain text

## üìä Dashboard & Analytics

### Q: How long does it take for data to appear in the dashboard?

**A:** Data typically appears within 1-2 minutes:

- **Real-time metrics**: Updated every 30 seconds
- **Call data**: Available within 1 minute of completion
- **Cost tracking**: Updated in real-time
- **Analytics**: Processed within 5 minutes

### Q: Can I export my data?

**A:** Yes, multiple export options are available:

- **CSV export** for spreadsheet analysis
- **JSON export** for custom integrations
- **API access** for automated data retrieval
- **Scheduled exports** for regular reporting

### Q: How accurate are the cost calculations?

**A:** Cost calculations are highly accurate:

- **Real-time pricing** from all major providers
- **Token-level tracking** for precise billing
- **Provider-specific rates** for accurate calculations
- **Historical rate tracking** for trend analysis

### Q: Can I compare different agents or versions?

**A:** Yes, Obsera provides comprehensive comparison tools:

- **Agent comparison** across different versions
- **A/B testing** support for performance analysis
- **Cost comparison** between different configurations
- **Performance benchmarking** against industry standards

## üí∞ Billing & Costs

### Q: How is Obsera priced?

**A:** Obsera uses a simple pricing model:

- **Free Tier**: 100 calls/month
- **Pro Tier**: $49/month, unlimited calls
- **Enterprise**: Custom pricing based on volume
- **Self-hosted**: One-time setup fee

### Q: Do I pay for failed calls?

**A:** No, you only pay for successful data collection:

- **Failed calls**: Not charged
- **Partial data**: Charged proportionally
- **Test calls**: Can be marked as non-billable
- **Development**: Separate billing for dev environments

### Q: Can I set spending limits?

**A:** Yes, multiple ways to control costs:

- **Daily limits**: Set maximum daily spending
- **Per-call limits**: Limit cost per individual call
- **Alert thresholds**: Get notified when limits are reached
- **Automatic shutdown**: Stop tracking when limits exceeded

## üîí Security & Privacy

### Q: Where is my data stored?

**A:** Data storage options:

- **Cloud hosting**: AWS/GCP with SOC 2 compliance
- **Self-hosting**: Your own infrastructure
- **Regional options**: Choose data center location
- **Backup**: Automatic daily backups

### Q: Can I self-host Obsera?

**A:** Yes, complete self-hosting is supported:

- **Docker deployment** for easy setup
- **Manual installation** for custom configurations
- **Database options**: PostgreSQL or Supabase
- **Full control** over your data

See our [Self-hosting Guide](self-hosting.md) for detailed instructions.

### Q: Is Obsera GDPR compliant?

**A:** Yes, Obsera is fully GDPR compliant:

- **Data portability**: Export all your data
- **Right to deletion**: Remove data on request
- **Consent management**: Clear data usage policies
- **Audit trails**: Complete data access logs

## üõ†Ô∏è Technical Support

### Q: What if my data isn't appearing?

**A:** Common troubleshooting steps:

1. **Check API key**: Verify it's correct and active
2. **Check agent ID**: Ensure it matches your dashboard
3. **Check network**: Ensure internet connectivity
4. **Check logs**: Enable debug mode for detailed logs
5. **Contact support**: If issues persist

### Q: How do I get help with integration?

**A:** Multiple support channels available:

- **üìñ Documentation**: Comprehensive guides and examples
- **üí¨ Discord**: Active community for quick help
- **üìß Email**: support@obsera.ai for detailed support
- **üêõ GitHub**: Open issues for bugs and feature requests

### Q: Can I customize the analytics?

**A:** Yes, extensive customization options:

- **Custom metrics**: Define your own KPIs
- **Custom dashboards**: Build personalized views
- **API integration**: Connect with your existing tools
- **Webhook notifications**: Real-time alerts

## üöÄ Advanced Features

### Q: Does Obsera support multiple languages?

**A:** Yes, full multilingual support:

- **All major languages** supported
- **Automatic language detection**
- **Language-specific analytics**
- **Multi-language agent support**

### Q: Can I integrate with other tools?

**A:** Yes, extensive integration options:

- **Slack notifications** for alerts
- **Zapier integration** for automation
- **Webhook support** for custom integrations
- **API access** for custom development

### Q: Does Obsera work with all voice providers?

**A:** Yes, Obsera supports all major providers:

- **STT**: OpenAI Whisper, Deepgram, Azure, Google
- **TTS**: ElevenLabs, Azure, Google, Amazon Polly
- **LLM**: OpenAI, Anthropic, Google, Azure
- **Custom providers**: API for custom integrations

### Q: Can I use Obsera for non-voice AI?

**A:** Currently, Obsera is optimized for voice AI:

- **Voice-specific metrics** and analytics
- **Audio quality analysis**
- **Speech-to-text accuracy**
- **Voice agent optimization**

## üìà Performance & Scalability

### Q: How many calls can Obsera handle?

**A:** Obsera is built for scale:

- **Free tier**: 100 calls/month
- **Pro tier**: Unlimited calls
- **Enterprise**: Millions of calls per month
- **Real-time processing**: No delays in analytics

### Q: What's the latency impact?

**A:** Minimal latency impact:

- **<1% overhead** on response times
- **Asynchronous processing** for data collection
- **Non-blocking operations** for real-time responses
- **Optimized SDK** for minimal resource usage

### Q: Can I use Obsera in production?

**A:** Yes, Obsera is production-ready:

- **99.9% uptime** SLA
- **Enterprise-grade** infrastructure
- **Production deployments** worldwide
- **24/7 monitoring** and support

## üîÑ Updates & Roadmap

### Q: How often is Obsera updated?

**A:** Regular updates and improvements:

- **Weekly updates** for bug fixes
- **Monthly releases** for new features
- **Quarterly major releases** for significant improvements
- **Continuous monitoring** and optimization

### Q: What's coming next?

**A:** Exciting features in development:

- **Multi-language SDKs** (JavaScript, Go, Rust)
- **Advanced ML insights** and anomaly detection
- **Mobile app** for monitoring on-the-go
- **GraphQL API** for flexible data access
- **Custom webhook integrations**

### Q: How can I request features?

**A:** Multiple ways to contribute:

- **üí¨ Discord**: Join discussions and share ideas
- **üêõ GitHub**: Open feature requests
- **üìß Email**: Send detailed proposals
- **Community voting**: Vote on upcoming features

## üí¨ Community & Support

### Q: Is there a community I can join?

**A:** Yes, vibrant community available:

- **üí¨ Discord**: Active community with 1000+ members
- **üêõ GitHub**: Open source contributions welcome
- **üìß Email**: Direct support from the team
- **üì± Twitter**: Follow for updates and tips

### Q: How can I contribute to Obsera?

**A:** Multiple ways to contribute:

- **Code contributions**: Submit pull requests
- **Documentation**: Help improve guides
- **Bug reports**: Report issues you find
- **Feature ideas**: Suggest new features
- **Community support**: Help other users

### Q: Is Obsera open source?

**A:** Obsera is open source with commercial support:

- **MIT license** for the core platform
- **Open source SDK** available on GitHub
- **Community contributions** welcome
- **Commercial support** for enterprise users

---

**Still have questions?** Join our [Discord community](https://discord.gg/pypeai) or email support@obsera.ai for personalized help!
</file>

<file path="docs/getting-started.md">
# üöÄ Getting Started Guide

Welcome to Obsera! This guide will help you get up and running with voice analytics for your AI agents in under 10 minutes.

## üìã Prerequisites

Before you begin, make sure you have:

- **Python 3.8+** installed on your system
- **LiveKit Agents** set up in your project
- **Active internet connection** for dashboard access

## üéØ Quick Start (2 minutes)

### Step 1: Sign Up & Get Credentials

1. **Visit the dashboard**: [https://pype-voice-analytics-dashboard.vercel.app](https://pype-voice-analytics-dashboard.vercel.app)
2. **Create an account** or sign in
3. **Create a new project** (if you don't have one)
4. **Add an agent** to your project
5. **Copy your Agent ID** from the agent settings
6. **Generate an API key** from your account settings

### Step 2: Install the SDK

```bash
pip install obsera
```

### Step 3: Set Up Environment

Create a `.env` file in your project root:

```env
# Obsera Voice Analytics
OBSERA_API_KEY=your_api_key_here
```

### Step 4: Integrate with Your Agent

```python
from dotenv import load_dotenv
from livekit import agents
from livekit.agents import AgentSession
from obsera import LivekitObserve

# Load environment variables
load_dotenv()

# Initialize Obsera
obsera = LivekitObserve(agent_id="your-agent-id")

async def entrypoint(ctx: agents.JobContext):
    await ctx.connect()
    
    # Your existing session setup
    session = AgentSession(
        stt=deepgram.STT(model="nova-3"),
        llm=openai.LLM(model="gpt-4o-mini"),
        tts=elevenlabs.TTS(voice_id="your-voice-id"),
        # ... other configurations
    )
    
    # Start Obsera tracking
    session_id = obsera.start_session(
        session,
        phone_number="+1234567890",  # Optional
        customer_name="John Doe"     # Optional
    )
    
    # Export data on shutdown
    async def shutdown():
        await obsera.export(session_id)
    
    ctx.add_shutdown_callback(shutdown)
    
    # Start your session
    await session.start(room=ctx.room, agent=YourAgent())
```

### Step 5: View Your Analytics

Visit your dashboard at [https://pype-voice-analytics-dashboard.vercel.app](https://pype-voice-analytics-dashboard.vercel.app) to see your analytics in real-time!

## üîß Basic Configuration

### Environment Variables

| Variable | Required | Description |
|----------|----------|-------------|
| `OBSERA_API_KEY` | Yes | Your API key from the dashboard |

### Session Metadata

You can pass additional metadata when starting a session:

```python
session_id = obsera.start_session(
    session,
    phone_number="+1234567890",        # Customer phone
    customer_name="Jane Smith",        # Customer name
    conversation_type="voice_call",    # Call type
    fpo_name="Agent Name",            # Agent identifier
    lesson_day=3,                     # Custom metadata
    custom_field="any_value"          # Additional data
)
```

## üìä What Gets Tracked

Obsera automatically collects:

- **üéôÔ∏è Speech-to-Text**: Audio duration, processing time, accuracy
- **üß† LLM**: Token usage, response time, model costs
- **üó£Ô∏è Text-to-Speech**: Character count, audio duration, voice quality
- **‚è±Ô∏è Timing**: Turn-taking, response latency, conversation flow
- **üí∞ Costs**: Real-time cost tracking across all providers

## üéØ Next Steps

- **üìñ SDK Reference**: Learn about advanced features
- **üìä Dashboard Tutorial**: Master the analytics interface
- **üè† Self-hosting**: Deploy your own instance
- **üîå API Documentation**: Integrate with custom solutions

## üÜò Need Help?

- **üí¨ Discord**: [Join our community](https://discord.gg/pypeai)
- **üìß Email**: support@obsera.ai
- **üêõ Issues**: [GitHub Issues](https://github.com/PYPE-AI-MAIN/obsera/issues)

---

**üéâ Congratulations!** You're now tracking voice analytics with Obsera. Your first call data should appear in the dashboard within minutes.
</file>

<file path="docs/sdk-reference.md">
# üîß SDK Reference

Complete reference for the Obsera Python SDK.

## üì¶ Installation

```bash
pip install obsera
```

## üèóÔ∏è Core Classes

### `LivekitObserve`

The main class for integrating Obsera with your LiveKit agents.

```python
from obsera import LivekitObserve

obsera = LivekitObserve(agent_id="your-agent-id")
```

#### Constructor Parameters

| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| `agent_id` | `str` | Yes | Your agent ID from the dashboard |

#### Methods

##### `start_session(session, **metadata)`

Starts tracking a LiveKit session.

```python
session_id = obsera.start_session(
    session,
    phone_number="+1234567890",
    customer_name="John Doe",
    conversation_type="voice_call",
    fpo_name="Agent Name",
    lesson_day=3,
    custom_field="any_value"
)
```

**Parameters:**
- `session`: LiveKit AgentSession object
- `**metadata`: Optional session metadata

**Returns:** `str` - Session ID for later reference

**Metadata Examples:**
| Field | Type | Description |
|-------|------|-------------|
| `phone_number` | `str` | Customer phone number |
| `customer_name` | `str` | Customer name |
| `conversation_type` | `str` | Type of conversation |
| `fpo_name` | `str` | Agent name/identifier |
| `lesson_day` | `int` | Custom numeric field |
| `custom_field` | `str` | Any custom string data |

##### `export(session_id, recording_url="")`

Exports session data to Obsera platform.

```python
result = await obsera.export(
    session_id,
    recording_url="https://example.com/recording.mp3"
)
```

**Parameters:**
- `session_id`: Session ID from `start_session()`
- `recording_url`: Optional recording URL

**Returns:** `dict` - Export result with success status

##### `get_data(session_id)`

Gets current session data without exporting.

```python
data = obsera.get_data(session_id)
print(f"Current metrics: {data}")
```

**Parameters:**
- `session_id`: Session ID from `start_session()`

**Returns:** `dict` - Current session metrics

##### `end(session_id)`

Manually ends a session.

```python
obsera.end(session_id)
```

**Parameters:**
- `session_id`: Session ID from `start_session()`

## üìä Metrics Collected

### Speech-to-Text (STT) Metrics

```python
{
    "stt": {
        "audio_duration": 2.5,        # seconds
        "processing_time": 0.8,       # seconds
        "accuracy_score": 0.95,       # 0-1 scale
        "provider": "deepgram",       # provider name
        "model": "nova-3"             # model used
    }
}
```

### Large Language Model (LLM) Metrics

```python
{
    "llm": {
        "input_tokens": 150,          # tokens consumed
        "output_tokens": 75,          # tokens generated
        "total_cost": 0.0023,         # USD
        "response_time": 1.2,         # seconds
        "ttft": 0.8,                 # time to first token
        "provider": "openai",         # provider name
        "model": "gpt-4o-mini"       # model used
    }
}
```

### Text-to-Speech (TTS) Metrics

```python
{
    "tts": {
        "character_count": 45,        # characters processed
        "audio_duration": 3.2,        # seconds
        "ttfb": 0.5,                 # time to first byte
        "total_cost": 0.0015,         # USD
        "provider": "elevenlabs",     # provider name
        "voice_id": "voice-id"        # voice used
    }
}
```

### Voice Activity Detection (VAD) Metrics

```python
{
    "vad": {
        "voice_detected": true,       # boolean
        "confidence": 0.92,           # 0-1 scale
        "silence_duration": 1.5,      # seconds
        "provider": "silero"          # provider name
    }
}
```

## üîß Advanced Usage

### Manual Session Control

```python
# Start session
session_id = obsera.start_session(session, **metadata)

# Get current data
current_data = obsera.get_data(session_id)

# Manually end session
obsera.end(session_id)

# Export to platform
result = await obsera.export(session_id, recording_url="https://...")
```

### Error Handling

```python
try:
    session_id = obsera.start_session(session)
    # ... your session code ...
    result = await obsera.export(session_id)
    
    if result.get("success"):
        print("‚úÖ Data exported successfully!")
    else:
        print(f"‚ùå Export failed: {result.get('error')}")
        
except Exception as e:
    print(f"üí• Obsera error: {e}")
```

### Debug Mode

Enable verbose logging for troubleshooting:

```python
import logging

# Set logging level
logging.basicConfig(level=logging.INFO)

# Your Obsera code here
obsera = LivekitObserve(agent_id="your-agent-id")
```

## üõ†Ô∏è Configuration

### Environment Variables

| Variable | Description | Default |
|----------|-------------|---------|
| `OBSERA_API_KEY` | Your API key | Required |
| `OBSERA_API_URL` | API endpoint | Auto-detected |

### API Endpoints

- **Production**: `https://api.obsera.ai`
- **Development**: `https://dev-api.obsera.ai`

## üìù Examples

### Basic Integration

```python
from obsera import LivekitObserve

obsera = LivekitObserve(agent_id="your-agent-id")

# Start tracking
session_id = obsera.start_session(session)

# Export on shutdown
async def shutdown():
    await obsera.export(session_id)

ctx.add_shutdown_callback(shutdown)
```

### With Custom Metadata

```python
session_id = obsera.start_session(
    session,
    phone_number="+1234567890",
    customer_name="Jane Smith",
    conversation_type="support_call",
    fpo_name="Support Agent",
    lesson_day=1,
    custom_field="high_priority"
)
```

### Manual Export

```python
# Get current data
data = obsera.get_data(session_id)
print(f"Current metrics: {data}")

# Export with recording
result = await obsera.export(
    session_id,
    recording_url="https://storage.example.com/recording.mp3"
)
```

## üÜò Troubleshooting

### Common Issues

**"Session not found" Error**
```python
# Ensure session_id is stored correctly
session_id = obsera.start_session(session)
print(f"Session ID: {session_id}")  # Save this
```

**"No data available" Error**
```python
# Allow time for metrics collection
await asyncio.sleep(1)
result = await obsera.export(session_id)
```

**API Authentication Error**
```bash
# Check environment variable
echo $OBSERA_API_KEY

# Set if missing
export OBSERA_API_KEY="your_api_key_here"
```

## üìö Related Documentation

- [üöÄ Getting Started Guide](getting-started.md)
- [üìä Dashboard Tutorial](dashboard-guide.md)
- [üîå API Documentation](api-reference.md)

---

**Need help?** Join our [Discord community](https://discord.gg/pypeai) or email support@obsera.ai
</file>

<file path="docs/self-hosting.md">
# üè† Self-hosting Guide

Deploy Obsera on your own infrastructure for complete data control and privacy.

## üìã Prerequisites

Before self-hosting, ensure you have:

- **Node.js 18+** and **npm** installed
- **PostgreSQL 14+** database (or Supabase account)
- **Clerk.dev** account for authentication
- **Domain name** (optional but recommended)
- **SSL certificate** for production

## üöÄ Quick Deployment

### Option 1: Docker (Recommended)

```bash
# Clone the repository
git clone https://github.com/PYPE-AI-MAIN/obsera
cd obsera

# Copy environment template
cp .env.example .env.local

# Edit environment variables
nano .env.local

# Start with Docker Compose
docker-compose up -d
```

### Option 2: Manual Setup

```bash
# Clone the repository
git clone https://github.com/PYPE-AI-MAIN/obsera
cd obsera

# Install dependencies
npm install

# Set up environment
cp .env.example .env.local
```

## üîß Environment Configuration

Edit `.env.local` with your configuration:

```env
# Database (Supabase)
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key

# Authentication (Clerk)
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_clerk_publishable_key
CLERK_SECRET_KEY=your_clerk_secret_key
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/dashboard

# API Configuration
NEXT_PUBLIC_API_URL=http://localhost:3000/api
OBSERA_API_KEY=your_api_key_for_sdk

# Optional: Analytics
NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=your_ga_id
```

## üóÑÔ∏è Database Setup

### Option 1: Supabase (Recommended)

1. **Create Supabase project** at [supabase.com](https://supabase.com)
2. **Run the setup script**:

```bash
# Copy the SQL setup script
cp setup-supabase.sql your-project.sql

# Execute in Supabase SQL editor
# Or use the Supabase CLI:
supabase db push
```

### Option 2: PostgreSQL

```bash
# Install PostgreSQL
sudo apt-get install postgresql postgresql-contrib

# Create database
sudo -u postgres createdb obsera

# Run setup script
psql -d obsera -f setup-supabase.sql
```

## üîê Authentication Setup

### Clerk.dev Configuration

1. **Create Clerk application** at [clerk.dev](https://clerk.dev)
2. **Configure domains** in Clerk dashboard
3. **Set up OAuth providers** (Google, GitHub, etc.)
4. **Copy API keys** to your `.env.local`

### Custom Authentication (Advanced)

```typescript
// lib/auth.ts
import { createClerkClient } from '@clerk/nextjs/server'

export const clerk = createClerkClient({
  secretKey: process.env.CLERK_SECRET_KEY,
  publishableKey: process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,
})
```

## üåê Domain & SSL Setup

### Production Domain

```bash
# Configure your domain
# Add to your DNS:
# A record: your-domain.com -> your-server-ip
# CNAME: www.your-domain.com -> your-domain.com

# Update environment
NEXT_PUBLIC_APP_URL=https://your-domain.com
```

### SSL Certificate

```bash
# Install Certbot
sudo apt-get install certbot

# Get SSL certificate
sudo certbot --nginx -d your-domain.com

# Auto-renewal
sudo crontab -e
# Add: 0 12 * * * /usr/bin/certbot renew --quiet
```

## üê≥ Docker Deployment

### Docker Compose

```yaml
# docker-compose.yml
version: '3.8'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.local
    depends_on:
      - db
  
  db:
    image: postgres:14
    environment:
      POSTGRES_DB: obsera
      POSTGRES_USER: obsera
      POSTGRES_PASSWORD: your_password
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
```

### Build and Deploy

```bash
# Build the image
docker build -t obsera .

# Run with Docker Compose
docker-compose up -d

# View logs
docker-compose logs -f
```

## üöÄ Production Deployment

### Vercel Deployment

```bash
# Install Vercel CLI
npm i -g vercel

# Deploy
vercel --prod

# Set environment variables
vercel env add NEXT_PUBLIC_SUPABASE_URL
vercel env add NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY
# ... add all required env vars
```

### Manual Server Deployment

```bash
# Install PM2
npm install -g pm2

# Build the application
npm run build

# Start with PM2
pm2 start npm --name "obsera" -- start

# Save PM2 configuration
pm2 save
pm2 startup
```

## üîß Customization

### Branding

```typescript
// lib/config.ts
export const config = {
  appName: "Your Company Analytics",
  logo: "/your-logo.png",
  primaryColor: "#3B82F6",
  // ... other branding options
}
```

### Custom API Endpoints

```typescript
// pages/api/custom-endpoint.ts
import { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Your custom API logic
  res.status(200).json({ message: 'Custom endpoint' })
}
```

## üìä Monitoring & Maintenance

### Health Checks

```bash
# Check application health
curl https://your-domain.com/api/health

# Monitor logs
docker-compose logs -f app
pm2 logs obsera
```

### Database Maintenance

```sql
-- Regular cleanup (run monthly)
DELETE FROM logs WHERE created_at < NOW() - INTERVAL '90 days';
VACUUM ANALYZE;
```

### Backup Strategy

```bash
# Database backup
pg_dump obsera > backup_$(date +%Y%m%d).sql

# File backup
tar -czf backup_$(date +%Y%m%d).tar.gz /path/to/obsera
```

## üîí Security Considerations

### Environment Security

```bash
# Secure environment file
chmod 600 .env.local

# Use secrets management
# For Docker: docker secrets
# For Kubernetes: Kubernetes secrets
```

### Network Security

```bash
# Configure firewall
sudo ufw allow 22/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
sudo ufw enable
```

### SSL/TLS Configuration

```nginx
# nginx.conf
server {
    listen 443 ssl http2;
    server_name your-domain.com;
    
    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
    
    location / {
        proxy_pass http://localhost:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
```

## üÜò Troubleshooting

### Common Issues

**Database Connection Error**
```bash
# Check database status
sudo systemctl status postgresql

# Test connection
psql -h localhost -U obsera -d obsera
```

**Authentication Issues**
```bash
# Check Clerk configuration
curl -H "Authorization: Bearer $CLERK_SECRET_KEY" \
  https://api.clerk.dev/v1/users
```

**Build Errors**
```bash
# Clear cache
rm -rf .next
npm run build

# Check Node.js version
node --version  # Should be 18+
```

## üìö Related Documentation

- [üöÄ Getting Started Guide](getting-started.md)
- [üîß SDK Reference](sdk-reference.md)
- [üìä Dashboard Tutorial](dashboard-guide.md)

## üí¨ Support

- **üí¨ Discord**: [Join our community](https://discord.gg/pypeai)
- **üìß Email**: support@obsera.ai
- **üêõ Issues**: [GitHub Issues](https://github.com/PYPE-AI-MAIN/obsera/issues)

---

**üéâ Your self-hosted Obsera instance is ready!** Visit your domain to start using the analytics platform.
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="sdk/whispey/__init__.py">
"""Whispey Observe SDK - Voice Analytics for AI Agents"""

__version__ = "1.0.0"
__author__ = "Whispey AI Voice Analytics"

from .whispey import observe_session, send_session_to_whispey

# Professional wrapper class
class LivekitObserve:
    def __init__(self, agent_id="whispey-agent"):
        self.agent_id = agent_id
    
    def start_session(self, session,**kwargs):
        return observe_session(session,self.agent_id,**kwargs)
    
    async def export(self, session_id, recording_url=""):
        return await send_session_to_whispey(session_id, recording_url)
</file>

<file path="sdk/whispey/event_handlers.py">
import time
import logging
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, field
from livekit.agents import metrics, MetricsCollectedEvent
from livekit.agents.metrics import STTMetrics, LLMMetrics, TTSMetrics, EOUMetrics


logger = logging.getLogger("kannada-tutor")

@dataclass
class ConversationTurn:
    """A complete conversation turn with user input, agent processing, and response"""
    turn_id: str
    user_transcript: str = ""
    agent_response: str = ""
    stt_metrics: Optional[Dict[str, Any]] = None
    llm_metrics: Optional[Dict[str, Any]] = None
    tts_metrics: Optional[Dict[str, Any]] = None
    eou_metrics: Optional[Dict[str, Any]] = None
    timestamp: float = field(default_factory=time.time)
    user_turn_complete: bool = False
    agent_turn_complete: bool = False
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'turn_id': self.turn_id,
            'user_transcript': self.user_transcript,
            'agent_response': self.agent_response,
            'stt_metrics': self.stt_metrics,
            'llm_metrics': self.llm_metrics,
            'tts_metrics': self.tts_metrics,
            'eou_metrics': self.eou_metrics,
            'timestamp': self.timestamp
        }

class CorrectedTranscriptCollector:
    """Corrected collector that properly maps STT‚Üíuser, TTS‚Üíagent"""
    
    def __init__(self):
        self.turns: List[ConversationTurn] = []
        self.session_start_time = time.time()
        self.current_turn: Optional[ConversationTurn] = None
        self.turn_counter = 0
        self.pending_metrics = {
            'stt': None,
            'llm': None,
            'tts': None,
            'eou': None
        }
        
    def on_conversation_item_added(self, event):
        """Called when conversation item is added to history"""
        logger.info(f"üîç CONVERSATION: {event.item.role} - {event.item.text_content[:50]}...")
        
        if event.item.role == "user":
            # User input - start new turn or update existing
            if not self.current_turn:
                self.turn_counter += 1
                self.current_turn = ConversationTurn(
                    turn_id=f"turn_{self.turn_counter}",
                    timestamp=time.time()
                )
            
            self.current_turn.user_transcript = event.item.text_content
            self.current_turn.user_turn_complete = True
            
            # Apply pending STT metrics (STT metrics come AFTER user transcript)
            if self.pending_metrics['stt']:
                self.current_turn.stt_metrics = self.pending_metrics['stt']
                self.pending_metrics['stt'] = None
                logger.info(f"üìä Applied pending STT metrics to turn {self.current_turn.turn_id}")
            
            # Apply pending EOU metrics
            if self.pending_metrics['eou']:
                self.current_turn.eou_metrics = self.pending_metrics['eou']
                self.pending_metrics['eou'] = None
                logger.info(f"‚è±Ô∏è Applied pending EOU metrics to turn {self.current_turn.turn_id}")
                
            logger.info(f"üë§ User input for turn {self.current_turn.turn_id}: {event.item.text_content[:50]}...")
            
        elif event.item.role == "assistant":
            # Agent response - complete the turn
            if not self.current_turn:
                # Agent speaks without user input (like greetings)
                self.turn_counter += 1
                self.current_turn = ConversationTurn(
                    turn_id=f"turn_{self.turn_counter}",
                    timestamp=time.time()
                )
            
            self.current_turn.agent_response = event.item.text_content
            self.current_turn.agent_turn_complete = True
            
            # Apply pending LLM metrics
            if self.pending_metrics['llm']:
                self.current_turn.llm_metrics = self.pending_metrics['llm']
                self.pending_metrics['llm'] = None
                logger.info(f"üß† Applied pending LLM metrics to turn {self.current_turn.turn_id}")
            
            # Apply pending TTS metrics (TTS metrics come AFTER agent response)
            if self.pending_metrics['tts']:
                self.current_turn.tts_metrics = self.pending_metrics['tts']
                self.pending_metrics['tts'] = None
                logger.info(f"üó£Ô∏è Applied pending TTS metrics to turn {self.current_turn.turn_id}")
            
            logger.info(f"ü§ñ Agent response for turn {self.current_turn.turn_id}: {event.item.text_content[:50]}...")
            
            # Turn is complete, add to turns list
            self.turns.append(self.current_turn)
            logger.info(f"‚úÖ Completed turn {self.current_turn.turn_id}")
            self.current_turn = None
    
    def on_metrics_collected(self, metrics_event):
        """Called when metrics are collected - maps metrics intelligently"""
        metrics_obj = metrics_event.metrics
        
        logger.info(f"üìà METRICS: {type(metrics_obj).__name__}")
        
        if isinstance(metrics_obj, STTMetrics):
            # STT metrics - belongs to user input
            stt_data = {
                'audio_duration': metrics_obj.audio_duration,
                'duration': metrics_obj.duration,
                'timestamp': metrics_obj.timestamp,
                'request_id': metrics_obj.request_id
            }
            
            # Try to apply to current turn first
            if self.current_turn and self.current_turn.user_transcript and not self.current_turn.stt_metrics:
                self.current_turn.stt_metrics = stt_data
                logger.info(f"üìä Applied STT metrics to current turn {self.current_turn.turn_id}")
            
            # Try to apply to last turn if it has user input but no STT
            elif self.turns and self.turns[-1].user_transcript and not self.turns[-1].stt_metrics:
                self.turns[-1].stt_metrics = stt_data
                logger.info(f"üìä Applied STT metrics to last turn {self.turns[-1].turn_id}")
            
            # Otherwise store as pending
            else:
                self.pending_metrics['stt'] = stt_data
                logger.info("üìä Stored STT metrics as pending")
                
        elif isinstance(metrics_obj, LLMMetrics):
            # LLM metrics - belongs to agent processing
            llm_data = {
                'prompt_tokens': metrics_obj.prompt_tokens,
                'completion_tokens': metrics_obj.completion_tokens,
                'ttft': metrics_obj.ttft,
                'tokens_per_second': metrics_obj.tokens_per_second,
                'timestamp': metrics_obj.timestamp,
                'request_id': metrics_obj.request_id
            }
            
            # Apply to current turn or store as pending
            if self.current_turn and not self.current_turn.llm_metrics:
                self.current_turn.llm_metrics = llm_data
                logger.info(f"üß† Applied LLM metrics to current turn {self.current_turn.turn_id}")
            else:
                self.pending_metrics['llm'] = llm_data
                logger.info("üß† Stored LLM metrics as pending")
                
        elif isinstance(metrics_obj, TTSMetrics):
            # TTS metrics - belongs to agent speech
            tts_data = {
                'characters_count': metrics_obj.characters_count,
                'audio_duration': metrics_obj.audio_duration,
                'ttfb': metrics_obj.ttfb,
                'timestamp': metrics_obj.timestamp,
                'request_id': metrics_obj.request_id
            }
            
            # Try to apply to current turn first
            if self.current_turn and self.current_turn.agent_response and not self.current_turn.tts_metrics:
                self.current_turn.tts_metrics = tts_data
                logger.info(f"üó£Ô∏è Applied TTS metrics to current turn {self.current_turn.turn_id}")
            
            # Try to apply to last turn if it has agent response but no TTS
            elif self.turns and self.turns[-1].agent_response and not self.turns[-1].tts_metrics:
                self.turns[-1].tts_metrics = tts_data
                logger.info(f"üó£Ô∏è Applied TTS metrics to last turn {self.turns[-1].turn_id}")
            
            # Otherwise store as pending
            else:
                self.pending_metrics['tts'] = tts_data
                logger.info("üó£Ô∏è Stored TTS metrics as pending")
                
        elif isinstance(metrics_obj, EOUMetrics):
            # EOU metrics - belongs to user turn
            eou_data = {
                'end_of_utterance_delay': metrics_obj.end_of_utterance_delay,
                'transcription_delay': metrics_obj.transcription_delay,
                'timestamp': metrics_obj.timestamp
            }
            
            # Apply to current turn or store as pending
            if self.current_turn and self.current_turn.user_transcript and not self.current_turn.eou_metrics:
                self.current_turn.eou_metrics = eou_data
                logger.info(f"‚è±Ô∏è Applied EOU metrics to current turn {self.current_turn.turn_id}")
            elif self.turns and self.turns[-1].user_transcript and not self.turns[-1].eou_metrics:
                self.turns[-1].eou_metrics = eou_data
                logger.info(f"‚è±Ô∏è Applied EOU metrics to last turn {self.turns[-1].turn_id}")
            else:
                self.pending_metrics['eou'] = eou_data
                logger.info("‚è±Ô∏è Stored EOU metrics as pending")
    
    def finalize_session(self):
        """Apply any remaining pending metrics"""
        if self.current_turn:
            self.turns.append(self.current_turn)
            self.current_turn = None
            
        # Apply any remaining pending metrics to the last appropriate turn
        if self.pending_metrics['tts'] and self.turns:
            for turn in reversed(self.turns):
                if turn.agent_response and not turn.tts_metrics:
                    turn.tts_metrics = self.pending_metrics['tts']
                    logger.info(f"üó£Ô∏è Applied final TTS metrics to turn {turn.turn_id}")
                    break
                    
        if self.pending_metrics['stt'] and self.turns:
            for turn in reversed(self.turns):
                if turn.user_transcript and not turn.stt_metrics:
                    turn.stt_metrics = self.pending_metrics['stt']
                    logger.info(f"üìä Applied final STT metrics to turn {turn.turn_id}")
                    break
    
    def get_turns_array(self) -> List[Dict[str, Any]]:
        """Get the array of conversation turns with transcripts and metrics"""
        self.finalize_session()
        return [turn.to_dict() for turn in self.turns]
    
    def get_formatted_transcript(self) -> str:
        """Get formatted transcript"""
        self.finalize_session()
        lines = []
        lines.append("=" * 80)
        lines.append("CONVERSATION TRANSCRIPT (CORRECTED MAPPING)")
        lines.append("=" * 80)
        
        for i, turn in enumerate(self.turns, 1):
            lines.append(f"\nüîÑ TURN {i} (ID: {turn.turn_id})")
            lines.append("-" * 40)
            
            if turn.user_transcript:
                lines.append(f"üë§ USER: {turn.user_transcript}")
                if turn.stt_metrics:
                    lines.append(f"   üìä STT: {turn.stt_metrics['audio_duration']:.2f}s audio ‚úÖ")
                else:
                    lines.append(f"   üìä STT: MISSING ‚ùå")
                    
                if turn.eou_metrics:
                    lines.append(f"   ‚è±Ô∏è EOU: {turn.eou_metrics['end_of_utterance_delay']:.2f}s delay")
            else:
                lines.append("üë§ USER: [No user input]")
            
            if turn.agent_response:
                lines.append(f"ü§ñ AGENT: {turn.agent_response}")
                if turn.llm_metrics:
                    lines.append(f"   üß† LLM: {turn.llm_metrics['prompt_tokens']}+{turn.llm_metrics['completion_tokens']} tokens, TTFT: {turn.llm_metrics['ttft']:.2f}s ‚úÖ")
                else:
                    lines.append(f"   üß† LLM: MISSING ‚ùå")
                    
                if turn.tts_metrics:
                    lines.append(f"   üó£Ô∏è TTS: {turn.tts_metrics['characters_count']} chars, {turn.tts_metrics['audio_duration']:.2f}s ‚úÖ")
                else:
                    lines.append(f"   üó£Ô∏è TTS: MISSING ‚ùå")
        
        return "\n".join(lines)

def setup_session_event_handlers(session, session_data, usage_collector, userdata):
    """Setup all session event handlers WITH CORRECTED transcript collector"""
    
    # üöÄ CREATE CORRECTED TRANSCRIPT COLLECTOR
    transcript_collector = CorrectedTranscriptCollector()
    
    # üîß STORE IT IN SESSION_DATA SO YOU CAN ACCESS IT LATER
    session_data["transcript_collector"] = transcript_collector
    
    @session.on("metrics_collected")
    def on_metrics_collected(ev: MetricsCollectedEvent):
        # Your existing metrics handling
        usage_collector.collect(ev.metrics)
        metrics.log_metrics(ev.metrics)
        
        # üéØ ADD CORRECTED TRANSCRIPT MAPPING
        transcript_collector.on_metrics_collected(ev)
        
        if isinstance(ev.metrics, metrics.LLMMetrics):
            logger.info(f"üß† LLM: {ev.metrics.prompt_tokens} prompt + {ev.metrics.completion_tokens} completion tokens, TTFT: {ev.metrics.ttft:.2f}s")
            
        elif isinstance(ev.metrics, metrics.TTSMetrics):
            logger.info(f"üó£Ô∏è TTS: {ev.metrics.characters_count} chars, Duration: {ev.metrics.audio_duration:.2f}s, TTFB: {ev.metrics.ttfb:.2f}s")
            
        elif isinstance(ev.metrics, metrics.STTMetrics):
            logger.info(f"üéôÔ∏è STT: {ev.metrics.audio_duration:.2f}s audio processed in {ev.metrics.duration:.2f}s")

    @session.on("conversation_item_added")
    def on_conversation_item_added(event):
        """Track conversation flow for metrics"""
        
        # üéØ ADD CORRECTED TRANSCRIPT MAPPING
        transcript_collector.on_conversation_item_added(event)
        
        # Your existing conversation tracking
        if event.item.role == "user":
            logger.info(f"üë§ User: {event.item.text_content[:50]}...")
            session_data["user_messages"].append({
                "timestamp": time.time(),
                "content": event.item.text_content,
                "type": "user_input"
            })
        elif event.item.role == "assistant":
            logger.info(f"ü§ñ Agent: {event.item.text_content[:50]}...")
            session_data["agent_messages"].append({
                "timestamp": time.time(), 
                "content": event.item.text_content,
                "type": "agent_response"
            })
            
            # ‚úÖ FIXED: Better handoff detection
            if any(phrase in event.item.text_content for phrase in [
                "[Handing off to", "[Handing back to", "handoff_to_", "transfer_to_"
            ]):
                session_data["handoffs"] += 1
                logger.info(f"üîÑ Handoff detected - Total: {session_data['handoffs']}")

    @session.on("close")
    def on_session_close(event):
        """Mark session as completed or failed"""
        session_data["call_success"] = event.error is None
        if event.error:
            session_data["errors"].append(f"Session Error: {event.error}")
        
        # Check if lesson was completed
        if userdata and userdata.current_lesson_step == "lesson_completed":
            session_data["lesson_completed"] = True
            
        logger.info(f"üìä Session ended - Success: {session_data['call_success']}, Lesson completed: {session_data['lesson_completed']}")

# üéØ HELPER FUNCTIONS
def get_session_transcript(session_data) -> Dict[str, Any]:
    """Get transcript data from session"""
    if "transcript_collector" in session_data:
        collector = session_data["transcript_collector"]
        return {
            "turns_array": collector.get_turns_array(),
            "formatted_transcript": collector.get_formatted_transcript(),
            "total_turns": len(collector.turns)
        }
    return {"turns_array": [], "formatted_transcript": "", "total_turns": 0}

def safe_extract_transcript_data(session_data):
    """Safely extract transcript data and remove non-serializable objects"""
    transcript_data = get_session_transcript(session_data)
    
    # Remove the non-serializable collector object
    if "transcript_collector" in session_data:
        del session_data["transcript_collector"]
        logger.info("üîß Removed transcript_collector from session_data")
    
    # Add extracted data to session_data
    session_data["transcript_with_metrics"] = transcript_data["turns_array"]
    session_data["formatted_transcript"] = transcript_data["formatted_transcript"]
    session_data["total_conversation_turns"] = transcript_data["total_turns"]
    
    logger.info(f"‚úÖ Extracted {len(transcript_data['turns_array'])} conversation turns")
    
    return session_data
</file>

<file path="sdk/whispey/metrics_service.py">
import time
from livekit.agents import metrics

def setup_usage_collector():
    """Setup metrics collection"""
    return metrics.UsageCollector()

def create_session_data(ctx, call_start_time):
    """Create initial session data structure"""
    return {
        "session_id": ctx.room.name,
        "start_time": call_start_time,
        "phone_number": None,
        "handoffs": 0,
        "fpo_name": None,
        "call_duration": 0,
        "call_success": False,
        "lesson_completed": False,
        "handoffs": 0,
        "lesson_day": 1,
        "errors": [],
        "user_messages": [],
        "agent_messages": []
    }
</file>

<file path="sdk/whispey/send_log.py">
import os
import json
import asyncio
import aiohttp
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

# Configuration
WHISPEY_API_URL = "https://mp1grlhon8.execute-api.ap-south-1.amazonaws.com/dev/send-call-log"
WHISPEY_API_KEY = os.getenv("WHISPEY_API_KEY")

def convert_timestamp(timestamp_value):
    """
    Convert various timestamp formats to ISO format string
    
    Args:
        timestamp_value: Can be number (Unix timestamp), string (ISO), or datetime object
        
    Returns:
        str: ISO format timestamp string
    """
    
    if timestamp_value is None:
        return None
    
    # If it's already a string, assume it's ISO format
    if isinstance(timestamp_value, str):
        return timestamp_value
    
    # If it's a datetime object, convert to ISO format
    if isinstance(timestamp_value, datetime):
        return timestamp_value.isoformat()
    
    # If it's a number, assume it's Unix timestamp
    if isinstance(timestamp_value, (int, float)):
        try:
            dt = datetime.fromtimestamp(timestamp_value)
            return dt.isoformat()
        except (ValueError, OSError):
            return str(timestamp_value)
    
    # Default: convert to string
    return str(timestamp_value)

async def send_to_whispey(data):
    """
    Send data to Whispey API
    
    Args:
        data (dict): The data to send to the API
    
    Returns:
        dict: Response from the API or error information
    """
    
    # Convert timestamp fields to proper ISO format
    if "call_started_at" in data:
        data["call_started_at"] = convert_timestamp(data["call_started_at"])
    if "call_ended_at" in data:
        data["call_ended_at"] = convert_timestamp(data["call_ended_at"])
    
    
    # Headers
    headers = {
        "Content-Type": "application/json",
        "x-whispey-token": WHISPEY_API_KEY
    }
    
    print(f"üì§ Sending data to Whispey API...")
    print(f"Data keys: {list(data.keys())}")
    print(f"Call started at: {data.get('call_started_at')}")
    print(f"Call ended at: {data.get('call_ended_at')}")
    
    try:
        # Test JSON serialization first
        json_str = json.dumps(data)
        print(f"‚úÖ JSON serialization OK ({len(json_str)} chars)")
        
        # Send the request
        async with aiohttp.ClientSession() as session:
            async with session.post(WHISPEY_API_URL, json=data, headers=headers) as response:
                print(f"üì° Response status: {response.status}")
                
                if response.status >= 400:
                    error_text = await response.text()
                    print(f"‚ùå Error response: {error_text}")
                    return {
                        "success": False,
                        "status": response.status,
                        "error": error_text
                    }
                else:
                    result = await response.json()
                    print(f"‚úÖ Success! Response: {json.dumps(result, indent=2)}")
                    return {
                        "success": True,
                        "status": response.status,
                        "data": result
                    }
                    
    except json.JSONEncodeError as e:
        error_msg = f"JSON serialization failed: {e}"
        print(f"‚ùå {error_msg}")
        return {
            "success": False,
            "error": error_msg
        }
    except Exception as e:
        error_msg = f"Request failed: {e}"
        print(f"‚ùå {error_msg}")
        return {
            "success": False,
            "error": error_msg
        }
</file>

<file path="sdk/whispey/whispey.py">
import time
import uuid
import logging
from datetime import datetime
from typing import Dict, Any
from whispey.event_handlers import setup_session_event_handlers, safe_extract_transcript_data
from whispey.metrics_service import setup_usage_collector, create_session_data
from whispey.send_log import send_to_whispey

logger = logging.getLogger("observe_session")

# Global session storage - store data, not class instances
_session_data_store = {}

def observe_session(session, agent_id,**kwargs):
    session_id = str(uuid.uuid4())
    
    logger.info(f"üîó Setting up Whispey-compatible metrics collection for session {session_id}")
    logger.info(f"üìã Dynamic parameters: {list(kwargs.keys())}")
    
    try:        
        # Setup session data and usage collector using your existing functions
        usage_collector = setup_usage_collector()
        session_data = create_session_data(
            type('MockContext', (), {'room': type('MockRoom', (), {'name': session_id})})(), 
            time.time()
        )
        
        # Update session data with all dynamic parameters
        session_data.update(kwargs)
        
        # Store session info in global storage (data only, not class instances)
        _session_data_store[session_id] = {
            'start_time': time.time(),
            'session_data': session_data,
            'usage_collector': usage_collector,
            'dynamic_params': kwargs,
            'agent_id': agent_id,
            'call_active': True,
            'whispey_data': None
        }
        
        # Setup event handlers with session
        setup_session_event_handlers(session, session_data, usage_collector, None)
        
        # Add custom handlers for Whispey integration
        @session.on("disconnected")
        def on_disconnected(event):
            end_session_manually(session_id, "disconnected")
        
        @session.on("close")
        def on_session_close(event):
            error_msg = str(event.error) if hasattr(event, 'error') and event.error else None
            end_session_manually(session_id, "completed", error_msg)
        
        logger.info(f"‚úÖ Whispey-compatible metrics collection active for session {session_id}")
        return session_id
        
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Failed to set up metrics collection: {e}")
        # Still return session_id so caller can handle gracefully
        return session_id

def generate_whispey_data(session_id: str, status: str = "in_progress", error: str = None) -> Dict[str, Any]:
    """Generate Whispey data for a session"""
    if session_id not in _session_data_store:
        logger.error(f"Session {session_id} not found in data store")
        return {}
    
    session_info = _session_data_store[session_id]
    current_time = time.time()
    start_time = session_info['start_time']
    
    # Extract transcript data using your existing function
    session_data = session_info['session_data']
    if session_data:
        try:
            safe_extract_transcript_data(session_data)
        except Exception as e:
            logger.error(f"Error extracting transcript data: {e}")
    
    # Get usage summary
    usage_summary = {}
    usage_collector = session_info['usage_collector']
    if usage_collector:
        try:
            summary = usage_collector.get_summary()
            usage_summary = {
                "llm_prompt_tokens": getattr(summary, 'llm_prompt_tokens', 0),
                "llm_completion_tokens": getattr(summary, 'llm_completion_tokens', 0),
                "llm_cached_tokens": getattr(summary, 'llm_prompt_cached_tokens', 0),
                "tts_characters": getattr(summary, 'tts_characters_count', 0),
                "stt_audio_duration": getattr(summary, 'stt_audio_duration', 0.0)
            }
        except Exception as e:
            logger.error(f"Error getting usage summary: {e}")
    
    # Calculate duration
    duration = int(current_time - start_time)
    
    # Prepare Whispey format data
    whispey_data = {
        "call_id": f"{session_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
        "agent_id": session_info['agent_id'],
        "customer_number": session_info['dynamic_params'].get('phone_number', 'unknown'),
        "call_ended_reason": status,
        "call_started_at": start_time,
        "call_ended_at": current_time,
        "transcript_type": "agent",
        "recording_url": "",  # Will be filled by caller
        "transcript_json": [],
        "transcript_with_metrics": [],
        "metadata": {
            "usage": usage_summary,
            "duration_formatted": f"{duration // 60}m {duration % 60}s",
            "call_success": status == "completed",
            "error": error,
            **session_info['dynamic_params']  # Include all dynamic parameters
        }
    }
    
    # Add transcript data if available
    if session_data:
        whispey_data["transcript_with_metrics"] = session_data.get("transcript_with_metrics", [])
        
        # Extract transcript_json from session history if available
        if hasattr(session_data, 'history'):
            try:
                whispey_data["transcript_json"] = session_data.history.to_dict().get("items", [])
            except Exception as e:
                logger.debug(f"Could not extract transcript_json from history: {e}")
        
        # Try other possible transcript locations
        if not whispey_data["transcript_json"]:
            for attr in ['transcript_data', 'conversation_history', 'messages']:
                if hasattr(session_data, attr):
                    try:
                        data = getattr(session_data, attr)
                        if isinstance(data, list):
                            whispey_data["transcript_json"] = data
                            break
                        elif hasattr(data, 'to_dict'):
                            whispey_data["transcript_json"] = data.to_dict().get("items", [])
                            break
                    except Exception as e:
                        logger.debug(f"Could not extract transcript from {attr}: {e}")
    
    return whispey_data

def get_session_whispey_data(session_id: str) -> Dict[str, Any]:
    """Get Whispey-formatted data for a session"""
    if session_id not in _session_data_store:
        logger.error(f"Session {session_id} not found")
        return {}
    
    session_info = _session_data_store[session_id]
    
    # Return cached data if session has ended
    if not session_info['call_active'] and session_info['whispey_data']:
        return session_info['whispey_data']
    
    # Generate fresh data
    return generate_whispey_data(session_id)

def end_session_manually(session_id: str, status: str = "completed", error: str = None):
    """Manually end a session"""
    if session_id not in _session_data_store:
        logger.error(f"Session {session_id} not found for manual end")
        return
    
    logger.info(f"üîö Manually ending session {session_id} with status: {status}")
    
    # Mark as inactive
    _session_data_store[session_id]['call_active'] = False
    
    # Generate and cache final whispey data
    final_data = generate_whispey_data(session_id, status, error)
    _session_data_store[session_id]['whispey_data'] = final_data
    
    logger.info(f"üìä Session {session_id} ended - Whispey data prepared")

def cleanup_session(session_id: str):
    """Clean up session data"""
    if session_id in _session_data_store:
        del _session_data_store[session_id]
        logger.info(f"üóëÔ∏è Cleaned up session {session_id}")

async def send_session_to_whispey(session_id: str, recording_url: str = "", additional_transcript: list = None, force_end: bool = True) -> dict:
    """
    Send session data to Whispey API
    
    Args:
        session_id: Session ID to send
        recording_url: URL of the call recording
        additional_transcript: Additional transcript data if needed
        force_end: Whether to force end the session before sending (default: True)
    
    Returns:
        dict: Response from Whispey API
    """
    logger.info(f"üöÄ Starting send_session_to_whispey for {session_id}")
    
    if session_id not in _session_data_store:
        logger.error(f"Session {session_id} not found in data store")
        logger.info(f"Available sessions: {list(_session_data_store.keys())}")
        return {"success": False, "error": "Session not found"}
    
    session_info = _session_data_store[session_id]
    logger.info(f"üìä Session {session_id} found - active: {session_info['call_active']}")
    
    # Force end session if requested and still active
    if force_end and session_info['call_active']:
        logger.info(f"üîö Force ending session {session_id}")
        end_session_manually(session_id, "completed")
    
    # Get whispey data
    whispey_data = get_session_whispey_data(session_id)
    
    logger.info(f"üìä Generated whispey data with keys: {list(whispey_data.keys()) if whispey_data else 'Empty'}")
    
    if not whispey_data:
        logger.error(f"No whispey data generated for session {session_id}")
        return {"success": False, "error": "No data available"}
    
    # Update with additional data
    if recording_url:
        whispey_data["recording_url"] = recording_url
        logger.info(f"üìé Added recording URL: {recording_url}")
    
    if additional_transcript:
        whispey_data["transcript_json"] = additional_transcript
        logger.info(f"üìÑ Added additional transcript with {len(additional_transcript)} items")
    
    # Debug print
    print("=== WHISPEY DATA FOR SENDING ===")
    print(f"Call ID: {whispey_data.get('call_id', 'N/A')}")
    print(f"Agent ID: {whispey_data.get('agent_id', 'N/A')}")
    print(f"Duration: {whispey_data.get('metadata', {}).get('duration_formatted', 'N/A')}")
    print(f"Usage: {whispey_data.get('metadata', {}).get('usage', {})}")
    print("============================")
    
    # Send to Whispey
    try:
        logger.info(f"üì§ Sending to Whispey API...")
        result = await send_to_whispey(whispey_data)
        
        if result.get("success"):
            logger.info(f"‚úÖ Successfully sent session {session_id} to Whispey")
            cleanup_session(session_id)
        else:
            logger.error(f"‚ùå Whispey API returned failure: {result}")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Exception sending to Whispey: {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

# Utility functions
def get_latest_session():
    """Get the most recent session data"""
    if _session_data_store:
        latest_id = max(_session_data_store.keys(), key=lambda x: _session_data_store[x]['start_time'])
        return latest_id, _session_data_store[latest_id]
    return None, None

def get_all_active_sessions():
    """Get all active session IDs"""
    return [sid for sid, data in _session_data_store.items() if data['call_active']]

def cleanup_all_sessions():
    """Clean up all sessions"""
    session_ids = list(_session_data_store.keys())
    for session_id in session_ids:
        end_session_manually(session_id, "cleanup")
        cleanup_session(session_id)
    logger.info(f"üóëÔ∏è Cleaned up {len(session_ids)} sessions")

def debug_session_state(session_id: str = None):
    """Debug helper to check session state"""
    if session_id:
        if session_id in _session_data_store:
            data = _session_data_store[session_id]
            print(f"Session {session_id}:")
            print(f"  - Active: {data['call_active']}")
            print(f"  - Start time: {datetime.fromtimestamp(data['start_time'])}")
            print(f"  - Has session_data: {data['session_data'] is not None}")
            print(f"  - Has usage_collector: {data['usage_collector'] is not None}")
            print(f"  - Dynamic params: {data['dynamic_params']}")
            print(f"  - Has cached whispey_data: {data['whispey_data'] is not None}")
        else:
            print(f"Session {session_id} not found")
    else:
        print(f"Total sessions: {len(_session_data_store)}")
        for sid, data in _session_data_store.items():
            print(f"  {sid}: active={data['call_active']}, agent={data['agent_id']}")
</file>

<file path="sdk/.gitattributes">
# Auto detect text files and perform LF normalization
* text=auto
</file>

<file path="sdk/.gitignore">
venv
.env
__pycache__
pype_observe.egg-info
pyproject.toml
dist
</file>

<file path="sdk/requirements.txt">
livekit-agents
python-dotenv
</file>

<file path="src/app/api/agents/route.ts">
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

// Create Supabase client for server-side operations
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseAnonKey)

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, agent_type, configuration, project_id, environment } = body

    // Validation
    if (!name || !name.trim()) {
      return NextResponse.json(
        { error: 'Agent name is required' },
        { status: 400 }
      )
    }

    if (!agent_type) {
      return NextResponse.json(
        { error: 'Agent type is required' },
        { status: 400 }
      )
    }

    if (!project_id) {
      return NextResponse.json(
        { error: 'Project ID is required' },
        { status: 400 }
      )
    }

    // Verify project exists
    const { data: project, error: projectError } = await supabase
      .from('pype_voice_projects')
      .select('id')
      .eq('id', project_id)
      .single()

    if (projectError || !project) {
      return NextResponse.json(
        { error: 'Invalid project ID' },
        { status: 400 }
      )
    }

    // Create agent data
    const agentData = {
      name: name.trim(),
      agent_type,
      configuration: configuration || {},
      project_id,
      environment: environment || 'dev',
      is_active: true
    }

    // Insert agent into pype_voice_agents
    const { data: agent, error: agentError } = await supabase
      .from('pype_voice_agents')
      .insert([agentData])
      .select('*')
      .single()

    if (agentError) {
      console.error('Error creating agent:', agentError)
      return NextResponse.json(
        { error: 'Failed to create agent' },
        { status: 500 }
      )
    }

    console.log(`Successfully created agent "${agent.name}"`)
    return NextResponse.json(agent, { status: 201 })

  } catch (error) {
    console.error('Unexpected error creating agent:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
</file>

<file path="src/app/api/audio/route.ts">
import { NextRequest, NextResponse } from 'next/server'
import AWS from 'aws-sdk'

const s3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION
})

export async function POST(request: NextRequest) {
  try {
    const { s3Key } = await request.json()
    
    if (!s3Key) {
      return NextResponse.json({ error: 'S3 key required' }, { status: 400 })
    }

    // Generate presigned URL (valid for 1 hour)
    const signedUrl = await s3.getSignedUrlPromise('getObject', {
      Bucket: process.env.AWS_S3_BUCKET,
      Key: s3Key,
      Expires: 3600 // 1 hour
    })

    return NextResponse.json({ url: signedUrl })
  } catch (error) {
    console.error('Error generating presigned URL:', error)
    return NextResponse.json({ error: 'Failed to generate URL' }, { status: 500 })
  }
}
</file>

<file path="src/app/api/audio-proxy/route.ts">
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const { url, method = 'HEAD' } = await request.json()

    if (!url) {
      return NextResponse.json(
        { error: 'URL is required' },
        { status: 400 }
      )
    }

    // Validate URL format
    try {
      new URL(url)
    } catch {
      return NextResponse.json(
        { error: 'Invalid URL format' },
        { status: 400 }
      )
    }

    console.log(`Audio Proxy: ${method} request to ${url}`)

    // Check if this is an S3 URL
    const isS3Url = url.includes('.s3.') || url.includes('.amazonaws.com')
    
    if (isS3Url && method.toUpperCase() === 'HEAD') {
      // For S3 URLs, validate the URL structure instead of making a server request
      // S3 presigned URLs often work from browser but not from server due to CORS
      try {
        const urlObj = new URL(url)
        const hasSignature = urlObj.searchParams.has('X-Amz-Signature')
        const hasCredential = urlObj.searchParams.has('X-Amz-Credential')
        const hasDate = urlObj.searchParams.has('X-Amz-Date')
        
        const isValidS3PresignedUrl = hasSignature && hasCredential && hasDate
        
        if (isValidS3PresignedUrl) {
          console.log('Valid S3 presigned URL detected, allowing client-side access')
          return NextResponse.json({
            accessible: true,
            status: 200,
            statusText: 'OK',
            contentType: 'audio/ogg', // Assume audio content
            contentLength: null,
            url: url,
            isS3PresignedUrl: true // Flag for client to use direct access
          })
        }
      } catch (err) {
        console.log('Failed to validate S3 URL structure:', err)
      }
    }

    // Make the proxied request for non-S3 URLs or GET requests
    const response = await fetch(url, {
      method: method.toUpperCase(),
      headers: {
        'User-Agent': 'Pype-Voice-Analytics/1.0',
        'Accept': 'audio/*,*/*;q=0.9',
      },
      // Add timeout to prevent hanging requests
      signal: AbortSignal.timeout(10000) // 10 second timeout
    })

    // For HEAD requests, we just need to check if the URL is accessible
    if (method.toUpperCase() === 'HEAD') {
      return NextResponse.json({
        accessible: response.ok,
        status: response.status,
        statusText: response.statusText,
        contentType: response.headers.get('content-type'),
        contentLength: response.headers.get('content-length'),
        url: url // Return the original URL if accessible
      })
    }

    // For GET requests, stream the audio content
    if (method.toUpperCase() === 'GET') {
      if (!response.ok) {
        return NextResponse.json(
          { error: `Audio not accessible: ${response.status} ${response.statusText}` },
          { status: response.status }
        )
      }

      // Stream the audio content back to client
      const headers = new Headers()
      
      // Copy relevant headers from the original response
      const contentType = response.headers.get('content-type')
      if (contentType) headers.set('Content-Type', contentType)
      
      const contentLength = response.headers.get('content-length')
      if (contentLength) headers.set('Content-Length', contentLength)
      
      headers.set('Accept-Ranges', 'bytes')
      headers.set('Cache-Control', 'public, max-age=3600') // Cache for 1 hour
      
      return new NextResponse(response.body, {
        status: 200,
        headers
      })
    }

    return NextResponse.json(
      { error: 'Method not supported' },
      { status: 405 }
    )

  } catch (error: any) {
    console.error('Audio Proxy Error:', error)
    
    if (error.name === 'TimeoutError') {
      return NextResponse.json(
        { error: 'Request timeout - audio URL not accessible' },
        { status: 408 }
      )
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// GET endpoint for direct audio streaming with URL parameter
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const audioUrl = searchParams.get('url')

    if (!audioUrl) {
      return NextResponse.json(
        { error: 'URL parameter is required' },
        { status: 400 }
      )
    }

    // Validate URL format
    try {
      new URL(audioUrl)
    } catch {
      return NextResponse.json(
        { error: 'Invalid URL format' },
        { status: 400 }
      )
    }

    // Check if this is an S3 URL - if so, redirect to direct access
    const isS3Url = audioUrl.includes('.s3.') || audioUrl.includes('.amazonaws.com')
    if (isS3Url) {
      // For S3 presigned URLs, redirect client to use the URL directly
      return NextResponse.redirect(audioUrl)
    }

    console.log(`Audio Proxy GET: Streaming audio from ${audioUrl}`)

    const response = await fetch(audioUrl, {
      method: 'GET',
      headers: {
        'User-Agent': 'Pype-Voice-Analytics/1.0',
        'Accept': 'audio/*,*/*;q=0.9',
      },
      signal: AbortSignal.timeout(30000) // 30 second timeout for streaming
    })

    if (!response.ok) {
      return NextResponse.json(
        { error: `Audio not accessible: ${response.status} ${response.statusText}` },
        { status: response.status }
      )
    }

    // Stream the audio content
    const headers = new Headers()
    
    const contentType = response.headers.get('content-type')
    if (contentType) headers.set('Content-Type', contentType)
    
    const contentLength = response.headers.get('content-length')
    if (contentLength) headers.set('Content-Length', contentLength)
    
    headers.set('Accept-Ranges', 'bytes')
    headers.set('Cache-Control', 'public, max-age=3600')
    
    return new NextResponse(response.body, {
      status: 200,
      headers
    })

  } catch (error: any) {
    console.error('Audio Proxy GET Error:', error)
    
    if (error.name === 'TimeoutError') {
      return NextResponse.json(
        { error: 'Request timeout - audio URL not accessible' },
        { status: 408 }
      )
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
</file>

<file path="src/app/api/campaign/route.ts">
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

// Create Supabase client for server-side operations
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseAnonKey)

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    
    // Extract form data
    const projectId = formData.get('project_id') as string
    const startDate = formData.get('start_date') as string
    const endDate = formData.get('end_date') as string
    const startTime = formData.get('start_time') as string
    const endTime = formData.get('end_time') as string
    const concurrency = parseInt(formData.get('concurrency') as string) || 10
    const retryConfig = JSON.parse(formData.get('retry_config') as string || '{}')
    const csvFile = formData.get('csv_file') as File

    // Validation
    if (!projectId) {
      return NextResponse.json({ error: 'Project ID is required' }, { status: 400 })
    }
    
    
    if (!startDate || !endDate) {
      return NextResponse.json({ error: 'Start date and end date are required' }, { status: 400 })
    }
    
    if (!csvFile) {
      return NextResponse.json({ error: 'CSV file is required' }, { status: 400 })
    }

    // Validate retry configuration
    if (retryConfig) {
      const validCodes = ['408', '480', '486', '504', '600']
      for (const [code, minutes] of Object.entries(retryConfig)) {
        if (!validCodes.includes(code)) {
          return NextResponse.json({ error: `Invalid SIP code: ${code}` }, { status: 400 })
        }
        if (typeof minutes !== 'number' || minutes < 1 || minutes > 1440) {
          return NextResponse.json({ error: `Invalid retry minutes for ${code}: must be between 1 and 1440` }, { status: 400 })
        }
      }
    }

    // Verify project exists
    const { data: project, error: projectError } = await supabase
      .from('pype_voice_projects')
      .select('id')
      .eq('id', projectId)
      .single()

    if (projectError || !project) {
      return NextResponse.json({ error: 'Invalid project ID' }, { status: 400 })
    }

    console.log(`Starting campaign creation for project: ${projectId}`)

    // Step 1: Update project with retry configuration
    const { error: projectUpdateError } = await supabase
      .from('pype_voice_projects')
      .update({ retry_configuration: retryConfig })
      .eq('id', projectId)

    if (projectUpdateError) {
      console.error('Error updating project retry config:', projectUpdateError)
      return NextResponse.json({ error: 'Failed to update project configuration' }, { status: 500 })
    }

    console.log('Updated project retry configuration')


    // Step 3: Upload CSV to S3
    const s3FormData = new FormData()
    s3FormData.append('file', csvFile)
    s3FormData.append('project_id', projectId)

    const s3Response = await fetch('https://nbekv3zxpi.execute-api.ap-south-1.amazonaws.com/dev/api/v1/s3/upload', {
      method: 'POST',
      body: s3FormData,
    })

    if (!s3Response.ok) {
      console.error('Error uploading CSV to S3')
      return NextResponse.json({ error: 'Failed to upload CSV file' }, { status: 500 })
    }

    const s3Data = await s3Response.json()
    const s3Key = s3Data.s3Key || s3Data.key || s3Data.filePath
    console.log(`Uploaded CSV to S3: ${s3Key}`)

    // Step 4: Parse CSV data
    const csvText = await csvFile.text()
    const lines = csvText.split('\n').filter(line => line.trim())
    const headers = lines[0].split(',').map(h => h.trim())
    
    const callData = lines.slice(1).map(line => {
      const values = line.split(',').map(v => v.trim())
      const obj: any = {}
      headers.forEach((header, index) => {
        obj[header] = values[index] || ''
      })
      return obj
    })

    console.log(`Parsed ${callData.length} call records from CSV`)


    // Step 5: Create schedule
    const schedulePayload = {
      start_date: startDate,
      end_date: endDate,
      start_time: startTime,
      end_time: endTime,
      concurrency: concurrency,
    }

    console.log(schedulePayload)


    const scheduleResponse = await fetch('https://nbekv3zxpi.execute-api.ap-south-1.amazonaws.com/dev/api/v1/cron/create-schedule', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(schedulePayload),
    })

    console.log(scheduleResponse)
    if (!scheduleResponse.ok) {
      console.error('Error creating schedule')
      return NextResponse.json({ error: 'Failed to create campaign schedule' }, { status: 500 })
    }

    const scheduleData = await scheduleResponse.json()
    console.log(`Created campaign schedule: ${scheduleData.scheduleId || 'success'}`)


    return NextResponse.json({}, { status: 201 })

  } catch (error) {
    console.error('Unexpected error creating campaign:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
</file>

<file path="src/app/api/send-logs/route.ts">
// app/api/call-logs/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import crypto from 'crypto'

// Create Supabase client for server-side operations
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Helper function to verify token
const verifyToken = async (token: string, environment = 'dev') => {
  try {
    const tokenHash = crypto.createHash('sha256').update(token).digest('hex')

    const { data: authToken, error } = await supabase
      .from('pype_voice_projects')
      .select('*')
      .eq('token_hash', tokenHash)
      .single()

    if (error || !authToken) {
      return { valid: false, error: 'Invalid or expired token' }
    }

    return { 
      valid: true, 
      token: authToken,
      project_id: authToken.id
    }
  } catch (error) {
    console.error('Token verification error:', error)
    return { valid: false, error: 'Token verification failed' }
  }
}

export async function POST(request: NextRequest) {
  try {
    // Parse request body
    const body = await request.json()
    const token = request.headers.get('x-pype-token')

    const { 
      call_id, 
      customer_number, 
      agent_id,
      call_ended_reason, 
      transcript_type, 
      transcript_json, 
      metadata, 
      dynamic_variables, 
      call_started_at, 
      call_ended_at, 
      duration_seconds, 
      transcript_with_metrics,
      recording_url,
      voice_recording_url,
      environment = 'dev'
    } = body

    console.log("body", body)

    // Validate required fields
    if (!token) {
      return NextResponse.json(
        { error: 'Token is required' },
        { status: 400 }
      )
    }

    if (!call_id) {
      return NextResponse.json(
        { error: 'call_id is required' },
        { status: 400 }
      )
    }

    // Verify token
    const tokenVerification = await verifyToken(token, environment)
    console.log("tokenVerification", tokenVerification)

    if (!tokenVerification.valid) {
      return NextResponse.json(
        { error: tokenVerification.error },
        { status: 401 }
      )
    }

    const { project_id } = tokenVerification

    // Calculate average latency
    let avgLatency = null

    if (transcript_with_metrics && Array.isArray(transcript_with_metrics)) {
      let latencySum = 0
      let latencyCount = 0
    
      transcript_with_metrics.forEach(turn => {
        const stt = turn?.stt_metrics?.duration || 0
        const llm = turn?.llm_metrics?.ttft || 0
        
        // CORRECTED: Include full TTS duration, not just TTFB
        const ttsFirstByte = turn?.tts_metrics?.ttfb || 0
        const ttsDuration = turn?.tts_metrics?.duration || 0
        const eouDuration = turn?.eou_metrics?.end_of_utterance_delay || 0
        const ttsTotal = ttsFirstByte + ttsDuration
    
        const totalLatency = stt + llm + ttsTotal + eouDuration
    
        // Only include turns with valid metrics
        if (totalLatency > 0) {
          latencySum += totalLatency
          latencyCount += 1
        }
      })
    
      avgLatency = latencyCount > 0 ? latencySum / latencyCount : null
    }

    console.log("calculated avgLatency", avgLatency)

    // Prepare log data for Supabase
    const logData = {
      call_id,
      agent_id,
      customer_number,
      call_ended_reason,
      transcript_type,
      transcript_json,
      avg_latency: avgLatency,
      metadata,
      dynamic_variables,
      environment,
      call_started_at,
      call_ended_at,
      recording_url,
      duration_seconds,
      voice_recording_url,
      created_at: new Date().toISOString()
    }

    // Insert log into Supabase
    const { data: insertedLog, error: insertError } = await supabase
      .from('pype_voice_call_logs')
      .insert(logData)
      .select()
      .single()

    if (insertError) {
      console.error('Database insert error:', insertError)
      return NextResponse.json(
        { error: 'Failed to save call log' },
        { status: 500 }
      )
    }

    // Process metrics and insert into ClickHouse
    if (transcript_with_metrics && Array.isArray(transcript_with_metrics)) {

      // Also insert into Supabase for backup/compatibility
      const conversationTurns = transcript_with_metrics.map(turn => ({
        session_id: insertedLog.id,  
        turn_id: turn.turn_id,
        user_transcript: turn.user_transcript || '',
        agent_response: turn.agent_response || '',
        stt_metrics: turn.stt_metrics || {},
        llm_metrics: turn.llm_metrics || {},
        tts_metrics: turn.tts_metrics || {},
        eou_metrics: turn.eou_metrics || {},
        lesson_day: metadata?.lesson_day || 1,
        phone_number: customer_number,
        call_duration: duration_seconds,
        call_success: call_ended_reason !== 'error',
        lesson_completed: metadata?.lesson_completed || false,
        created_at: new Date().toISOString(),
        unix_timestamp: turn.timestamp
      }))
 
      // Insert all conversation turns to Supabase
      const { error: turnsError } = await supabase
        .from('pype_voice_metrics_logs')
        .insert(conversationTurns)
 
      if (turnsError) {
        console.error('Error inserting conversation turns to Supabase:', turnsError)
      } else {
        console.log(`Inserted ${conversationTurns.length} conversation turns to Supabase`)
      }
    }



    return NextResponse.json({
      message: 'Call log saved successfully',
      log_id: insertedLog.id,
      agent_id: agent_id,
      project_id: project_id
    }, { status: 200 })

  } catch (error) {
    console.error('Send call log error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
</file>

<file path="src/app/api/upload/route.ts">
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    
    // Extract form data
    const projectId = formData.get('project_id') as string
    const csvFile = formData.get('file') as File

    // Validation
    if (!projectId) {
      return NextResponse.json({ error: 'Project ID is required' }, { status: 400 })
    }
    
    if (!csvFile) {
      return NextResponse.json({ error: 'CSV file is required' }, { status: 400 })
    }

    // Validate project ID for enhanced project only
    const ENHANCED_PROJECT_ID = '371c4bbb-76db-4c61-9926-bd75726a1cda'
    if (projectId !== ENHANCED_PROJECT_ID) {
      return NextResponse.json({ error: 'CSV upload not available for this project' }, { status: 403 })
    }

    console.log(`Starting CSV upload for project: ${projectId}`)
    console.log(`File: ${csvFile.name} (${csvFile.size} bytes)`)

    // Upload CSV to S3
    const s3FormData = new FormData()
    s3FormData.append('file', csvFile)
    s3FormData.append('project_id', projectId)

    const s3Response = await fetch('https://nbekv3zxpi.execute-api.ap-south-1.amazonaws.com/dev/api/v1/s3/upload', {
      method: 'POST',
      body: s3FormData,
    })

    if (!s3Response.ok) {
      const errorText = await s3Response.text()
      console.error('S3 upload failed:', errorText)
      return NextResponse.json({ error: 'Failed to upload CSV file to S3' }, { status: 500 })
    }

    const s3Data = await s3Response.json()
    console.log('S3 API Response:', JSON.stringify(s3Data, null, 2))
    
    // Try multiple possible key names from S3 response
    const s3Key = s3Data.s3Key || 
                  s3Data.key || 
                  s3Data.filePath || 
                  s3Data.s3_key ||
                  s3Data.file_path ||
                  s3Data.fileName ||
                  s3Data.objectKey ||
                  s3Data.Key ||
                  'upload_successful_but_key_unavailable'
                  
    console.log(`Extracted S3 Key: ${s3Key}`)
    console.log(`Successfully uploaded CSV to S3: ${s3Key}`)

    return NextResponse.json({
      success: true,
      message: 'CSV uploaded successfully',
      s3Key: s3Key,
      fileName: csvFile.name,
      fileSize: csvFile.size,
      projectId: projectId,
      uploadUrl: s3Data.url || s3Data.fileUrl || null
    }, { status: 200 })

  } catch (error) {
    console.error('Unexpected error uploading CSV:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
</file>

<file path="src/app/api/user/projects/route.ts">
// app/api/user/projects/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { auth, currentUser } from '@clerk/nextjs/server'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

function mapProject(
  project: any,
  role: string,
  permissions: any,
  joined_at: string,
  access_type: string
) {
  return {
    ...project,
    user_role: role,
    user_permissions: permissions,
    joined_at,
    access_type
  }
}

export async function GET(request: NextRequest) {
  try {
    const { userId } = await auth()
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const user = await currentUser()
    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    const userEmail = user.emailAddresses?.[0]?.emailAddress
    if (!userEmail) {
      return NextResponse.json({ error: 'User email not found' }, { status: 404 })
    }

    // Get projects for existing users
    const { data: userProjects, error: userProjectsError } = await supabase
      .from('pype_voice_email_project_mapping')
      .select(`
        id,
        clerk_id,
        project_id,
        role,
        permissions,
        joined_at,
        is_active,
        project:pype_voice_projects!inner (
          id,
          name,
          description,
          environment,
          created_at,
          is_active,
          token_hash,
          owner_clerk_id
        )
      `)
      .eq('clerk_id', userId)
      .eq('is_active', true)
      .eq('project.is_active', true)

    if (userProjectsError) {
      console.error('Error fetching user projects:', userProjectsError)
      return NextResponse.json({ error: 'Failed to fetch projects' }, { status: 500 })
    }

    // Get projects for pending email mappings
    const { data: emailMappings, error: emailMappingError } = await supabase
      .from('pype_voice_email_project_mapping')
      .select(`
        id,
        email,
        project_id,
        role,
        permissions,
        created_at,
        project:pype_voice_projects!inner (
          id,
          name,
          description,
          environment,
          created_at,
          is_active,
          token_hash,
          owner_clerk_id
        )
      `)
      .eq('email', userEmail)
      .eq('project.is_active', true)

    if (emailMappingError) {
      console.error('Error fetching email mappings:', emailMappingError)
      // Don't fail the request on email mapping errors
    }

    // Combine projects without duplicates
    const allProjects: any[] = []
    const projectIds = new Set<string>()

    if (userProjects) {
      userProjects.forEach(up => {
        // @ts-ignore
        if (!projectIds.has(up.project.id)) {
          allProjects.push(
            mapProject(up.project, up.role, up.permissions, up.joined_at, 'member')
          )
          // @ts-ignore

          projectIds.add(up.project.id)
        }
      })
    }

    if (emailMappings) {
      emailMappings.forEach(em => {
        // @ts-ignore

        if (!projectIds.has(em.project.id)) {
          allProjects.push(
            mapProject(em.project, em.role, em.permissions, em.created_at, 'email_mapped')
          )
          // @ts-ignore
          projectIds.add(em.project.id)
        }
      })
    }

    // Sort by newest project created_at first
    allProjects.sort(
      (a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
    )

    return NextResponse.json(allProjects, { status: 200 })
  } catch (error) {
    console.error('Unexpected error fetching user projects:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
</file>

<file path="src/app/api/webhooks/clerk/route.ts">
// app/api/webhooks/clerk/route.ts
import { Webhook } from 'svix'
import { headers } from 'next/headers'
import { createClient } from '@supabase/supabase-js'
import { NextRequest, NextResponse } from 'next/server'

interface ClerkWebhookEvent {
  data: {
    id: string
    email_addresses: Array<{
      email_address: string
      id: string
    }>
    first_name: string | null
    last_name: string | null
    image_url: string | null
    username: string | null
  }
  type: string
}


export async function POST(req: NextRequest): Promise<NextResponse> {
  console.log('üéØ Webhook received')
  
  const WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SIGNING_SECRET

  if (!WEBHOOK_SECRET) {
    console.error('‚ùå Missing CLERK_WEBHOOK_SIGNING_SECRET')
    return new NextResponse('Missing webhook secret', { status: 500 })
  }

  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  
  const supabase = createClient(supabaseUrl, supabaseAnonKey)
  
  // Get the headers
  const headerPayload = await headers()
  const svix_id = headerPayload.get('svix-id')
  const svix_timestamp = headerPayload.get('svix-timestamp')
  const svix_signature = headerPayload.get('svix-signature')

  if (!svix_id || !svix_timestamp || !svix_signature) {
    console.error('‚ùå Missing svix headers')
    return new NextResponse('Error occurred -- no svix headers', {
      status: 400,
    })
  }

  // Get the body
  const payload = await req.json()
  const body = JSON.stringify(payload)

  console.log('üìù Webhook payload type:', payload.type)

  // Create a new Svix instance with your secret
  const wh = new Webhook(WEBHOOK_SECRET)

  let evt: ClerkWebhookEvent

  try {
    evt = wh.verify(body, {
      'svix-id': svix_id,
      'svix-timestamp': svix_timestamp,
      'svix-signature': svix_signature,
    }) as ClerkWebhookEvent
  } catch (err) {
    console.error('‚ùå Error verifying webhook:', err)
    return new NextResponse('Error occurred during verification', {
      status: 400,
    })
  }

  const { id } = evt.data
  const eventType = evt.type

  console.log(`üîÑ Processing ${eventType} for user ${id}`)

  try {
    if (eventType === 'user.created') {
      const { email_addresses, first_name, last_name, image_url } = evt.data

      console.log('‚úÖ Creating new user in database')

      const { data, error } = await supabase.from('pype_voice_users').insert({
        clerk_id: id,
        email: email_addresses[0]?.email_address || '',
        first_name: first_name,
        last_name: last_name,
        profile_image_url: image_url,
      }).select().single()

      if (error) {
        console.error('‚ùå Error creating user in Supabase:', error)
        return new NextResponse('Error creating user', { status: 500 })
      }

      console.log('üéâ User created successfully:', data)
    }

    if (eventType === 'user.updated') {
      const { email_addresses, first_name, last_name, image_url } = evt.data

      console.log('üìù Updating user in database')

      const { data, error } = await supabase
        .from('pype_voice_users')
        .update({
          email: email_addresses[0]?.email_address || '',
          first_name: first_name,
          last_name: last_name,
          profile_image_url: image_url,
          updated_at: new Date().toISOString(),
        })
        .eq('clerk_id', id)
        .select()
        .single()

      if (error) {
        console.error('‚ùå Error updating user in Supabase:', error)
        return new NextResponse('Error updating user', { status: 500 })
      }

      console.log('üìù User updated successfully:', data)
    }

    if (eventType === 'user.deleted') {
      console.log('üóëÔ∏è Deleting user from database')

      const { error } = await supabase
        .from('pype_voice_users')
        .delete()
        .eq('clerk_id', id)

      if (error) {
        console.error('‚ùå Error deleting user from Supabase:', error)
        return new NextResponse('Error deleting user', { status: 500 })
      }

      console.log('üóëÔ∏è User deleted successfully')
    }
  } catch (error) {
    console.error('‚ùå Webhook processing error:', error)
    return new NextResponse('Internal server error', { status: 500 })
  }

  console.log('‚úÖ Webhook processed successfully')
  return new NextResponse('Webhook processed successfully', { status: 200 })
}
</file>

<file path="src/app/docs/page.tsx">
"use client"

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { 
  Copy, 
  Check, 
  ArrowLeft,
  Code,
  Terminal,
  Book,
  Zap
} from 'lucide-react'
import Link from 'next/link'

const ApiDocumentationPage = () => {
  const [copiedSections, setCopiedSections] = useState<Record<string, boolean>>({})

  const handleCopy = async (text: string, sectionId: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopiedSections(prev => ({ ...prev, [sectionId]: true }))
      setTimeout(() => {
        setCopiedSections(prev => ({ ...prev, [sectionId]: false }))
      }, 2000)
    } catch (err) {
      console.error('Failed to copy:', err)
    }
  }

  const CopyButton = ({ text, sectionId }: { text: string, sectionId: string }) => (
    <Button
      size="sm"
      variant="ghost"
      onClick={() => handleCopy(text, sectionId)}
      className="absolute top-2 right-2 h-8 w-8 p-0"
    >
      {copiedSections[sectionId] ? (
        <Check className="h-3 w-3 text-green-600" />
      ) : (
        <Copy className="h-3 w-3" />
      )}
    </Button>
  )

  const curlExample = `curl -X POST "https://mp1grlhon8.execute-api.ap-south-1.amazonaws.com/dev/send-call-log" \\
  -H "Content-Type: application/json" \\
  -H "x-pype-token: pype_your_api_token_here" \\
  -d '{
    "call_id": "1234567890",
    "agent_id": "your-agent-id",
    "customer_number": "+1234567890",
    "call_ended_reason": "completed",
    "transcript_type": "livekit",
    "transcript_json": [
      {
        "speaker": "agent",
        "text": "Hello, how can I help you?",
        "timestamp": 1640995200
      },
      {
        "speaker": "customer", 
        "text": "I need help with my account",
        "timestamp": 1640995205
      }
    ],
    "metadata": {
      "call_quality": "good",
      "duration": 60
    },
    "call_started_at": "2024-01-01T10:00:00Z",
    "call_ended_at": "2024-01-01T10:01:00Z",
    "duration_seconds": 60,
    "environment": "dev"
  }'`

  const jsExample = `import axios from 'axios';

const sendCallLog = async (callData) => {
  try {
    const response = await axios.post('https://mp1grlhon8.execute-api.ap-south-1.amazonaws.com/dev/send-call-log', {
      call_id: "1234567890",
      agent_id: "your-agent-id",
      customer_number: "+1234567890",
      call_ended_reason: "completed",
      transcript_type: "livekit",
      transcript_json: [
        {
          speaker: "agent",
          text: "Hello, how can I help you?",
          timestamp: Date.now() - 60000
        },
        {
          speaker: "customer",
          text: "I need help with my account", 
          timestamp: Date.now() - 55000
        }
      ],
      metadata: {
        call_quality: "good",
        duration: 60
      },
      call_started_at: new Date(Date.now() - 60000).toISOString(),
      call_ended_at: new Date().toISOString(),
      duration_seconds: 60,
      environment: "dev"
    }, {
      headers: {
        'Content-Type': 'application/json',
        'x-pype-token': 'pype_your_api_token_here'
      }
    });
    
    console.log('Call log sent successfully:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error sending call log:', error);
    throw error;
  }
};`

  const pythonExample = `import asyncio
import aiohttp
import json
from datetime import datetime

async def send_call_log(call_data):
    url = "https://mp1grlhon8.execute-api.ap-south-1.amazonaws.com/dev/send-call-log"
    headers = {
        "Content-Type": "application/json",
        "x-pype-token": "pype_your_api_token_here"
    }
    
    payload = {
        "call_id": "1234567890",
        "agent_id": "your-agent-id",
        "customer_number": "+1234567890",
        "call_ended_reason": "completed",
        "transcript_type": "livekit",
        "transcript_json": [
            {
                "speaker": "agent",
                "text": "Hello, how can I help you?",
                "timestamp": datetime.now().timestamp() - 60
            },
            {
                "speaker": "customer",
                "text": "I need help with my account",
                "timestamp": datetime.now().timestamp() - 55
            }
        ],
        "metadata": {
            "call_quality": "good",
            "duration": 60
        },
        "call_started_at": datetime.now().isoformat(),
        "call_ended_at": datetime.now().isoformat(),
        "duration_seconds": 60,
        "environment": "dev"
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as response:
            if response.status == 200:
                result = await response.json()
                print("‚úÖ Call log sent successfully:", result)
                return result
            else:
                error_text = await response.text()
                print(f"‚ùå Error {response.status}: {error_text}")
                raise Exception(f"API request failed: {error_text}")

# Usage
asyncio.run(send_call_log({})))`

  const basicTranscriptExample = `{
  "call_id": "1234567890",
  "agent_id": "your-agent-id",
  "customer_number": "+1234567890",
  "call_ended_reason": "completed",
  "transcript_type": "livekit",
  "transcript_json": [
    {
      "speaker": "assistant",
      "text": "Hello, how can I help you?",
      "timestamp": 1640995200
    },
    {
      "speaker": "user", 
      "text": "I need help with my account",
      "timestamp": 1640995205
    },
    {
      "speaker": "assistant",
      "text": "I'd be happy to help you with your account. What specific issue are you having?",
      "timestamp": 1640995210
    }
  ],
  "metadata": {
    "call_quality": "good",
    "duration": 60
  },
  "call_started_at": "2024-01-01T10:00:00Z",
  "call_ended_at": "2024-01-01T10:01:00Z",
  "duration_seconds": 60,
  "environment": "dev"
}`

  const metricsExample = `{
  "call_id": "call_123",
  "agent_id": "agent_456",
  "transcript_with_metrics": [
    {
      "turn_id": 1,
      "user_transcript": "Hello, I need help",
      "agent_response": "Hi! I'm here to help you.",
      "timestamp": 1640995200,
      "stt_metrics": {
        "duration": 250,
        "confidence": 0.95
      },
      "llm_metrics": {
        "ttft": 150,
        "total_time": 300,
        "tokens": 12
      },
      "tts_metrics": {
        "ttfb": 100,
        "duration": 800
      },
      "eou_metrics": {
        "end_of_utterance_delay": 50
      }
    },
    {
      "turn_id": 2,
      "user_transcript": "My account is locked",
      "agent_response": "I can help you unlock your account. Let me check that for you.",
      "timestamp": 1640995220,
      "stt_metrics": {
        "duration": 180,
        "confidence": 0.92
      },
      "llm_metrics": {
        "ttft": 120,
        "total_time": 280,
        "tokens": 15
      },
      "tts_metrics": {
        "ttfb": 90,
        "duration": 750
      },
      "eou_metrics": {
        "end_of_utterance_delay": 45
      }
    }
  ],
  "call_ended_reason": "completed",
  "environment": "dev"
}`

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="max-w-6xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Link href="/">
                <Button variant="ghost" size="sm">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Back to Dashboard
                </Button>
              </Link>
              <div>
                <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
                  <Book className="h-6 w-6 text-blue-600" />
                  Whispey API Documentation
                </h1>
                <p className="text-gray-600 text-sm mt-1">
                  Send call logs and observability data to your Whispey dashboard
                </p>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Content */}
      <main className="max-w-6xl mx-auto px-6 py-8">
        <div className="space-y-8">
          {/* Quick Start */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Zap className="h-5 w-5 text-green-600" />
                Quick Start
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid md:grid-cols-3 gap-4">
                <div className="p-4 bg-blue-50 rounded-lg">
                  <h3 className="font-semibold text-blue-900">1. Get Your Token</h3>
                  <p className="text-blue-700 text-sm">Create an agent to get your API token</p>
                </div>
                <div className="p-4 bg-green-50 rounded-lg">
                  <h3 className="font-semibold text-green-900">2. Send Call Logs</h3>
                  <p className="text-green-700 text-sm">POST to the observability endpoint</p>
                </div>
                <div className="p-4 bg-purple-50 rounded-lg">
                  <h3 className="font-semibold text-purple-900">3. View Analytics</h3>
                  <p className="text-purple-700 text-sm">Monitor your agents in real-time</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* API Endpoint */}
          <Card>
            <CardHeader>
              <CardTitle>API Endpoint</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-gray-600">
                All requests should be sent to the following endpoint:
              </p>
              <div className="relative">
                <pre className="bg-blue-900 text-blue-100 p-4 rounded-lg overflow-x-auto text-sm font-mono">
                  <code>https://mp1grlhon8.execute-api.ap-south-1.amazonaws.com/dev/send-call-log</code>
                </pre>
                <CopyButton text="https://mp1grlhon8.execute-api.ap-south-1.amazonaws.com/dev/send-call-log" sectionId="api-endpoint" />
              </div>
              <div className="flex items-start gap-3 p-3 bg-blue-50 rounded-lg">
                <div className="w-2 h-2 rounded-full bg-blue-500 mt-2 flex-shrink-0"></div>
                <div>
                  <p className="text-blue-800 text-sm font-medium">Method: POST</p>
                  <p className="text-blue-700 text-sm">Send call logs and observability data to this endpoint.</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Authentication */}
          <Card>
            <CardHeader>
              <CardTitle>Authentication</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-gray-600">
                All API requests require authentication using your agent's API token in the header:
              </p>
              <div className="relative">
                <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
                  <code>x-pype-token: pype_your_api_token_here</code>
                </pre>
                <CopyButton text="x-pype-token: pype_your_api_token_here" sectionId="auth-header" />
              </div>
              <div className="flex items-start gap-3 p-3 bg-yellow-50 rounded-lg">
                <div className="w-2 h-2 rounded-full bg-yellow-500 mt-2 flex-shrink-0"></div>
                <div>
                  <p className="text-yellow-800 text-sm font-medium">Security Note</p>
                  <p className="text-yellow-700 text-sm">Keep your API tokens secure. Never expose them in client-side code.</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Curl Example */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Terminal className="h-5 w-5" />
                cURL Example
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="relative">
                <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-xs leading-relaxed">
                  <code>{curlExample}</code>
                </pre>
                <CopyButton text={curlExample} sectionId="curl-example" />
              </div>
            </CardContent>
          </Card>

          {/* JavaScript Example */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Code className="h-5 w-5" />
                JavaScript/Node.js
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="relative">
                <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-xs leading-relaxed">
                  <code>{jsExample}</code>
                </pre>
                <CopyButton text={jsExample} sectionId="js-example" />
              </div>
            </CardContent>
          </Card>

          {/* Python Example */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Code className="h-5 w-5" />
                Python
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="relative">
                <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-xs leading-relaxed">
                  <code>{pythonExample}</code>
                </pre>
                <CopyButton text={pythonExample} sectionId="python-example" />
              </div>
            </CardContent>
          </Card>

          {/* Request Schema */}
          <Card>
            <CardHeader>
              <CardTitle>Request Schema</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid gap-4">
                <h3 className="font-semibold text-lg">Required Fields</h3>
                <div className="space-y-3">
                  {[
                    { field: 'call_id', type: 'string', desc: 'Unique identifier for the call' },
                    { field: 'agent_id', type: 'string', desc: 'Your agent UUID from the dashboard' }
                  ].map((item) => (
                    <div key={item.field} className="flex items-center gap-4 p-3 bg-red-50 rounded-lg">
                      <code className="font-mono text-sm bg-red-100 px-2 py-1 rounded">{item.field}</code>
                      <Badge variant="outline">{item.type}</Badge>
                      <span className="text-gray-600 text-sm">{item.desc}</span>
                    </div>
                  ))}
                </div>

                <h3 className="font-semibold text-lg mt-6">Optional Fields</h3>
                <div className="space-y-3">
                  {[
                    { field: 'customer_number', type: 'string', desc: 'Phone number or customer identifier' },
                    { field: 'call_ended_reason', type: 'string', desc: 'completed, error, timeout, etc.' },
                    { field: 'transcript_json', type: 'array', desc: 'Array of conversation turns' },
                    { field: 'metadata', type: 'object', desc: 'Custom metadata about the call' },
                    { field: 'call_started_at', type: 'string', desc: 'ISO timestamp when call started' },
                    { field: 'call_ended_at', type: 'string', desc: 'ISO timestamp when call ended' },
                    { field: 'duration_seconds', type: 'number', desc: 'Total call duration in seconds' },
                    { field: 'recording_url', type: 'string', desc: 'URL to the call recording' },
                    { field: 'environment', type: 'string', desc: 'dev, staging, or production (default: dev)' }
                  ].map((item) => (
                    <div key={item.field} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                      <code className="font-mono text-sm bg-gray-100 px-2 py-1 rounded">{item.field}</code>
                      <Badge variant="secondary">{item.type}</Badge>
                      <span className="text-gray-600 text-sm">{item.desc}</span>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Transcription Methods */}
          <Card>
            <CardHeader>
              <CardTitle>Transcription Data - Two Options</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <p className="text-gray-600">
                You can send transcription data in two ways depending on your needs:
              </p>
              
              {/* Option 1: Basic Transcript */}
              <div>
                <h3 className="font-semibold text-lg mb-3 flex items-center gap-2">
                  <Badge variant="secondary">Option 1</Badge>
                  Basic Transcript (transcript_json)
                </h3>
                <p className="text-gray-600 text-sm mb-3">
                  Simple conversation format with speaker, text, and timestamp. Perfect for basic analytics and conversation tracking.
                </p>
                <div className="relative">
                  <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-xs leading-relaxed">
                    <code>{basicTranscriptExample}</code>
                  </pre>
                  <CopyButton text={basicTranscriptExample} sectionId="basic-transcript-example" />
                </div>
              </div>

              {/* Option 2: Advanced with Metrics */}
              <div>
                <h3 className="font-semibold text-lg mb-3 flex items-center gap-2">
                  <Badge variant="default">Option 2</Badge>
                  Advanced with Metrics (transcript_with_metrics)
                </h3>
                <p className="text-gray-600 text-sm mb-3">
                  Detailed format with performance metrics for each conversation turn. Includes STT, LLM, TTS, and End-of-Utterance latencies for comprehensive analytics.
                </p>
                <div className="relative">
                  <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-xs leading-relaxed">
                    <code>{metricsExample}</code>
                  </pre>
                  <CopyButton text={metricsExample} sectionId="metrics-example" />
                </div>
              </div>

              <div className="p-4 bg-blue-50 rounded-lg">
                <h4 className="font-medium text-blue-900 mb-2">Choose Your Method:</h4>
                <ul className="text-blue-800 text-sm space-y-1">
                  <li>‚Ä¢ <strong>transcript_json</strong> - Use for simple conversation logging</li>
                  <li>‚Ä¢ <strong>transcript_with_metrics</strong> - Use for detailed performance analytics</li>
                  <li>‚Ä¢ You can send both in the same request if needed</li>
                </ul>
              </div>
            </CardContent>
          </Card>

          {/* Response */}
          <Card>
            <CardHeader>
              <CardTitle>Response</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <h3 className="font-semibold">Success Response (200)</h3>
              <div className="relative">
                <pre className="bg-green-900 text-green-100 p-4 rounded-lg overflow-x-auto text-sm">
                  <code>{`{
  "message": "Call log saved successfully",
  "log_id": "uuid-generated-id",
  "agent_id": "your-agent-id",
  "project_id": "your-project-id"
}`}</code>
                </pre>
              </div>

              <h3 className="font-semibold mt-6">Error Response (400/401/500)</h3>
              <div className="relative">
                <pre className="bg-red-900 text-red-100 p-4 rounded-lg overflow-x-auto text-sm">
                  <code>{`{
  "error": "Token is required"
}`}</code>
                </pre>
              </div>
            </CardContent>
          </Card>

          {/* Rate Limits */}
          <Card>
            <CardHeader>
              <CardTitle>Rate Limits</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid md:grid-cols-2 gap-4">
                <div className="p-4 bg-blue-50 rounded-lg">
                  <h3 className="font-semibold text-blue-900">Per Minute</h3>
                  <p className="text-2xl font-bold text-blue-600">60 requests</p>
                </div>
                <div className="p-4 bg-purple-50 rounded-lg">
                  <h3 className="font-semibold text-purple-900">Per Hour</h3>
                  <p className="text-2xl font-bold text-purple-600">1,000 requests</p>
                </div>
              </div>
              <p className="text-gray-600 text-sm">
                Rate limits are per API token. Contact support if you need higher limits.
              </p>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  )
}

export default ApiDocumentationPage
</file>

<file path="src/app/sign-in/page.tsx">
import AuthPage from "@/components/AuthPage";

export default function SignInPage() {
    return <AuthPage/>
}
</file>

<file path="src/app/types/user.ts">
export interface PyveVoiceUser {
    id?: number
    clerk_id: string
    email: string
    first_name: string | null
    last_name: string | null
    profile_image_url: string | null
    created_at?: string
    updated_at?: string
    // Add any other existing columns you have
  }
  
  export interface UserProfileUpdate {
    email?: string
    first_name?: string | null
    last_name?: string | null
    profile_image_url?: string | null
  }
  
  export interface DatabaseResponse<T> {
    data: T | null
    error: string | null
  }
</file>

<file path="src/components/agents/AgentCreationDialog.tsx">
"use client"

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Loader2, CheckCircle, Bot, Phone, PhoneCall, Settings, ArrowRight, Copy, ExternalLink } from 'lucide-react'

interface AgentCreationDialogProps {
  isOpen: boolean
  onClose: () => void
  onAgentCreated: (agentData: any) => void
  projectId: string
}

const AGENT_TYPES = [
  { 
    value: 'inbound', 
    label: 'Inbound',
    description: 'Handle incoming calls',
    icon: Phone,
  },
  { 
    value: 'outbound', 
    label: 'Outbound',
    description: 'Make automated calls',
    icon: PhoneCall,
  },
  { 
    value: 'custom', 
    label: 'Custom',
    description: 'Specialized agent',
    icon: Settings,
  }
]

const AgentCreationDialog: React.FC<AgentCreationDialogProps> = ({ 
  isOpen, 
  onClose, 
  onAgentCreated,
  projectId
}) => {
  const [currentStep, setCurrentStep] = useState<'form' | 'success'>('form')
  const [formData, setFormData] = useState({
    name: '',
    agent_type: 'inbound',
    description: ''
  })
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [createdAgentData, setCreatedAgentData] = useState<any>(null)
  const [copiedId, setCopiedId] = useState(false)

  const selectedAgentType = AGENT_TYPES.find(type => type.value === formData.agent_type)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!formData.name.trim()) {
      setError('Agent name is required')
      return
    }

    setLoading(true)
    setError(null)

    try {
      const response = await fetch('/api/agents', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: formData.name.trim(),
          agent_type: formData.agent_type,
          configuration: {
            description: formData.description.trim() || null,
          },
          project_id: projectId,
          environment: 'dev'
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to create agent')
      }

      const data = await response.json()
      setCreatedAgentData(data)
      setCurrentStep('success')
    } catch (err: unknown) {
      console.error('Error creating agent:', err)
      const errorMessage = err instanceof Error ? err.message : 'Failed to create agent'
      setError(errorMessage)
    } finally {
      setLoading(false)
    }
  }

  const handleClose = () => {
    if (!loading) {
      setCurrentStep('form')
      setFormData({
        name: '',
        agent_type: 'inbound',
        description: ''
      })
      setError(null)
      setCreatedAgentData(null)
      setCopiedId(false)
      onClose()
    }
  }

  const handleFinish = () => {
    onAgentCreated(createdAgentData)
    handleClose()
  }

  const handleCopyId = async () => {
    if (createdAgentData?.id) {
      try {
        await navigator.clipboard.writeText(createdAgentData.id)
        setCopiedId(true)
        setTimeout(() => setCopiedId(false), 2000)
      } catch (err) {
        console.error('Failed to copy agent ID:', err)
      }
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[480px] p-0 gap-0 rounded-lg border border-gray-200 shadow-xl bg-white">
        {currentStep === 'form' ? (
          <>
            {/* Compact Header */}
            <DialogHeader className="px-6 pt-6 pb-4 border-b border-gray-100">
              <div className="flex items-center gap-3">
                <div>
                  <DialogTitle className="text-lg font-semibold text-gray-900">
                    Create Agent
                  </DialogTitle>
                  <p className="text-xs text-gray-600 mt-0.5">
                    Set up your AI agent
                  </p>
                </div>
              </div>
            </DialogHeader>

            {/* Compact Form */}
            <div className="px-6 py-5">
              <form onSubmit={handleSubmit} className="space-y-5">
                {/* Agent Name */}
                <div className="space-y-1.5">
                  <label htmlFor="agent-name" className="block text-sm font-medium text-gray-900">
                    Agent Name
                  </label>
                  <Input
                    id="agent-name"
                    placeholder="Customer Support Bot"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    disabled={loading}
                    className="h-10 px-3 text-sm border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none transition-all"
                  />
                </div>

                {/* Compact Agent Type Selection */}
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-900">
                    Type
                  </label>
                  <div className="grid grid-cols-3 gap-2">
                    {AGENT_TYPES.map((type) => {
                      const Icon = type.icon
                      const isSelected = formData.agent_type === type.value
                      
                      return (
                        <div
                          key={type.value}
                          className={`relative p-3 rounded-lg border cursor-pointer transition-all duration-200 ${
                            isSelected 
                              ? 'border-blue-500 bg-blue-50 shadow-sm' 
                              : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                          }`}
                          onClick={() => setFormData({ ...formData, agent_type: type.value })}
                        >
                          <div className="text-center">
                            <div className={`w-8 h-8 mx-auto mb-2 rounded-lg flex items-center justify-center ${
                              isSelected ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-600'
                            }`}>
                              <Icon className="w-4 h-4" />
                            </div>
                            <div className="text-xs font-medium text-gray-900 mb-0.5">{type.label}</div>
                            <div className="text-xs text-gray-500 leading-tight">{type.description}</div>
                          </div>
                          <input
                            type="radio"
                            name="agent_type"
                            value={type.value}
                            checked={isSelected}
                            onChange={() => setFormData({ ...formData, agent_type: type.value })}
                            className="absolute inset-0 opacity-0 cursor-pointer"
                            disabled={loading}
                          />
                        </div>
                      )
                    })}
                  </div>
                </div>

                {/* Compact Description */}
                <div className="space-y-1.5">
                  <label htmlFor="agent-description" className="block text-sm font-medium text-gray-900">
                    Description <span className="text-gray-500 font-normal">(optional)</span>
                  </label>
                  <textarea
                    id="agent-description"
                    placeholder="Brief description of your agent..."
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    disabled={loading}
                    rows={2}
                    className="w-full px-3 py-2 text-sm border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none resize-none transition-all placeholder:text-gray-500"
                  />
                </div>

                {/* Error Message */}
                {error && (
                  <div className="p-3 rounded-lg bg-red-50 border border-red-200">
                    <span className="text-sm text-red-700">{error}</span>
                  </div>
                )}

                {/* Compact Actions */}
                <div className="flex gap-3 pt-3">
                  <Button 
                    type="button" 
                    variant="outline"
                    onClick={handleClose}
                    disabled={loading}
                    className="flex-1 h-10 text-gray-700 border-gray-300 hover:bg-gray-50"
                  >
                    Cancel
                  </Button>
                  <Button 
                    type="submit"
                    disabled={loading || !formData.name.trim()}
                    className="flex-1 h-10 bg-blue-600 hover:bg-blue-700 text-white font-medium"
                  >
                    {loading ? (
                      <>
                        <Loader2 className="w-4 h-4 animate-spin mr-2" />
                        Creating...
                      </>
                    ) : (
                      'Create Agent'
                    )}
                  </Button>
                </div>
              </form>
            </div>
          </>
        ) : (
          <>
            {/* Compact Success Header */}
            <DialogHeader className="px-6 pt-6 pb-4 text-center border-b border-gray-100">
              <div className="w-12 h-12 mx-auto mb-3 bg-green-100 rounded-full flex items-center justify-center">
                <CheckCircle className="w-6 h-6 text-green-600" />
              </div>
              <DialogTitle className="text-lg font-semibold text-gray-900 mb-1">
                Agent Created
              </DialogTitle>
              <p className="text-sm text-gray-600">
                "{createdAgentData?.name}" is ready to use
              </p>
            </DialogHeader>

            {/* Compact Success Content */}
            <div className="px-6 py-5 space-y-4">
              {/* Agent Summary */}
              <div className="p-4 bg-gray-50 rounded-lg border border-gray-200">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-10 h-10 bg-blue-50 rounded-lg flex items-center justify-center">
                    {selectedAgentType && <selectedAgentType.icon className="w-5 h-5 text-blue-600" />}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h3 className="font-medium text-gray-900 truncate">
                      {createdAgentData?.name}
                    </h3>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge variant="outline" className="text-xs bg-blue-50 text-blue-700 border-blue-200">
                        {selectedAgentType?.label}
                      </Badge>
                      <Badge variant="outline" className="text-xs bg-gray-50 text-gray-600 border-gray-200">
                        Development
                      </Badge>
                    </div>
                  </div>
                </div>

                {/* Agent ID */}
                <div className="flex items-center justify-between pt-3 border-t border-gray-200">
                  <span className="text-sm text-gray-600">Agent ID</span>
                  <div className="flex items-center gap-2">
                    <code className="text-xs font-mono bg-gray-100 px-2 py-1 rounded text-gray-800">
                      {createdAgentData?.id?.slice(0, 8)}...
                    </code>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={handleCopyId}
                      className="h-6 w-6 p-0 text-gray-500 hover:text-gray-700"
                    >
                      <Copy className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
                {copiedId && (
                  <p className="text-xs text-green-600 text-right mt-1">
                    Copied to clipboard
                  </p>
                )}
              </div>

              {/* Next Steps - Compact */}
              <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <h4 className="font-medium text-blue-900 text-sm mb-2">Next Steps</h4>
                <ul className="text-xs text-blue-800 space-y-1">
                  <li>‚Ä¢ Configure voice and personality</li>
                  <li>‚Ä¢ Set up conversation flows</li>
                  <li>‚Ä¢ Test with sample interactions</li>
                </ul>
              </div>

              {/* Compact Actions */}
              <div className="flex gap-3 pt-2">
                <Button 
                  variant="outline"
                  onClick={handleClose}
                  className="flex-1 h-10 text-gray-700 border-gray-300 hover:bg-gray-50"
                >
                  Create Another
                </Button>
                <Button 
                  onClick={handleFinish}
                  className="flex-1 h-10 bg-blue-600 hover:bg-blue-700 text-white font-medium"
                >
                  Configure
                  <ArrowRight className="w-4 h-4 ml-1" />
                </Button>
              </div>
            </div>
          </>
        )}
      </DialogContent>
    </Dialog>
  )
}

export default AgentCreationDialog
</file>

<file path="src/components/agents/AgentSelection.tsx">
'use client'

import React, { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog'
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu'
import { 
  ChevronLeft, 
  Bot, 
  Search, 
  Plus, 
  Loader2, 
  AlertCircle, 
  MoreHorizontal, 
  Trash2, 
  Copy, 
  Settings, 
  Clock, 
  Filter, 
  SortDesc, 
  Grid3X3, 
  List,
  CheckCircle2,
  Pause,
  BarChart3,
  Terminal,
  Code2,
  Eye,
  Globe,
  MonitorSpeaker,
  ExternalLink
} from 'lucide-react'
import { useSupabaseQuery } from '../../hooks/useSupabase'
import AgentCreationDialog from './AgentCreationDialog'
import Header from '../shared/Header'

interface Agent {
  id: string
  name: string
  agent_type: string
  configuration: any
  environment: string
  created_at: string
  is_active: boolean
  project_id: string
}

interface AgentSelectionProps {
  projectId: string
}

const AgentSelection: React.FC<AgentSelectionProps> = ({ projectId }) => {
  const [selectedAgent, setSelectedAgent] = useState<string | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [showCreateDialog, setShowCreateDialog] = useState(false)
  const [deletingAgent, setDeletingAgent] = useState<string | null>(null)
  const [showDeleteConfirm, setShowDeleteConfirm] = useState<Agent | null>(null)
  const [copiedAgentId, setCopiedAgentId] = useState<string | null>(null)
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('list')
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const router = useRouter()

  // Fetch project data
  const { data: projects, loading: projectLoading, error: projectError } = useSupabaseQuery('pype_voice_projects', {
    select: 'id, name, description, environment, created_at, is_active',
    filters: [{ column: 'id', operator: 'eq', value: projectId }]
  })

  const project = projects?.[0]

  // Fetch agents data
  const { data: agents, loading: agentsLoading, error: agentsError, refetch } = useSupabaseQuery('pype_voice_agents', {
    select: 'id, name, agent_type, configuration, environment, created_at, is_active, project_id',
    filters: [
      { column: 'project_id', operator: 'eq', value: projectId }
    ],
    orderBy: { column: 'created_at', ascending: false }
  })

  const handleAgentClick = (agent: Agent) => {
    setSelectedAgent(agent.id)
    setTimeout(() => {
      router.push(`/agents/${agent.id}`)
    }, 150)
  }

  const handleBack = () => {
    router.push('/')
  }

  const handleCreateAgent = () => {
    setShowCreateDialog(true)
  }

  const handleAgentCreated = (agentData: any) => {
    refetch()
  }

  const handleDeleteAgent = async (agent: Agent) => {
    setDeletingAgent(agent.id)
    try {
      const response = await fetch(`/api/agents/${agent.id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to delete agent')
      }

      refetch()
      setShowDeleteConfirm(null)
    } catch (error: unknown) {
      console.error('Error deleting agent:', error)
      const errorMessage = error instanceof Error ? error.message : 'Failed to delete agent'
      alert(`Failed to delete agent: ${errorMessage}`)
    } finally {
      setDeletingAgent(null)
    }
  }

  const handleCopyAgentId = async (agentId: string, e: React.MouseEvent) => {
    e.stopPropagation()
    try {
      await navigator.clipboard.writeText(agentId)
      setCopiedAgentId(agentId)
      setTimeout(() => setCopiedAgentId(null), 2000)
    } catch (err) {
      console.error('Failed to copy agent ID:', err)
    }
  }

  const getAgentTypeIcon = (type: string) => {
    switch (type.toLowerCase()) {
      case 'inbound':
        return <MonitorSpeaker className="w-3.5 h-3.5" />
      case 'outbound':
        return <Globe className="w-3.5 h-3.5" />
      case 'custom':
        return <Code2 className="w-3.5 h-3.5" />
      default:
        return <Bot className="w-3.5 h-3.5" />
    }
  }

  const getAgentTypeColor = (type: string) => {
    switch (type.toLowerCase()) {
      case 'inbound':
        return 'bg-blue-50 text-blue-700 border-blue-200'
      case 'outbound':
        return 'bg-emerald-50 text-emerald-700 border-emerald-200'
      case 'custom':
        return 'bg-purple-50 text-purple-700 border-purple-200'
      default:
        return 'bg-gray-50 text-gray-700 border-gray-200'
    }
  }

  const getEnvironmentColor = (environment: string) => {
    switch (environment.toLowerCase()) {
      case 'production':
      case 'prod':
        return 'bg-red-50 text-red-700 border-red-200'
      case 'staging':
      case 'stage':
        return 'bg-yellow-50 text-yellow-700 border-yellow-200'
      case 'development':
      case 'dev':
        return 'bg-blue-50 text-blue-700 border-blue-200'
      default:
        return 'bg-gray-50 text-gray-700 border-gray-200'
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric', 
      year: 'numeric' 
    })
  }

  // Filter agents based on search and status
  const filteredAgents = (agents || []).filter(agent => {
    const matchesSearch = agent.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      agent.agent_type.toLowerCase().includes(searchQuery.toLowerCase()) ||
      agent.id.toLowerCase().includes(searchQuery.toLowerCase())
    
    const matchesStatus = statusFilter === 'all' || 
      (statusFilter === 'active' && agent.is_active) ||
      (statusFilter === 'inactive' && !agent.is_active)
    
    return matchesSearch && matchesStatus
  })

  const loading = projectLoading || agentsLoading
  const error = projectError || agentsError

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="flex items-center justify-center py-32">
          <div className="text-center space-y-3">
            <div className="w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto"></div>
            <p className="text-sm text-gray-600">Loading agents</p>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="flex items-center justify-center py-32">
          <div className="text-center space-y-4 max-w-sm">
            <AlertCircle className="w-8 h-8 text-red-500 mx-auto" />
            <div>
              <h3 className="font-medium text-gray-900 mb-1">Failed to load agents</h3>
              <p className="text-sm text-gray-500">{error}</p>
            </div>
            <Button 
              onClick={() => window.location.reload()} 
              size="sm"
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              Try again
            </Button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <main className="max-w-7xl mx-auto px-6 py-4">
        {/* Compact Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={handleBack}
              className="text-gray-500 hover:text-gray-700 w-7 h-7 p-0"
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            
            <div>
              {project?.name && (
                <div className="text-sm text-gray-500 font-mono mb-0.5">
                  {project.name}/
                </div>
              )}
              <div className="text-sm text-gray-600">
                {filteredAgents.length} {filteredAgents.length === 1 ? 'agent' : 'agents'}
              </div>
            </div>
          </div>
          
          <Button 
            onClick={handleCreateAgent}
            className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 text-sm h-8"
          >
            <Plus className="w-4 h-4 mr-1.5" />
            Add Agent
          </Button>
        </div>

        {/* Compact Controls */}
        <div className="flex items-center justify-between mb-4 pb-3 border-b border-gray-200">
          <div className="flex items-center gap-3">
            <div className="relative">
              <Search className="absolute left-2.5 top-1/2 h-3.5 w-3.5 -translate-y-1/2 text-gray-400" />
              <input
                type="search"
                placeholder="Search agents..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-72 pl-8 pr-3 py-1.5 text-sm border border-gray-300 rounded-md bg-white placeholder:text-gray-500 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none"
              />
            </div>
            
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="h-8 text-xs text-gray-600 border-gray-300">
                  <Filter className="w-3.5 h-3.5 mr-1.5" />
                  {statusFilter === 'all' ? 'All' : statusFilter === 'active' ? 'Active' : 'Inactive'}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start" className="w-36">
                <DropdownMenuItem onClick={() => setStatusFilter('all')} className="text-sm">All</DropdownMenuItem>
                <DropdownMenuItem onClick={() => setStatusFilter('active')} className="text-sm">
                  <CheckCircle2 className="w-3.5 h-3.5 mr-2 text-emerald-500" />
                  Active
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setStatusFilter('inactive')} className="text-sm">
                  <Pause className="w-3.5 h-3.5 mr-2 text-gray-400" />
                  Inactive
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="h-8 text-xs text-gray-600 border-gray-300">
                  <SortDesc className="w-3.5 h-3.5 mr-1.5" />
                  Sort
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start" className="w-36">
                <DropdownMenuItem className="text-sm">Name</DropdownMenuItem>
                <DropdownMenuItem className="text-sm">Type</DropdownMenuItem>
                <DropdownMenuItem className="text-sm">Environment</DropdownMenuItem>
                <DropdownMenuItem className="text-sm">Created</DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
          
          <div className="flex items-center border border-gray-300 rounded-md p-0.5 bg-gray-50">
            <Button
              variant={viewMode === 'grid' ? 'default' : 'ghost'}
              size="sm"
              onClick={() => setViewMode('grid')}
              className={`h-6 w-6 p-0 text-xs ${viewMode === 'grid' ? 'bg-white shadow-sm' : 'hover:bg-gray-100'}`}
            >
              <Grid3X3 className="w-3.5 h-3.5" />
            </Button>
            <Button
              variant={viewMode === 'list' ? 'default' : 'ghost'}
              size="sm"
              onClick={() => setViewMode('list')}
              className={`h-6 w-6 p-0 text-xs ${viewMode === 'list' ? 'bg-white shadow-sm' : 'hover:bg-gray-100'}`}
            >
              <List className="w-3.5 h-3.5" />
            </Button>
          </div>
        </div>

        {/* Compact Agent List */}
        {viewMode === 'list' ? (
          <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
            {/* Compact Table Header */}
            <div className="grid grid-cols-12 gap-3 px-4 py-2.5 bg-gray-50 border-b border-gray-200 text-xs font-medium text-gray-600">
              <div className="col-span-4">Agent</div>
              <div className="col-span-2">Type</div>
              <div className="col-span-2">Environment</div>
              <div className="col-span-2">Status</div>
              <div className="col-span-2">Actions</div>
            </div>
            
            {/* Compact Table Body */}
            <div className="divide-y divide-gray-100">
              {filteredAgents.map((agent) => (
                <div
                  key={agent.id}
                  className={`grid grid-cols-12 gap-3 px-4 py-2.5 hover:bg-gray-50 cursor-pointer transition-colors text-sm ${
                    selectedAgent === agent.id ? 'bg-blue-50' : ''
                  }`}
                  onClick={() => handleAgentClick(agent)}
                >
                  {/* Agent Info */}
                  <div className="col-span-4">
                    <div className="flex items-center gap-2.5">
                      <div className="w-6 h-6 bg-gray-100 rounded-md flex items-center justify-center flex-shrink-0">
                        {getAgentTypeIcon(agent.agent_type)}
                      </div>
                      <div className="min-w-0">
                        <div className="font-medium text-gray-900 truncate text-sm">{agent.name}</div>
                        <div className="text-xs text-gray-500 font-mono truncate mt-0.5">{agent.id}</div>
                      </div>
                    </div>
                  </div>

                  {/* Type */}
                  <div className="col-span-2 flex items-center">
                    <Badge 
                      variant="outline" 
                      className={`text-xs font-medium border ${getAgentTypeColor(agent.agent_type)} h-5`}
                    >
                      {agent.agent_type}
                    </Badge>
                  </div>

                  {/* Environment */}
                  <div className="col-span-2 flex items-center">
                    <Badge 
                      variant="outline" 
                      className={`text-xs font-medium border ${getEnvironmentColor(agent.environment)} h-5`}
                    >
                      {agent.environment}
                    </Badge>
                  </div>

                  {/* Status */}
                  <div className="col-span-2 flex items-center">
                    <div className="flex items-center gap-1.5">
                      <div className={`w-1.5 h-1.5 rounded-full ${agent.is_active ? 'bg-emerald-500' : 'bg-gray-300'}`}></div>
                      <span className="text-sm text-gray-600">
                        {agent.is_active ? 'Active' : 'Inactive'}
                      </span>
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="col-span-2 flex items-center">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0 text-gray-400 hover:text-gray-600"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <MoreHorizontal className="h-3.5 w-3.5" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end" className="w-40">
                        <DropdownMenuItem onClick={(e) => e.stopPropagation()} className="text-sm">
                          <Eye className="h-3.5 w-3.5 mr-2" />
                          View
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={(e) => e.stopPropagation()} className="text-sm">
                          <BarChart3 className="h-3.5 w-3.5 mr-2" />
                          Analytics
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={(e) => e.stopPropagation()} className="text-sm">
                          <Terminal className="h-3.5 w-3.5 mr-2" />
                          Logs
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem onClick={(e) => e.stopPropagation()} className="text-sm">
                          <Settings className="h-3.5 w-3.5 mr-2" />
                          Settings
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation()
                          handleCopyAgentId(agent.id, e)
                        }} className="text-sm">
                          <Copy className="h-3.5 w-3.5 mr-2" />
                          Copy ID
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation()
                          setShowDeleteConfirm(agent)
                        }} className="text-red-600 focus:text-red-600 text-sm">
                          <Trash2 className="h-3.5 w-3.5 mr-2" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : (
          <div className="grid gap-3 grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4">
            {filteredAgents.map((agent) => (
              <Card
                key={agent.id}
                className={`group bg-white border border-gray-200 hover:border-gray-300 hover:shadow-sm transition-all duration-200 cursor-pointer ${
                  selectedAgent === agent.id ? 'ring-1 ring-blue-500 border-blue-300' : ''
                }`}
                onClick={() => handleAgentClick(agent)}
              >
                <CardContent className="p-4">
                  {/* Compact Header */}
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-2.5 min-w-0 flex-1">
                      <div className="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
                        {getAgentTypeIcon(agent.agent_type)}
                      </div>
                      <div className="min-w-0 flex-1">
                        <h3 className="font-medium text-gray-900 text-sm truncate mb-1">{agent.name}</h3>
                        <div className="flex items-center gap-1.5">
                          <div className={`w-1.5 h-1.5 rounded-full ${agent.is_active ? 'bg-emerald-500' : 'bg-gray-300'}`}></div>
                          <span className="text-xs text-gray-500">
                            {agent.is_active ? 'Active' : 'Inactive'}
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0 text-gray-400 hover:text-gray-600"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <MoreHorizontal className="h-3.5 w-3.5" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end" className="w-40">
                        <DropdownMenuItem onClick={(e) => e.stopPropagation()} className="text-sm">
                          <Eye className="h-3.5 w-3.5 mr-2" />
                          View
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={(e) => e.stopPropagation()} className="text-sm">
                          <BarChart3 className="h-3.5 w-3.5 mr-2" />
                          Analytics
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={(e) => e.stopPropagation()} className="text-sm">
                          <Terminal className="h-3.5 w-3.5 mr-2" />
                          Logs
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem onClick={(e) => e.stopPropagation()} className="text-sm">
                          <Settings className="h-3.5 w-3.5 mr-2" />
                          Settings
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation()
                          handleCopyAgentId(agent.id, e)
                        }} className="text-sm">
                          <Copy className="h-3.5 w-3.5 mr-2" />
                          Copy ID
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation()
                          setShowDeleteConfirm(agent)
                        }} className="text-red-600 focus:text-red-600 text-sm">
                          <Trash2 className="h-3.5 w-3.5 mr-2" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>

                  {/* Compact Badges */}
                  <div className="flex flex-wrap gap-1.5 mb-3">
                    <Badge 
                      variant="outline" 
                      className={`text-xs font-medium border ${getAgentTypeColor(agent.agent_type)} h-5`}
                    >
                      {agent.agent_type}
                    </Badge>
                    <Badge 
                      variant="outline" 
                      className={`text-xs font-medium border ${getEnvironmentColor(agent.environment)} h-5`}
                    >
                      {agent.environment}
                    </Badge>
                  </div>

                  {/* Compact Agent ID */}
                  <div className="bg-gray-50 rounded-md p-2.5 mb-3">
                    <div className="flex items-center justify-between mb-1">
                      <span className="text-xs font-medium text-gray-600">Agent ID</span>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={(e) => handleCopyAgentId(agent.id, e)}
                        className="h-4 w-4 p-0 text-gray-500 hover:text-gray-700"
                      >
                        <Copy className="w-3 h-3" />
                      </Button>
                    </div>
                    <code className="text-xs text-gray-600 font-mono block truncate">
                      {agent.id}
                    </code>
                    {copiedAgentId === agent.id && (
                      <p className="text-xs text-emerald-600 mt-1">Copied!</p>
                    )}
                  </div>

                  {/* Compact Footer */}
                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <div className="flex items-center gap-1">
                      <Clock className="w-3 h-3" />
                      <span>{formatDate(agent.created_at)}</span>
                    </div>
                    <div className="flex items-center gap-1 text-gray-400">
                      <span>Configure</span>
                      <ExternalLink className="w-3 h-3" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {/* Compact Empty States */}
        {filteredAgents.length === 0 && searchQuery && (
          <div className="text-center py-12 bg-white rounded-lg border border-gray-200">
            <Search className="h-10 w-10 text-gray-400 mx-auto mb-3" />
            <h3 className="font-medium text-gray-900 mb-1">No agents found</h3>
            <p className="text-gray-500 text-sm mb-4">
              No agents match your search criteria.
            </p>
            <Button 
              variant="outline" 
              onClick={() => setSearchQuery('')}
              size="sm"
              className="text-gray-600"
            >
              Clear search
            </Button>
          </div>
        )}

        {filteredAgents.length === 0 && !searchQuery && (agents || []).length === 0 && (
          <div className="text-center py-16 bg-white rounded-lg border border-gray-200">
            <Bot className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="font-medium text-gray-900 mb-2">No agents configured</h3>
            <p className="text-gray-500 text-sm mb-6 max-w-sm mx-auto">
              Create your first voice AI agent to start handling calls and conversations.
            </p>
            <Button 
              onClick={handleCreateAgent}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              <Plus className="h-4 w-4 mr-2" />
              Create Agent
            </Button>
          </div>
        )}
      </main>

      {/* Dialogs */}
      <AgentCreationDialog
        isOpen={showCreateDialog}
        onClose={() => setShowCreateDialog(false)}
        onAgentCreated={handleAgentCreated}
        projectId={projectId}
      />

      <Dialog open={showDeleteConfirm !== null} onOpenChange={() => setShowDeleteConfirm(null)}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="text-base font-medium">Delete agent</DialogTitle>
            <DialogDescription className="text-sm text-gray-600">
              Are you sure you want to delete "{showDeleteConfirm?.name}"? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <div className="flex gap-3 pt-4">
            <Button variant="outline" onClick={() => setShowDeleteConfirm(null)} className="flex-1" size="sm">
              Cancel
            </Button>
            <Button
              variant="destructive"
              onClick={() => showDeleteConfirm && handleDeleteAgent(showDeleteConfirm)}
              disabled={deletingAgent !== null}
              className="flex-1"
              size="sm"
            >
              {deletingAgent ? <Loader2 className="w-3.5 h-3.5 animate-spin mr-1.5" /> : null}
              Delete
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}

export default AgentSelection
</file>

<file path="src/components/buttons/MagicButton.tsx">
import React from "react"
import { Button } from "@/components/ui/button"
import { WandSparkles } from "lucide-react"

const MagicButton = React.forwardRef(({ ...props }, ref) => {
  return (
    <Button
      ref={ref as any}
      {...props} // MUST SPREAD PROPS
      variant="outline"
      className="group relative overflow-hidden border-2 border-gray-200 dark:border-gray-700 hover:border-purple-400 dark:hover:border-purple-400 transition-all duration-300 hover:shadow-lg hover:shadow-purple-400/25 bg-transparent"
    >
      <WandSparkles className="w-4 h-4 mr-2 text-gray-600 dark:text-gray-400 group-hover:text-purple-500 transition-colors duration-300 group-hover:rotate-12" />
      <span className="relative z-10 font-medium group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors duration-300">
        Field Extractor
      </span>
      <div className="absolute inset-0 bg-gradient-to-r from-purple-400/0 via-purple-400/10 to-purple-400/0 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700 ease-in-out" />
    </Button>
  )
})

MagicButton.displayName = "MagicButton"
export default MagicButton
</file>

<file path="src/components/calls/AgentCustomLogsView.tsx">
"use client"

import type React from "react"
import { useState, useEffect, useMemo, useCallback, useRef } from "react"
import { supabase } from "../../lib/supabase"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Alert, AlertDescription } from "@/components/ui/alert"
import CallFilter, { type FilterRule } from "../CallFilter"
import ColumnSelector from "../shared/ColumnSelector"
import { Settings2, Save, Trash2, Eye, Filter, Columns, RefreshCw, AlertCircle, Database, Search } from "lucide-react"

// ===== TYPES AND INTERFACES =====
interface AgentCustomLogsViewProps {
  agentId: string
  dateRange: { from: string; to: string }
}

interface CustomView {
  id: string
  name: string
  filters: FilterRule[]
  visible_columns: {
    basic: string[]
    metadata: string[]
    transcription_metrics: string[]
  }
  created_at?: string
  updated_at?: string
}

interface CallLog {
  id: string
  call_id: string
  customer_number: string
  call_started_at: string
  duration_seconds: number
  avg_latency?: number
  call_ended_reason: string
  metadata: Record<string, any>
  transcription_metrics: Record<string, any>
}

enum LoadingState {
  IDLE = "idle",
  LOADING = "loading",
  ERROR = "error",
  SUCCESS = "success",
}

// ===== CONSTANTS =====
const PAGE_SIZE = 20
const DEFAULT_BASIC_COLUMNS = ["customer_number", "call_id", "call_ended_reason", "duration_seconds", "call_started_at", "avg_latency"]

const BASIC_COLUMN_DEFINITIONS = [
  { key: "customer_number", label: "Customer Number" },
  { key: "call_id", label: "Call ID" },
  { key: "call_ended_reason", label: "Call Status" },
  { key: "duration_seconds", label: "Duration" },
  { key: "call_started_at", label: "Start Time" },
  { key: "avg_latency", label: "Avg Latency (ms)" },
]

// ===== CUSTOM HOOKS =====
const useLocalStorage = (key: string, defaultValue: string) => {
  const [value, setValue] = useState(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem(key) || defaultValue
    }
    return defaultValue
  })

  const setStoredValue = useCallback((newValue: string) => {
    setValue(newValue)
    if (typeof window !== 'undefined') {
      localStorage.setItem(key, newValue)
    }
  }, [key])

  return [value, setStoredValue] as const
}

const useInfiniteScroll = (callback: () => void, hasMore: boolean, isLoading: boolean) => {
  const loadMoreRef = useRef<HTMLDivElement | null>(null)

  useEffect(() => {
    if (!hasMore || isLoading) return

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          callback()
        }
      },
      { threshold: 1 }
    )

    const current = loadMoreRef.current
    if (current) observer.observe(current)

    return () => {
      if (current) observer.unobserve(current)
    }
  }, [hasMore, isLoading, callback])

  return loadMoreRef
}

// ===== UTILITY FUNCTIONS =====
const formatDuration = (seconds: number): string => {
  const mins = Math.floor(seconds / 60)
  const secs = seconds % 60
  return `${mins}:${secs.toString().padStart(2, "0")}`
}

const formatDateTime = (timestamp: string): string => {
  const date = new Date(timestamp)
  return date.toLocaleString("en-IN", {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
    hour12: true,
    timeZone: "Asia/Kolkata",
  })
}

const getStatusVariant = (status: string) => {
  switch (status.toLowerCase()) {
    case "completed":
      return "default"
    case "failed":
      return "destructive"
    case "busy":
      return "secondary"
    default:
      return "outline"
  }
}

// ===== MAIN COMPONENT =====
const AgentCustomLogsView: React.FC<AgentCustomLogsViewProps> = ({ agentId, dateRange }) => {
  // ===== STATE MANAGEMENT =====
  const [selectedViewId, setStoredSelectedViewId] = useLocalStorage(`selectedView-${agentId}`, "all")
  
  // Core data state
  const [views, setViews] = useState<CustomView[]>([])
  const [callLogs, setCallLogs] = useState<CallLog[]>([])
  const [currentFilters, setCurrentFilters] = useState<FilterRule[]>([])
  const [currentColumns, setCurrentColumns] = useState<{
    basic: string[]
    metadata: string[]
    transcription_metrics: string[]
  }>({
    basic: DEFAULT_BASIC_COLUMNS,
    metadata: [],
    transcription_metrics: [],
  })

  // UI state
  const [loadingState, setLoadingState] = useState<LoadingState>(LoadingState.IDLE)
  const [error, setError] = useState<string | null>(null)
  const [searchTerm, setSearchTerm] = useState<string>("")
  const [isCustomizeOpen, setIsCustomizeOpen] = useState(false)
  const [viewName, setViewName] = useState<string>("")
  
  // Pagination state
  const [page, setPage] = useState(0)
  const [hasMore, setHasMore] = useState(true)
  
  // Initialization flags
  const [isInitialized, setIsInitialized] = useState(false)
  const isFirstRender = useRef(true)

  // ===== COMPUTED VALUES =====
  const dynamicColumns = useMemo(() => {
    const metadataKeys = new Set<string>()
    const transcriptionKeys = new Set<string>()

    callLogs.forEach((call) => {
      if (call.metadata && typeof call.metadata === "object") {
        Object.keys(call.metadata).forEach((key) => metadataKeys.add(key))
      }
      if (call.transcription_metrics && typeof call.transcription_metrics === "object") {
        Object.keys(call.transcription_metrics).forEach((key) => transcriptionKeys.add(key))
      }
    })

    return {
      metadata: Array.from(metadataKeys).sort(),
      transcription_metrics: Array.from(transcriptionKeys).sort(),
    }
  }, [callLogs])

  const filteredCallLogs = useMemo(() => {
    if (!searchTerm.trim()) return callLogs

    const searchLower = searchTerm.toLowerCase()
    return callLogs.filter(
      (call) =>
        call.customer_number?.toLowerCase().includes(searchLower) ||
        call.call_id?.toLowerCase().includes(searchLower) ||
        call.call_ended_reason?.toLowerCase().includes(searchLower),
    )
  }, [callLogs, searchTerm])

  const selectedView = useMemo(() => views.find((v) => v.id === selectedViewId), [views, selectedViewId])
  const isLoading = loadingState === LoadingState.LOADING
  const isAllView = selectedViewId === "all"
  const activeFiltersCount = currentFilters.length
  const activeColumnsCount = currentColumns.basic.length + currentColumns.metadata.length + currentColumns.transcription_metrics.length

  // ===== API FUNCTIONS =====
  const fetchViews = useCallback(async (): Promise<void> => {
    try {
      const { data, error } = await supabase
        .from("pype_voice_agent_call_log_views")
        .select("*")
        .eq("agent_id", agentId)
        .order("created_at", { ascending: false })

      if (error) throw error
      setViews(data || [])
    } catch (err) {
      console.error("Failed to fetch views:", err)
      setError("Unable to load saved views. Please try again.")
    }
  }, [agentId])

  const convertToSupabaseFilters = useCallback(
    (filters: FilterRule[]) => {
      const supabaseFilters = [{ column: "agent_id", operator: "eq", value: agentId }]

      filters.forEach((filter) => {
        const getColumnName = (forTextOperation = false) => {
          if (!filter.jsonField) return filter.column
          return forTextOperation ? `${filter.column}->>${filter.jsonField}` : `${filter.column}->${filter.jsonField}`
        }

        switch (filter.operation) {
          case "equals":
            if (filter.column === "call_started_at") {
              const startOfDay = `${filter.value} 00:00:00`
              const endOfDay = `${filter.value} 23:59:59.999`
              supabaseFilters.push(
                { column: filter.column, operator: "gte", value: startOfDay },
                { column: filter.column, operator: "lte", value: endOfDay },
              )
            } else {
              supabaseFilters.push({
                column: getColumnName(false),
                operator: "eq",
                value: filter.value,
              })
            }
            break

          case "contains":
            supabaseFilters.push({
              column: getColumnName(true),
              operator: "ilike",
              value: `%${filter.value}%`,
            })
            break

          case "starts_with":
            supabaseFilters.push({
              column: getColumnName(true),
              operator: "ilike",
              value: `${filter.value}%`,
            })
            break

          case "greater_than":
            if (filter.column === "call_started_at") {
              const nextDay = new Date(filter.value)
              nextDay.setDate(nextDay.getDate() + 1)
              const nextDayStr = nextDay.toISOString().split("T")[0]
              supabaseFilters.push({
                column: filter.column,
                operator: "gte",
                value: `${nextDayStr} 00:00:00`,
              })
            } else {
              supabaseFilters.push({
                column: getColumnName(false),
                operator: "gt",
                value: filter.value,
              })
            }
            break

          case "less_than":
            if (filter.column === "call_started_at") {
              supabaseFilters.push({
                column: filter.column,
                operator: "lt",
                value: `${filter.value} 00:00:00`,
              })
            } else {
              supabaseFilters.push({
                column: getColumnName(false),
                operator: "lt",
                value: filter.value,
              })
            }
            break

          case "json_equals":
            supabaseFilters.push({
              column: getColumnName(true),
              operator: "eq",
              value: filter.value,
            })
            break

          case "json_contains":
            supabaseFilters.push({
              column: getColumnName(true),
              operator: "ilike",
              value: `%${filter.value}%`,
            })
            break

          case "json_greater_than":
            supabaseFilters.push({
              column: `${getColumnName(false)}::numeric`,
              operator: "gt",
              value: Number.parseFloat(filter.value).toString(),
            })
            break

          case "json_less_than":
            supabaseFilters.push({
              column: `${getColumnName(false)}::numeric`,
              operator: "lt",
              value: Number.parseFloat(filter.value).toString(),
            })
            break

          case "json_exists":
            supabaseFilters.push({
              column: getColumnName(false),
              operator: "not.is",
              value: "",
            })
            break

          default:
            console.warn(`Unsupported filter operation: ${filter.operation}`)
            break
        }
      })

      return supabaseFilters
    },
    [agentId],
  )

  const fetchCallLogs = useCallback(async (pageNumber: number = 0, reset: boolean = false): Promise<void> => {

    if (pageNumber === 0 || reset) {
      setLoadingState(LoadingState.LOADING)
    }
    setError(null)


    console.log("dateRange.to:", dateRange.to); // Should be "2025-08-04"
    const endOfDay = new Date(dateRange.to + "T23:59:59.999");
    console.log("endOfDay:", endOfDay.toISOString());


    try {
      let query = supabase
        .from("pype_voice_call_logs")
        .select("*")
        .eq("agent_id", agentId)
        .gte("call_started_at", dateRange.from)
        .lte("call_started_at", endOfDay.toISOString())

      const filters = convertToSupabaseFilters(currentFilters)
      for (const filter of filters) {
        // @ts-ignore
        query = query[filter.operator](filter.column, filter.value)
      }

      const from = pageNumber * PAGE_SIZE
      const to = from + PAGE_SIZE - 1

      query = query.order("call_started_at", { ascending: false })
      query = query.range(from, to)

      const { data, error } = await query

      if (error) throw error

      if (data.length < PAGE_SIZE) setHasMore(false)

      if (reset || pageNumber === 0) {
        setCallLogs(data || [])
      } else {
        setCallLogs((prev) => {
          const combined = [...prev, ...data]
          const seen = new Set<string>()
          return combined.filter((log) => {
            if (seen.has(log.call_id)) return false
            seen.add(log.call_id)
            return true
          })
        })
      }
      
      setLoadingState(LoadingState.SUCCESS)
    } catch (err) {
      console.error("Failed to fetch call logs:", err)
      setError("Unable to load call logs. Please check your connection and try again.")
      setLoadingState(LoadingState.ERROR)
    }
  }, [currentFilters, agentId, dateRange, convertToSupabaseFilters])

  // ===== VIEW MANAGEMENT FUNCTIONS =====
  const resetToAllView = useCallback((): void => {
    setCurrentFilters([])
    setCurrentColumns({
      basic: DEFAULT_BASIC_COLUMNS,
      metadata: [],
      transcription_metrics: [],
    })
  }, [])

  const loadView = useCallback((view: CustomView): void => {
    setCurrentFilters(view.filters || [])
    setCurrentColumns({
      basic: view.visible_columns?.basic || DEFAULT_BASIC_COLUMNS,
      metadata: view.visible_columns?.metadata || [],
      transcription_metrics: view.visible_columns?.transcription_metrics || [],
    })
  }, [])

  const handleViewChange = useCallback((value: string): void => {
    setStoredSelectedViewId(value)
    setPage(0)
    setHasMore(true)
    
    if (value === "all") {
      resetToAllView()
    } else {
      const view = views.find((v) => v.id === value)
      if (view) {
        loadView(view)
      }
    }
  }, [views, loadView, resetToAllView, setStoredSelectedViewId])

  const saveView = useCallback(async (): Promise<void> => {
    if (!viewName.trim()) return

    try {
      const { error } = await supabase.from("pype_voice_agent_call_log_views").insert([
        {
          agent_id: agentId,
          name: viewName.trim(),
          filters: currentFilters,
          visible_columns: currentColumns,
        },
      ])

      if (error) throw error

      setViewName("")
      setIsCustomizeOpen(false)
      await fetchViews()
    } catch (err) {
      console.error("Failed to save view:", err)
      setError("Unable to save view. Please try again.")
    }
  }, [viewName, agentId, currentFilters, currentColumns, fetchViews])

  const deleteView = useCallback(async (viewId: string): Promise<void> => {
    try {
      const { error } = await supabase.from("pype_voice_agent_call_log_views").delete().eq("id", viewId)

      if (error) throw error

      setViews((prev) => prev.filter((view) => view.id !== viewId))

      if (selectedViewId === viewId) {
        setStoredSelectedViewId("all")
        resetToAllView()
      }
    } catch (err) {
      console.error("Failed to delete view:", err)
      setError("Unable to delete view. Please try again.")
    }
  }, [selectedViewId, resetToAllView, setStoredSelectedViewId])

  // ===== PAGINATION =====
  const handleLoadMore = useCallback(() => {
    const nextPage = page + 1
    setPage(nextPage)
    fetchCallLogs(nextPage, false)
  }, [page, fetchCallLogs])

  // fetch in background
  
  useEffect(() => {
    const interval = setInterval(async () => {
      try {
        const filters = convertToSupabaseFilters(currentFilters)
        console.log("dateRange.to:", dateRange.to); // Should be "2025-08-04"
        const endOfDay = new Date(dateRange.to + "T23:59:59.999");
        console.log("endOfDay:", endOfDay.toISOString());
        
        let query = supabase
          .from("pype_voice_call_logs")
          .select("*")
          .eq("agent_id", agentId)
          .gte("call_started_at", dateRange.from)
          .lte("call_started_at", endOfDay.toISOString())
          .order("call_started_at", { ascending: false })
          .limit(PAGE_SIZE)
  
        for (const filter of filters) {
          // @ts-ignore
          query = query[filter.operator](filter.column, filter.value)
        }
  
        const { data, error } = await query
        console.log(error)
        if (error) throw error

  
        // Check if there's any new data not already in the list
        if (data && data.length > 0) {
          const latestExistingCallId = callLogs[0]?.call_id
          const isNew = data.some((log) => log.call_id !== latestExistingCallId)
  
          if (isNew) {
            // Append new logs at the beginning
            setCallLogs((prev) => {
              const ids = new Set(prev.map((log) => log.call_id))
              const newOnes = data.filter((log) => !ids.has(log.call_id))
              return [...newOnes, ...prev]
            })
          }
        }
      } catch (err) {
        console.error("Background refresh failed:", err)
      }
    }, 5 * 60 * 1000)
  
    return () => clearInterval(interval)
  }, [agentId, dateRange, currentFilters, callLogs, convertToSupabaseFilters])
  
  

  const loadMoreRef = useInfiniteScroll(handleLoadMore, hasMore, isLoading)

  // ===== EFFECTS =====
  
  // Initialize views on mount
  useEffect(() => {
    fetchViews()
  }, [fetchViews])

  // Initialize selected view after views are loaded
  useEffect(() => {
    if (isFirstRender.current && views.length >= 0) {
      isFirstRender.current = false
  
      const savedView = views.find((v) => v.id === selectedViewId)

      if (selectedViewId !== "all" && savedView) {
        loadView(savedView)
      } else {
        setStoredSelectedViewId("all")
        resetToAllView()
      }
  
      setIsInitialized(true)
    }
  }, [views, selectedViewId, loadView, resetToAllView, setStoredSelectedViewId])
  

  // Fetch call logs when filters change or component initializes
  useEffect(() => {

    if (isInitialized) {
      setPage(0)
      setHasMore(true)
      fetchCallLogs(0, true)
    }
  }, [currentFilters, isInitialized, fetchCallLogs])

  // Clean up dynamic columns when they change
  useEffect(() => {
    setCurrentColumns((prev) => ({
      basic: prev.basic.length === 0 ? DEFAULT_BASIC_COLUMNS : prev.basic,
      metadata: prev.metadata.filter((col) => dynamicColumns.metadata.includes(col)),
      transcription_metrics: prev.transcription_metrics.filter((col) =>
        dynamicColumns.transcription_metrics.includes(col),
      ),
    }))
  }, [dynamicColumns])

  // ===== RENDER =====
  return (
    <div className="space-y-6 p-6 bg-gray-50 min-h-screen">
      {/* Error Alert */}
      {error && (
        <Alert variant="destructive" className="border-red-200 bg-red-50">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription className="flex items-center justify-between">
            <span>{error}</span>
            <Button variant="ghost" size="sm" onClick={() => setError(null)} className="h-auto p-1 hover:bg-red-100">
              √ó
            </Button>
          </AlertDescription>
        </Alert>
      )}

      {/* Header Section */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Database className="w-5 h-5 text-blue-600" />
              </div>
              <div>
                <h1 className="text-2xl font-semibold text-gray-900">Call Logs</h1>
                <p className="text-sm text-gray-500">
                  {dateRange.from} to {dateRange.to}
                </p>
              </div>
            </div>

            {/* Status Indicators */}
            <div className="flex items-center gap-2">
              {activeFiltersCount > 0 && (
                <Badge variant="secondary" className="gap-1 bg-blue-50 text-blue-700 border-blue-200">
                  <Filter className="w-3 h-3" />
                  {activeFiltersCount} filter{activeFiltersCount !== 1 ? "s" : ""}
                </Badge>
              )}
              {activeColumnsCount > 0 && (
                <Badge variant="secondary" className="gap-1 bg-green-50 text-green-700 border-green-200">
                  <Columns className="w-3 h-3" />
                  {activeColumnsCount} column{activeColumnsCount !== 1 ? "s" : ""}
                </Badge>
              )}
              {selectedView && (
                <Badge variant="outline" className="gap-1 bg-purple-50 text-purple-700 border-purple-200">
                  <Eye className="w-3 h-3" />
                  {selectedView.name}
                </Badge>
              )}
              {isAllView && (
                <Badge variant="outline" className="gap-1 bg-gray-50 text-gray-700 border-gray-200">
                  <Eye className="w-3 h-3" />
                  All
                </Badge>
              )}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex items-center gap-3">
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                setPage(0)
                setHasMore(true)
                fetchCallLogs(0, true)
              }}
              disabled={isLoading}
              className="gap-2 bg-transparent"
            >
              <RefreshCw className={`w-4 h-4 ${isLoading ? "animate-spin" : ""}`} />
            </Button>

            <Select value={selectedViewId} onValueChange={handleViewChange}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="Select view" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">
                  <div className="flex items-center gap-2">
                    <Database className="w-4 h-4" />
                    All
                  </div>
                </SelectItem>
                {views.length > 0 && <Separator />}
                {views.map((view) => (
                  <SelectItem key={view.id} value={view.id}>
                    <div className="flex items-center gap-2">
                      <Eye className="w-4 h-4" />
                      {view.name}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {selectedViewId && selectedViewId !== "all" && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => deleteView(selectedViewId)}
                className="text-red-600 hover:text-red-700 hover:bg-red-50"
              >
                <Trash2 className="w-4 h-4" />
              </Button>
            )}

            <Dialog open={isCustomizeOpen} onOpenChange={setIsCustomizeOpen}>
              <DialogTrigger asChild>
                <Button className="gap-2 bg-blue-600 hover:bg-blue-700">
                  <Settings2 className="w-4 h-4" />
                  Customize
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>Customize Table View</DialogTitle>
                </DialogHeader>
                <div className="space-y-6">
                  {/* Filters Section */}
                  <div className="space-y-3">
                    <h3 className="text-lg font-medium text-gray-900">Filters</h3>
                    <div className="bg-gray-50 rounded-lg p-4">
                      <CallFilter
                        onFiltersChange={setCurrentFilters}
                        onClear={() => setCurrentFilters([])}
                        availableMetadataFields={dynamicColumns.metadata}
                        availableTranscriptionFields={dynamicColumns.transcription_metrics}
                      />
                    </div>
                  </div>

                  <Separator />

                  {/* Columns Section */}
                  <div className="space-y-3">
                    <h3 className="text-lg font-medium text-gray-900">Columns</h3>
                    <div className="bg-gray-50 rounded-lg p-4">
                      <ColumnSelector
                        basicColumns={BASIC_COLUMN_DEFINITIONS.map((col) => col.key)}
                        basicColumnLabels={Object.fromEntries(BASIC_COLUMN_DEFINITIONS.map((col) => [col.key, col.label]))}
                        metadataColumns={dynamicColumns.metadata}
                        transcriptionColumns={dynamicColumns.transcription_metrics}
                        visibleColumns={currentColumns}
                        onColumnChange={(type, col, vis) => {
                          setCurrentColumns((prev) => ({
                            ...prev,
                            [type]: vis ? [...prev[type], col] : prev[type].filter((c) => c !== col),
                          }))
                        }}
                        alignProp={-200}
                        onSelectAll={(type, vis) => {
                          setCurrentColumns((prev) => ({
                            ...prev,
                            [type]: vis
                              ? type === "basic"
                                ? BASIC_COLUMN_DEFINITIONS.map((col) => col.key)
                                : type === "metadata"
                                  ? dynamicColumns.metadata
                                  : dynamicColumns.transcription_metrics
                              : [],
                          }))
                        }}                      />
                    </div>
                  </div>

                  <Separator />

                  {/* Save View Section */}
                  <div className="space-y-3">
                    <h3 className="text-lg font-medium text-gray-900">Save View</h3>
                    <div className="flex gap-3">
                      <div className="flex-1">
                        <Label htmlFor="viewName">View Name</Label>
                        <Input
                          id="viewName"
                          type="text"
                          placeholder="Enter view name..."
                          value={viewName}
                          onChange={(e) => setViewName(e.target.value)}
                          className="mt-1"
                        />
                      </div>
                      <div className="flex items-end">
                        <Button onClick={saveView} disabled={!viewName.trim()} className="gap-2">
                          <Save className="w-4 h-4" />
                          Save View
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* Search Bar */}
        <div className="relative max-w-md">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <Input
            type="text"
            placeholder="Search calls..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      {/* Data Table */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div className="max-h-[600px] overflow-auto">
          <Table>
            <TableHeader className="sticky top-0 bg-gray-50 z-10">
              <TableRow className="border-b border-gray-200">
                {currentColumns.basic.includes("customer_number") && (
                  <TableHead className="font-semibold text-gray-700 bg-gray-50">Customer Number</TableHead>
                )}
                {currentColumns.basic.includes("call_id") && (
                  <TableHead className="font-semibold text-gray-700 bg-gray-50">Call ID</TableHead>
                )}
                {currentColumns.basic.includes("call_ended_reason") && (
                  <TableHead className="font-semibold text-gray-700 bg-gray-50">Status</TableHead>
                )}
                {currentColumns.basic.includes("duration_seconds") && (
                  <TableHead className="font-semibold text-gray-700 bg-gray-50">Duration</TableHead>
                )}
                {currentColumns.basic.includes("call_started_at") && (
                  <TableHead className="font-semibold text-gray-700 bg-gray-50">Start Time</TableHead>
                )}
                {currentColumns.basic.includes("avg_latency") && (
                  <TableHead className="font-semibold text-gray-700 bg-gray-50">Avg Latency</TableHead>
                )}
                {currentColumns.metadata.map((key) => (
                  <TableHead key={`metadata-head-${key}`} className="font-semibold text-gray-700 bg-gray-50">
                    {key}
                  </TableHead>
                ))}
                {currentColumns.transcription_metrics.map((key) => (
                  <TableHead key={`trans-head-${key}`} className="font-semibold text-gray-700 bg-gray-50">
                    {key}
                  </TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoading && page === 0 ? (
                <TableRow>
                  <TableCell colSpan={20} className="text-center py-12">
                    <div className="flex flex-col items-center gap-3">
                      <div className="w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin" />
                      <p className="text-gray-600">Loading call logs...</p>
                    </div>
                  </TableCell>
                </TableRow>
              ) : filteredCallLogs.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={20} className="text-center py-12">
                    <div className="flex flex-col items-center gap-3">
                      <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center">
                        <Database className="w-6 h-6 text-gray-400" />
                      </div>
                      <div className="text-center">
                        <p className="text-gray-600 font-medium">No call logs found</p>
                        <p className="text-gray-400 text-sm">
                          {searchTerm ? "Try adjusting your search terms" : "Try adjusting your filters or date range"}
                        </p>
                      </div>
                    </div>
                  </TableCell>
                </TableRow>
              ) : (
                <>
                  {filteredCallLogs.map((call) => (
                    <TableRow key={call.id} className="hover:bg-gray-50 transition-colors border-b border-gray-100">
                      {currentColumns.basic.includes("customer_number") && (
                        <TableCell className="font-medium text-gray-900">{call.customer_number}</TableCell>
                      )}
                      {currentColumns.basic.includes("call_id") && (
                        <TableCell className="font-mono text-sm text-gray-600">{call.call_id.slice(-8)}</TableCell>
                      )}
                      {currentColumns.basic.includes("call_ended_reason") && (
                        <TableCell>
                          <Badge variant={getStatusVariant(call.call_ended_reason)}>{call.call_ended_reason}</Badge>
                        </TableCell>
                      )}
                      {currentColumns.basic.includes("duration_seconds") && (
                        <TableCell className="text-gray-700">{formatDuration(call.duration_seconds)}</TableCell>
                      )}
                      {currentColumns.basic.includes("call_started_at") && (
                        <TableCell className="text-sm text-gray-600">{formatDateTime(call.call_started_at)}</TableCell>
                      )}
                      {currentColumns.basic.includes("avg_latency") && (
                        <TableCell className="text-gray-700">
                          {call.avg_latency ? `${call.avg_latency.toFixed(2)}ms` : "‚Äî"}
                        </TableCell>
                      )}
                      {currentColumns.metadata.map((key, index) => (
                        <TableCell key={`metadata-${call.id}-${key}`} className="max-w-xs truncate text-gray-600">
                          {typeof call.metadata?.[key] === "object"
                            ? JSON.stringify(call.metadata[key])
                            : (call.metadata?.[key] ?? "‚Äî")}
                        </TableCell>
                      ))}
                      {currentColumns.transcription_metrics.map((key, index) => (
                        <TableCell key={`trans-${call.id}-${key}`} className="max-w-xs truncate text-gray-600">
                          {call.transcription_metrics?.[key] ?? "‚Äî"}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}

                  {/* Load More Trigger */}
                  {hasMore && (
                    <TableRow>
                      <TableCell colSpan={20} className="text-center py-6" ref={loadMoreRef as any}>
                        {isLoading ? (
                          <div className="flex items-center justify-center gap-2">
                            <div className="w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin" />
                            <span className="text-gray-500 text-sm">Loading more...</span>
                          </div>
                        ) : (
                          <span className="text-gray-500 text-sm">Scroll to load more</span>
                        )}
                      </TableCell>
                    </TableRow>
                  )}
                </>
              )}
            </TableBody>
          </Table>
        </div>

        {/* Table Footer */}
        {!isLoading && filteredCallLogs.length > 0 && (
          <div className="px-6 py-3 bg-gray-50 border-t border-gray-200">
            <p className="text-sm text-gray-600">
              Showing {filteredCallLogs.length} of {callLogs.length} call logs
              {searchTerm && ` (filtered by "${searchTerm}")`}
              {!hasMore && " - All results loaded"}
            </p>
          </div>
        )}
      </div>

      {/* Debug Info (Remove in production) */}
      {process.env.NODE_ENV === 'development' && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 text-xs">
          <h4 className="font-semibold text-yellow-800 mb-2">Debug Info:</h4>
          <div className="space-y-1 text-yellow-700">
            <div>Selected View: {selectedViewId}</div>
            <div>Is Initialized: {isInitialized.toString()}</div>
            <div>Current Page: {page}</div>
            <div>Has More: {hasMore.toString()}</div>
            <div>Loading State: {loadingState}</div>
            <div>Active Filters: {activeFiltersCount}</div>
            <div>Call Logs Count: {callLogs.length}</div>
            <div>Filtered Count: {filteredCallLogs.length}</div>
            <div>Basic Columns: {currentColumns.basic.join(', ')}</div>
            <div>Metadata Columns: {currentColumns.metadata.join(', ')}</div>
            <div>Transcription Columns: {currentColumns.transcription_metrics.join(', ')}</div>
          </div>
        </div>
      )}
    </div>
  )
}

export default AgentCustomLogsView
</file>

<file path="src/components/calls/CallDetailsDrawer.tsx">
"use client"

import type React from "react"
import { useMemo } from "react"
import { X, Bot, Clock, Brain, Volume2, Mic, Activity, Download } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { useSupabaseQuery } from "../../hooks/useSupabase"
import AudioPlayer from "../AudioPlayer"
import { extractS3Key } from "../../utils/s3"
import { cn } from "@/lib/utils"

interface TranscriptLog {
  id: string
  session_id: string
  turn_id: string
  user_transcript: string
  agent_response: string
  stt_metrics: any
  llm_metrics: any
  tts_metrics: any
  eou_metrics: any
  lesson_day: number
  created_at: string
  unix_timestamp: number
  phone_number: string
  call_duration: number
  call_success: boolean
  lesson_completed: boolean
}

interface CallDetailsDrawerProps {
  isOpen: boolean
  callData: any
  onClose: () => void
}

const CallDetailsDrawer: React.FC<CallDetailsDrawerProps> = ({ isOpen, callData, onClose }) => {
  const sessionId = callData?.id

  const {
    data: transcriptLogs,
    loading,
    error,
  } = useSupabaseQuery("pype_voice_metrics_logs", {
    select: "*",
    filters: [{ column: "session_id", operator: "eq", value: sessionId }],
    orderBy: { column: "unix_timestamp", ascending: true },
  })

  
  // Parse basic transcript_json if no metrics are available
  const basicTranscript = useMemo(() => {
    if (!callData?.transcript_json || transcriptLogs?.length > 0) return null
    
    try {
      const transcript = Array.isArray(callData.transcript_json) 
        ? callData.transcript_json 
        : JSON.parse(callData.transcript_json)
      
      return transcript.map((item: any, index: number) => ({
        id: `basic-${index}`,
        role: item.role,
        content: item.content,
        timestamp: item.timestamp,
        turn_id: index + 1
      }))
    } catch (e) {
      console.error('Error parsing transcript_json:', e)
      return null
    }
  }, [callData?.transcript_json, transcriptLogs])
  
  // Calculate conversation metrics
  const conversationMetrics = useMemo(() => {
    if (!transcriptLogs?.length) return null
  
    const metrics = {
      stt: [] as number[],
      llm: [] as number[],
      tts: [] as number[],
      eou: [] as number[],
      agentResponseLatencies: [] as number[],
      totalTurnLatencies: [] as number[], // NEW: Complete turn latency
      endToEndLatencies: [] as number[], // NEW: User speak to agent speak
      totalTurns: transcriptLogs.length,
    }
  
    transcriptLogs.forEach((log: TranscriptLog) => {
      // Individual component latencies
      if (log.stt_metrics?.duration) metrics.stt.push(log.stt_metrics.duration)
      if (log.llm_metrics?.ttft) metrics.llm.push(log.llm_metrics.ttft)
      if (log.tts_metrics?.ttfb) metrics.tts.push(log.tts_metrics.ttfb)
      if (log.eou_metrics?.end_of_utterance_delay) metrics.eou.push(log.eou_metrics.end_of_utterance_delay)
  
      // CORRECTED: Agent response time should include TTS duration, not just TTFB
      if (log.user_transcript && log.agent_response && log.llm_metrics?.ttft && log.tts_metrics) {
        const llmTime = log.llm_metrics.ttft || 0
        const ttsTime = (log.tts_metrics.ttfb || 0) + (log.tts_metrics.duration || 0) // Include full TTS time
        const agentResponseTime = llmTime + ttsTime
        metrics.agentResponseLatencies.push(agentResponseTime)
      }
  
      // NEW: Calculate total turn latency (STT + LLM + TTS)
      if (log.stt_metrics && log.tts_metrics) {
        const sttTime = log.stt_metrics?.duration || 0
        const llmTime = log.llm_metrics?.ttft || 0
        const ttsTime = (log.tts_metrics?.ttfb || 0) + (log.tts_metrics?.duration || 0)
        const totalTurnTime = llmTime + ttsTime + sttTime

        if(totalTurnTime > 0)
        {
          metrics.totalTurnLatencies.push(totalTurnTime)
        }
      }
  
      // NEW: Calculate end-to-end latency (includes EOU detection)
      if (log.eou_metrics?.end_of_utterance_delay && log.stt_metrics?.duration && 
          log.llm_metrics?.ttft && log.tts_metrics) {
        const eouTime = log.eou_metrics.end_of_utterance_delay || 0
        const sttTime = log.stt_metrics.duration || 0
        const llmTime = log.llm_metrics.ttft || 0
        const ttsTime = (log.tts_metrics.ttfb || 0) + (log.tts_metrics.duration || 0)
        const endToEndTime = eouTime + sttTime + llmTime + ttsTime
        metrics.endToEndLatencies.push(endToEndTime)
      }
    })
  
    const calculateStats = (values: number[]) => {
      if (values.length === 0) return { avg: 0, min: 0, max: 0, count: 0, p95: 0 }
      const sorted = [...values].sort((a, b) => a - b)
      const avg = values.reduce((sum, val) => sum + val, 0) / values.length
      const min = Math.min(...values)
      const max = Math.max(...values)
      const p95Index = Math.floor(sorted.length * 0.95)
      const p95 = sorted[p95Index] || 0
      return { avg, min, max, count: values.length, p95 }
    }
  
    return {
      ...metrics,
      sttStats: calculateStats(metrics.stt),
      llmStats: calculateStats(metrics.llm),
      ttsStats: calculateStats(metrics.tts),
      eouStats: calculateStats(metrics.eou),
      agentResponseStats: calculateStats(metrics.agentResponseLatencies),
      totalTurnStats: calculateStats(metrics.totalTurnLatencies), // NEW
      endToEndStats: calculateStats(metrics.endToEndLatencies), // NEW
      
      // CORRECTED: Average total latency should be from actual turn calculations
      avgTotalLatency: calculateStats(metrics.totalTurnLatencies).avg,
      avgAgentResponseTime: calculateStats(metrics.agentResponseLatencies).avg,
      avgEndToEndLatency: calculateStats(metrics.endToEndLatencies).avg, // NEW
    }
  }, [transcriptLogs])


  console.log(conversationMetrics)
  
  // CORRECTED: Update the color thresholds and usage
  const getLatencyColor = (value: number, type: "stt" | "llm" | "tts" | "eou" | "total" | "e2e") => {
    const thresholds = {
      stt: { good: 1, fair: 2 },
      llm: { good: 1, fair: 3 },
      tts: { good: 1, fair: 2 },
      eou: { good: 0.5, fair: 1.5 }, // CORRECTED: EOU should be much faster
      total: { good: 3, fair: 6 },
      e2e: { good: 4, fair: 8 }, // NEW: End-to-end thresholds
    }
    const threshold = thresholds[type]
    if (value <= threshold.good) return "text-emerald-500"
    if (value <= threshold.fair) return "text-amber-500"
    return "text-red-500"
  }

  
  

  const formatTimestamp = (timestamp: number) => {
    const date = new Date(timestamp * 1000)
    return date.toLocaleString()
  }

  const formatDuration = (seconds: number) => {
    return `${seconds.toFixed(2)}s`
  }

  const formatConversationTime = (timestamp: number) => {
    if (!transcriptLogs?.length) return "00:00"
    const firstTimestamp = transcriptLogs[0].unix_timestamp
    const elapsed = timestamp - firstTimestamp
    const minutes = Math.floor(elapsed / 60)
    const seconds = Math.floor(elapsed % 60)
    return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`
  }

  const downloadTranscript = () => {
    if (!transcriptLogs?.length) return

    const transcriptText = transcriptLogs
      .map((log: TranscriptLog) => {
        const timestamp = formatConversationTime(log.unix_timestamp)
        let text = `[${timestamp}]\n`
        if (log.user_transcript) {
          text += `User: ${log.user_transcript}\n`
        }
        if (log.agent_response) {
          text += `Agent: ${log.agent_response}\n`
        }
        return text + "\n"
      })
      .join("")

    const blob = new Blob([transcriptText], { type: "text/plain" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `transcript-${callData.call_id}.txt`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  if (!isOpen) return null

  return (
    <TooltipProvider>
      {/* Backdrop */}
      <div
        className="fixed inset-0 bg-black/20 backdrop-blur-sm z-40 transition-opacity duration-300"
        onClick={onClose}
      />

      {/* Drawer */}
      <div className="fixed inset-y-0 right-0 w-[80%] bg-background border-l shadow-2xl z-50 transform transition-transform duration-300 ease-out flex flex-col">
        {/* Header */}
        <div className="flex-shrink-0 border-b p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-xl font-semibold">{callData.call_id}</h2>
              <p className="text-sm text-muted-foreground">
                {formatTimestamp(
                  callData.created_at ? new Date(callData.created_at).getTime() / 1000 : Date.now() / 1000,
                )}
              </p>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={downloadTranscript} disabled={!transcriptLogs?.length}>
                <Download className="w-4 h-4 mr-2" />
                Export
              </Button>
              <Button variant="ghost" size="sm" onClick={onClose}>
                <X className="w-4 h-4" />
              </Button>
            </div>
          </div>

          {/* Audio Player */}
          {callData.recording_url && (
            <div className="mb-6">
              <AudioPlayer s3Key={extractS3Key(callData.recording_url)} url={callData.recording_url} callId={callData.id} />
            </div>
          )}

          {/* Quick Stats */}
          <div className="grid grid-cols-3 gap-6">
            <div className="text-center">
              <div className="text-2xl font-bold">{transcriptLogs?.length || 0}</div>
              <div className="text-sm text-muted-foreground">Turns</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold">
                {Math.floor(callData.duration_seconds / 60)}:
                {(callData.duration_seconds % 60).toString().padStart(2, "0")}
              </div>
              <div className="text-sm text-muted-foreground">Duration</div>
            </div>
            <div className="text-center">
              <div
                className={cn(
                  "text-2xl font-bold",
                  conversationMetrics ? getLatencyColor(conversationMetrics.avgEndToEndLatency, "total") : "",
                )}
              >
                {conversationMetrics ? formatDuration(conversationMetrics.avgEndToEndLatency) : "N/A"}
              </div>
              <div className="text-sm text-muted-foreground">Avg Latency</div>
            </div>
          </div>

          {/* Performance Metrics - only show for metrics-based transcripts */}
          {conversationMetrics && transcriptLogs?.length > 0 && (
            <div className="mt-6">
              <h3 className="text-sm font-medium mb-3 text-muted-foreground">PERFORMANCE METRICS</h3>
              <div className="grid grid-cols-4 gap-4">
                <Tooltip>
                  <TooltipTrigger asChild>
                    <div className="text-center p-3 rounded-lg bg-muted/30 hover:bg-muted/50 transition-colors cursor-help">
                      <div
                        className={cn(
                          "text-lg font-semibold",
                          getLatencyColor(conversationMetrics.sttStats.avg, "stt"),
                        )}
                      >
                        {formatDuration(conversationMetrics.sttStats.avg)}
                      </div>
                      <div className="text-xs text-muted-foreground">STT</div>
                    </div>
                  </TooltipTrigger>
                  <TooltipContent>
                    <div className="text-center">
                      <div className="font-medium">Speech-to-Text</div>
                      <div className="text-xs text-muted-foreground">Time to convert speech to text</div>
                    </div>
                  </TooltipContent>
                </Tooltip>

                <Tooltip>
                  <TooltipTrigger asChild>
                    <div className="text-center p-3 rounded-lg bg-muted/30 hover:bg-muted/50 transition-colors cursor-help">
                      <div
                        className={cn(
                          "text-lg font-semibold",
                          getLatencyColor(conversationMetrics.llmStats.avg, "llm"),
                        )}
                      >
                        {formatDuration(conversationMetrics.llmStats.avg)}
                      </div>
                      <div className="text-xs text-muted-foreground">LLM</div>
                    </div>
                  </TooltipTrigger>
                  <TooltipContent>
                    <div className="text-center">
                      <div className="font-medium">Language Model</div>
                      <div className="text-xs text-muted-foreground">Time to generate response</div>
                    </div>
                  </TooltipContent>
                </Tooltip>

                <Tooltip>
                  <TooltipTrigger asChild>
                    <div className="text-center p-3 rounded-lg bg-muted/30 hover:bg-muted/50 transition-colors cursor-help">
                      <div
                        className={cn(
                          "text-lg font-semibold",
                          getLatencyColor(conversationMetrics.ttsStats.avg, "tts"),
                        )}
                      >
                        {formatDuration(conversationMetrics.ttsStats.avg)}
                      </div>
                      <div className="text-xs text-muted-foreground">TTS</div>
                    </div>
                  </TooltipTrigger>
                  <TooltipContent>
                    <div className="text-center">
                      <div className="font-medium">Text-to-Speech</div>
                      <div className="text-xs text-muted-foreground">Time to convert text to speech</div>
                    </div>
                  </TooltipContent>
                </Tooltip>

                <Tooltip>
                  <TooltipTrigger asChild>
                    <div className="text-center p-3 rounded-lg bg-muted/30 hover:bg-muted/50 transition-colors cursor-help">
                      <div
                        className={cn(
                          "text-lg font-semibold",
                          getLatencyColor(conversationMetrics.eouStats.avg, "eou"),
                        )}
                      >
                        {formatDuration(conversationMetrics.eouStats.avg)}
                      </div>
                      <div className="text-xs text-muted-foreground">EOU</div>
                    </div>
                  </TooltipTrigger>
                  <TooltipContent>
                    <div className="text-center">
                      <div className="font-medium">End of Utterance</div>
                      <div className="text-xs text-muted-foreground">Time to detect speech end</div>
                    </div>
                  </TooltipContent>
                </Tooltip>
              </div>
            </div>
          )}
        </div>

        {/* Transcript */}
        <div className="flex-1 flex flex-col min-h-0">
          <div className="p-4 border-b bg-muted/20">
            <h3 className="font-medium">Conversation Transcript</h3>
          </div>

          <div className="flex-1 overflow-y-auto">
            <div className="p-6">
              {loading ? (
                <div className="flex items-center justify-center py-12">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                </div>
              ) : error ? (
                <div className="text-center py-12 text-destructive">
                  <p>Error loading transcript: {error}</p>
                </div>
              ) : transcriptLogs?.length ? (
                <div className="space-y-6">
                  {/* Metrics-based transcript display */}
                  {transcriptLogs.map((log: TranscriptLog) => (
                    <div key={log.id} className="space-y-4">
                      {/* User Message */}
                      {log.user_transcript && (
                        <div className="flex gap-4 group">
                          <div className="flex-shrink-0 w-12 text-right">
                            <div className="text-xs text-muted-foreground font-mono">
                              {formatConversationTime(log.unix_timestamp)}
                            </div>
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <Badge variant="outline" className="text-xs">
                                User
                              </Badge>
                            </div>
                            <p className="text-sm leading-relaxed">{log.user_transcript}</p>

                            {/* User Metrics */}
                            <div className="flex gap-3 mt-2 opacity-0 group-hover:opacity-100 transition-opacity">
                              {log.stt_metrics && (
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <div className="flex items-center gap-1 text-xs text-muted-foreground cursor-help">
                                      <Mic className="w-3 h-3" />
                                      {formatDuration(log.stt_metrics.duration || 0)}
                                    </div>
                                  </TooltipTrigger>
                                  <TooltipContent>Speech-to-Text processing time</TooltipContent>
                                </Tooltip>
                              )}
                              {log.eou_metrics && (
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <div className="flex items-center gap-1 text-xs text-muted-foreground cursor-help">
                                      <Clock className="w-3 h-3" />
                                      {formatDuration(log.eou_metrics.end_of_utterance_delay || 0)}
                                    </div>
                                  </TooltipTrigger>
                                  <TooltipContent>End of utterance detection time</TooltipContent>
                                </Tooltip>
                              )}
                            </div>
                          </div>
                        </div>
                      )}

                      {/* Agent Response */}
                      {log.agent_response && (
                        <div className="flex gap-4 group">
                          <div className="flex-shrink-0 w-12 text-right">
                            <div className="text-xs text-muted-foreground font-mono">
                              {formatConversationTime(log.unix_timestamp + 1)}
                            </div>
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <Badge variant="secondary" className="text-xs">
                                Agent
                              </Badge>
                            </div>
                            <p className="text-sm leading-relaxed">{log.agent_response}</p>

                            {/* Agent Metrics */}
                            <div className="flex gap-3 mt-2 opacity-0 group-hover:opacity-100 transition-opacity">
                              {log.llm_metrics && log.tts_metrics && (
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <div
                                      className={cn(
                                        "flex items-center gap-1 text-xs cursor-help",
                                        getLatencyColor(
                                          (log.llm_metrics.ttft || 0) + (log.tts_metrics.ttfb || 0),
                                          "total",
                                        ),
                                      )}
                                    >
                                      <Activity className="w-3 h-3" />
                                      {formatDuration((log.llm_metrics.ttft || 0) + (log.tts_metrics.ttfb || 0))}
                                    </div>
                                  </TooltipTrigger>
                                  <TooltipContent>Total response time (LLM + TTS)</TooltipContent>
                                </Tooltip>
                              )}
                              {log.llm_metrics && (
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <div
                                      className={cn(
                                        "flex items-center gap-1 text-xs cursor-help",
                                        getLatencyColor(log.llm_metrics.ttft || 0, "llm"),
                                      )}
                                    >
                                      <Brain className="w-3 h-3" />
                                      {formatDuration(log.llm_metrics.ttft || 0)}
                                    </div>
                                  </TooltipTrigger>
                                  <TooltipContent>Language model processing time</TooltipContent>
                                </Tooltip>
                              )}
                              {log.tts_metrics && (
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <div
                                      className={cn(
                                        "flex items-center gap-1 text-xs cursor-help",
                                        getLatencyColor(log.tts_metrics.ttfb || 0, "tts"),
                                      )}
                                    >
                                      <Volume2 className="w-3 h-3" />
                                      {formatDuration(log.tts_metrics.ttfb || 0)}
                                    </div>
                                  </TooltipTrigger>
                                  <TooltipContent>Text-to-speech processing time</TooltipContent>
                                </Tooltip>
                              )}
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              ) : basicTranscript?.length ? (
                <div className="space-y-6">
                  {/* Basic transcript display */}
                  <div className="mb-4 p-3 bg-blue-50 rounded-lg">
                    <p className="text-blue-800 text-sm font-medium">Basic Transcript</p>
                    <p className="text-blue-700 text-xs">Simple conversation format without detailed metrics</p>
                  </div>
                  {basicTranscript.map((item: any) => (
                    <div key={item.id} className="space-y-4">
                      <div className="flex gap-4">
                        <div className="flex-shrink-0 w-12 text-right">
                          <div className="text-xs text-muted-foreground font-mono">
                            {item.timestamp ? new Date(item.timestamp * 1000).toLocaleTimeString([], { 
                              hour: '2-digit', 
                              minute: '2-digit', 
                              second: '2-digit' 
                            }) : `${item.id}`}
                          </div>
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <Badge variant={item.role === 'user' ? 'outline' : 'secondary'} className="text-xs">
                              {item.role === 'user' ? 'User' : item.role === 'assistant' ? 'Assistant' : item.role}
                            </Badge>
                          </div>
                          <p className="text-sm leading-relaxed">{item.content}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 text-muted-foreground">
                  <Bot className="w-12 h-12 mx-auto mb-4 opacity-50" />
                  <p className="mb-2">No conversation transcript available for this call</p>
                  <p className="text-xs">Make sure to include either transcript_json or transcript_with_metrics in your API requests</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </TooltipProvider>
  )
}

export default CallDetailsDrawer
</file>

<file path="src/components/campaigns/CampaignDialog.tsx">
"use client"

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { 
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import { Loader2, CheckCircle, Upload, Calendar, Clock, RotateCcw, Rocket } from 'lucide-react'

interface CampaignDialogProps {
  isOpen: boolean
  onClose: () => void
  onCampaignCreated?: (campaignData: any) => void
  agent: any
}

const CampaignDialog: React.FC<CampaignDialogProps> = ({ 
  isOpen, 
  onClose, 
  onCampaignCreated,
  agent
}) => {
  const [currentStep, setCurrentStep] = useState<'form' | 'success'>('form')
  const [formData, setFormData] = useState({
    start_date: '',
    end_date: '',
    start_time: '09:00',
    end_time: '17:00',
    concurrency: 10,
    retry_config: {
      '408': 60,  // Request Timeout
      '480': 60,  // Temporarily Unavailable
      '486': 120, // Busy Here
      '504': 60,  // Server Timeout
      '600': 120  // Busy Everywhere
    }
  })
  
  const [csvFile, setCsvFile] = useState<File | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [campaignResult, setCampaignResult] = useState<any>(null)

  // Set default dates to today and tomorrow
  React.useEffect(() => {
    const today = new Date()
    const tomorrow = new Date(today)
    tomorrow.setDate(tomorrow.getDate() + 1)
    
    setFormData(prev => ({
      ...prev,
      start_date: today.toISOString().split('T')[0],
      end_date: tomorrow.toISOString().split('T')[0]
    }))
  }, [])

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      if (file.type !== 'text/csv' && !file.name.endsWith('.csv')) {
        setError('Please select a CSV file')
        return
      }
      setCsvFile(file)
      setError(null)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.start_date || !formData.end_date) {
      setError('Start date and end date are required')
      return
    }

    if (!csvFile) {
      setError('Please select a CSV file')
      return
    }

    // Validate retry configuration
    const retryValues = Object.values(formData.retry_config)
    if (retryValues.some(val => val < 1 || val > 1440)) {
      setError('Retry intervals must be between 1 and 1440 minutes (24 hours)')
      return
    }
    
    setLoading(true)
    setError(null)
    
    try {
      // Create campaign using the unified API
      const campaignFormData = new FormData()
      
      // Add all form fields to FormData
      campaignFormData.append('project_id', agent.project_id)
      campaignFormData.append('start_date', formData.start_date)
      campaignFormData.append('end_date', formData.end_date)
      campaignFormData.append('start_time', formData.start_time)
      campaignFormData.append('end_time', formData.end_time)
      campaignFormData.append('concurrency', formData.concurrency.toString())
      campaignFormData.append('retry_config', JSON.stringify(formData.retry_config))
      campaignFormData.append('csv_file', csvFile)
      
      const response = await fetch('/api/campaign', {
        method: 'POST',
        body: campaignFormData,
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to create campaign')
      }

      const result = await response.json()
      setCampaignResult(result)
      setCurrentStep('success')
      
    } catch (err: unknown) {
      console.error('Error creating campaign:', err)
      const errorMessage = err instanceof Error ? err.message : 'Failed to create campaign'
      setError(errorMessage)
    } finally {
      setLoading(false)
    }
  }

  const handleClose = () => {
    if (!loading) {
      // Reset all state
      setCurrentStep('form')
      setFormData({
        start_date: '',
        end_date: '',
        start_time: '09:00',
        end_time: '17:00',
        concurrency: 10,
        retry_config: {
          '408': 60,
          '480': 60,
          '486': 120,
          '504': 60,
          '600': 120
        }
      })
      setCsvFile(null)
      setError(null)
      setCampaignResult(null)
      onClose()
    }
  }

  const handleFinish = () => {
    // Call success callback with the campaign result
    if (onCampaignCreated) {
      onCampaignCreated(campaignResult)
    }
    handleClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[600px] p-0 gap-0 rounded-xl border shadow-2xl max-h-[90vh] overflow-y-auto">
        {currentStep === 'form' ? (
          <>
            {/* Header */}
            <DialogHeader className="px-6 pt-6 pb-4 text-center">
              <DialogTitle className="text-xl font-semibold text-gray-900 mb-1 flex items-center justify-center gap-2">
                <Rocket className="w-5 h-5" />
                Run Campaign
              </DialogTitle>
              <p className="text-sm text-gray-600 font-normal">
                Configure and launch a campaign for "{agent?.name}"
              </p>
            </DialogHeader>

            {/* Form */}
            <div className="px-6 pb-6">
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Campaign Schedule */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-gray-900 flex items-center gap-2">
                    <span className="w-6 h-6 bg-blue-100 text-blue-700 rounded-full flex items-center justify-center text-sm font-semibold">1</span>
                    <Calendar className="w-4 h-4" />
                    Campaign Schedule
                  </h3>
                  
                  <div className="grid grid-cols-2 gap-4">
                    {/* Start Date */}
                    <div>
                      <label htmlFor="start-date" className="block text-sm font-medium text-gray-700 mb-2">
                        Start Date
                      </label>
                      <Input
                        id="start-date"
                        type="date"
                        value={formData.start_date}
                        onChange={(e) => setFormData({ ...formData, start_date: e.target.value })}
                        disabled={loading}
                        className="h-11 px-4 text-sm border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all"
                      />
                    </div>

                    {/* End Date */}
                    <div>
                      <label htmlFor="end-date" className="block text-sm font-medium text-gray-700 mb-2">
                        End Date
                      </label>
                      <Input
                        id="end-date"
                        type="date"
                        value={formData.end_date}
                        onChange={(e) => setFormData({ ...formData, end_date: e.target.value })}
                        disabled={loading}
                        className="h-11 px-4 text-sm border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    {/* Start Time */}
                    <div>
                      <label htmlFor="start-time" className="block text-sm font-medium text-gray-700 mb-2">
                        <Clock className="w-4 h-4 inline mr-1" />
                        Start Time <span className="text-gray-500 text-xs">(24-hour format)</span>
                      </label>
                      <Input
                        id="start-time"
                        type="time"
                        value={formData.start_time}
                        onChange={(e) => setFormData({ ...formData, start_time: e.target.value })}
                        disabled={loading}
                        placeholder="09:00"
                        step="300"
                        className="h-11 px-4 text-sm border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all font-mono"
                      />
                    </div>

                    {/* End Time */}
                    <div>
                      <label htmlFor="end-time" className="block text-sm font-medium text-gray-700 mb-2">
                        <Clock className="w-4 h-4 inline mr-1" />
                        End Time <span className="text-gray-500 text-xs">(24-hour format)</span>
                      </label>
                      <Input
                        id="end-time"
                        type="time"
                        value={formData.end_time}
                        onChange={(e) => setFormData({ ...formData, end_time: e.target.value })}
                        disabled={loading}
                        placeholder="17:00"
                        step="300"
                        className="h-11 px-4 text-sm border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all font-mono"
                      />
                    </div>
                  </div>

                  {/* Concurrency */}
                  <div>
                    <label htmlFor="concurrency" className="block text-sm font-medium text-gray-700 mb-2">
                      Concurrency (simultaneous calls)
                    </label>
                    <Input
                      id="concurrency"
                      type="number"
                      min="1"
                      max="100"
                      value={formData.concurrency}
                      onChange={(e) => setFormData({ ...formData, concurrency: parseInt(e.target.value) || 1 })}
                      disabled={loading}
                      className="h-11 px-4 text-sm border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all"
                    />
                  </div>
                </div>

                {/* Retry Configuration */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-gray-900 flex items-center gap-2">
                    <span className="w-6 h-6 bg-blue-100 text-blue-700 rounded-full flex items-center justify-center text-sm font-semibold">2</span>
                    <RotateCcw className="w-4 h-4" />
                    Retry Configuration
                  </h3>
                  
                  <div className="grid grid-cols-1 gap-4">
                    <p className="text-sm text-gray-600">Configure retry intervals (in minutes) for different call failure types:</p>
                    
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      {/* Request Timeout (408) */}
                      <div>
                        <label htmlFor="retry-408" className="block text-sm font-medium text-gray-700 mb-2">
                          Request Timeout (408)
                        </label>
                        <Input
                          id="retry-408"
                          type="number"
                          min="1"
                          max="1440"
                          value={formData.retry_config['408']}
                          onChange={(e) => setFormData({ 
                            ...formData, 
                            retry_config: { 
                              ...formData.retry_config, 
                              '408': parseInt(e.target.value) || 1 
                            }
                          })}
                          disabled={loading}
                          placeholder="Minutes"
                          className="h-11 px-4 text-sm border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all"
                        />
                      </div>

                      {/* Temporarily Unavailable (480) */}
                      <div>
                        <label htmlFor="retry-480" className="block text-sm font-medium text-gray-700 mb-2">
                          No Answer (480)
                        </label>
                        <Input
                          id="retry-480"
                          type="number"
                          min="1"
                          max="1440"
                          value={formData.retry_config['480']}
                          onChange={(e) => setFormData({ 
                            ...formData, 
                            retry_config: { 
                              ...formData.retry_config, 
                              '480': parseInt(e.target.value) || 1 
                            }
                          })}
                          disabled={loading}
                          placeholder="Minutes"
                          className="h-11 px-4 text-sm border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all"
                        />
                      </div>

                      {/* Busy Here (486) */}
                      <div>
                        <label htmlFor="retry-486" className="block text-sm font-medium text-gray-700 mb-2">
                          User Busy (486)
                        </label>
                        <Input
                          id="retry-486"
                          type="number"
                          min="1"
                          max="1440"
                          value={formData.retry_config['486']}
                          onChange={(e) => setFormData({ 
                            ...formData, 
                            retry_config: { 
                              ...formData.retry_config, 
                              '486': parseInt(e.target.value) || 1 
                            }
                          })}
                          disabled={loading}
                          placeholder="Minutes"
                          className="h-11 px-4 text-sm border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all"
                        />
                      </div>

                      {/* Server Timeout (504) */}
                      <div>
                        <label htmlFor="retry-504" className="block text-sm font-medium text-gray-700 mb-2">
                          Server Timeout (504)
                        </label>
                        <Input
                          id="retry-504"
                          type="number"
                          min="1"
                          max="1440"
                          value={formData.retry_config['504']}
                          onChange={(e) => setFormData({ 
                            ...formData, 
                            retry_config: { 
                              ...formData.retry_config, 
                              '504': parseInt(e.target.value) || 1 
                            }
                          })}
                          disabled={loading}
                          placeholder="Minutes"
                          className="h-11 px-4 text-sm border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all"
                        />
                      </div>

                      {/* Busy Everywhere (600) */}
                      <div>
                        <label htmlFor="retry-600" className="block text-sm font-medium text-gray-700 mb-2">
                          Busy Everywhere (600)
                        </label>
                        <Input
                          id="retry-600"
                          type="number"
                          min="1"
                          max="1440"
                          value={formData.retry_config['600']}
                          onChange={(e) => setFormData({ 
                            ...formData, 
                            retry_config: { 
                              ...formData.retry_config, 
                              '600': parseInt(e.target.value) || 1 
                            }
                          })}
                          disabled={loading}
                          placeholder="Minutes"
                          className="h-11 px-4 text-sm border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all"
                        />
                      </div>
                    </div>

                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                      <p className="text-xs text-yellow-800">
                        <strong>Note:</strong> Retry intervals determine how long to wait before retrying a failed call. 
                        Set higher values for busy/unavailable scenarios and lower values for timeouts.
                      </p>
                    </div>
                  </div>
                </div>

                {/* CSV Upload */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-gray-900 flex items-center gap-2">
                    <span className="w-6 h-6 bg-blue-100 text-blue-700 rounded-full flex items-center justify-center text-sm font-semibold">3</span>
                    <Upload className="w-4 h-4" />
                    Campaign Data
                  </h3>
                  
                  <div>
                    <label htmlFor="csv-file" className="block text-sm font-medium text-gray-700 mb-2">
                      Upload CSV File
                      <span className="text-red-500 ml-1">*</span>
                    </label>
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors">
                      <input
                        id="csv-file"
                        type="file"
                        accept=".csv"
                        onChange={handleFileChange}
                        disabled={loading}
                        className="hidden"
                      />
                      <label 
                        htmlFor="csv-file" 
                        className="cursor-pointer block"
                      >
                        <Upload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                        {csvFile ? (
                          <p className="text-sm font-medium text-gray-900">
                            {csvFile.name}
                          </p>
                        ) : (
                          <p className="text-sm text-gray-600">
                            Click to select CSV file or drag and drop
                          </p>
                        )}
                        <p className="text-xs text-gray-500 mt-1">
                          CSV file with phoneNumber, fpoName, fpoLoginId, alternative_number columns
                        </p>
                      </label>
                    </div>
                  </div>
                </div>

                {/* Error Message */}
                {error && (
                  <div className="p-3 rounded-lg bg-red-50 border border-red-200">
                    <span className="text-sm text-red-700 font-medium">{error}</span>
                  </div>
                )}

                {/* Actions */}
                <div className="flex gap-3 pt-4">
                  <Button 
                    type="button" 
                    variant="outline"
                    onClick={handleClose}
                    disabled={loading}
                    className="flex-1 h-11 font-medium text-gray-700 border-gray-300 hover:bg-gray-50 rounded-lg"
                  >
                    Cancel
                  </Button>
                  <Button 
                    type="submit"
                    disabled={loading || !csvFile}
                    className="flex-1 h-11 text-white rounded-lg font-medium shadow-sm disabled:bg-gray-300 disabled:text-gray-500 transition-all"
                  >
                    {loading ? (
                      <>
                        <Loader2 className="w-4 h-4 animate-spin mr-2" />
                        Launching Campaign...
                      </>
                    ) : (
                      <>
                        <Rocket className="w-4 h-4 mr-2" />
                        Launch Campaign
                      </>
                    )}
                  </Button>
                </div>
              </form>
            </div>
          </>
        ) : (
          <>
            {/* Success Header */}
            <DialogHeader className="px-6 pt-6 pb-4 text-center">
              <div className="w-12 h-12 mx-auto mb-4 bg-green-100 rounded-full flex items-center justify-center">
                <CheckCircle className="w-6 h-6 text-green-600" />
              </div>
              <DialogTitle className="text-xl font-semibold text-gray-900 mb-1">
                Campaign Launched Successfully!
              </DialogTitle>
              <p className="text-sm text-gray-600 font-normal">
                Your campaign for "{agent?.name}" has been launched and scheduled
              </p>
            </DialogHeader>

            {/* Success Content */}
            <div className="px-6 pb-6 space-y-4">
              {/* Campaign Details */}
              {campaignResult?.campaign && (
                <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <h4 className="font-medium text-blue-900 text-sm mb-2 flex items-center gap-2">
                    <Rocket className="w-4 h-4" />
                    Campaign Details
                  </h4>
                  <div className="space-y-1 text-xs">
                    <div className="flex justify-between">
                      <span className="text-blue-700">Period:</span>
                      <span className="text-blue-900">
                        {campaignResult.campaign.start_date} to {campaignResult.campaign.end_date}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-blue-700">Time:</span>
                      <span className="text-blue-900">
                        {campaignResult.campaign.start_time} - {campaignResult.campaign.end_time}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-blue-700">Calls:</span>
                      <span className="text-blue-900">{campaignResult.campaign.call_count} contacts</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-blue-700">Concurrency:</span>
                      <span className="text-blue-900">{campaignResult.campaign.concurrency} simultaneous</span>
                    </div>
                  </div>
                </div>
              )}

              {/* Success Note */}
              <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                <p className="text-xs text-green-800">
                  <strong>Success:</strong> Your campaign has been scheduled and will run automatically according to the configured schedule. You can monitor progress in the call logs.
                </p>
              </div>

              {/* Finish Button */}
              <div className="pt-4">
                <Button 
                  onClick={handleFinish}
                  className="w-full h-11 text-white rounded-lg font-medium shadow-sm"
                >
                  View Campaign Progress
                </Button>
              </div>
            </div>
          </>
        )}
      </DialogContent>
    </Dialog>
  )
}

export default CampaignDialog
</file>

<file path="src/components/projects/ProjectCreationDialog.tsx">
"use client"

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { 
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import { Loader2, Copy, Eye, EyeOff, CheckCircle } from 'lucide-react'

interface ProjectCreationDialogProps {
  isOpen: boolean
  onClose: () => void
  onProjectCreated: (project: any) => void
}

const ProjectCreationDialog: React.FC<ProjectCreationDialogProps> = ({ 
  isOpen, 
  onClose, 
  onProjectCreated 
}) => {
  const [currentStep, setCurrentStep] = useState<'form' | 'success'>('form')
  const [formData, setFormData] = useState({
    name: '',
    description: ''
  })
  
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [createdProjectData, setCreatedProjectData] = useState<any>(null)
  const [showToken, setShowToken] = useState(false)
  const [tokenCopied, setTokenCopied] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.name.trim()) {
      setError('Project name is required')
      return
    }
    
    setLoading(true)
    setError(null)
    
    try {
      const response = await fetch('/api/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: formData.name.trim(),
          description: formData.description.trim() || null,
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to create project')
      }

      const data = await response.json()
      setCreatedProjectData(data)
      setCurrentStep('success')
      
    } catch (err: unknown) {
      console.error('Error creating project:', err)
      const errorMessage = err instanceof Error ? err.message : 'Failed to create project'
      setError(errorMessage)
    } finally {
      setLoading(false)
    }
  }

  const handleCopyToken = async () => {
    if (createdProjectData?.api_token) {
      try {
        await navigator.clipboard.writeText(createdProjectData.api_token)
        setTokenCopied(true)
        setTimeout(() => setTokenCopied(false), 2000)
      } catch (err) {
        console.error('Failed to copy token:', err)
      }
    }
  }

  const handleClose = () => {
    if (!loading) {
      // Reset all state
      setCurrentStep('form')
      setFormData({
        name: '',
        description: ''
      })
      setError(null)
      setCreatedProjectData(null)
      setShowToken(false)
      setTokenCopied(false)
      onClose()
    }
  }

  const handleFinish = () => {
    // Call success callback with the created project
    onProjectCreated(createdProjectData)
    handleClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[500px] p-0 gap-0 rounded-xl border shadow-2xl">
        {currentStep === 'form' ? (
          <>
            {/* Header */}
            <DialogHeader className="px-6 pt-6 pb-4 text-center">
              <DialogTitle className="text-xl font-semibold text-gray-900 mb-1">
                Create New Project
              </DialogTitle>
              <p className="text-sm text-gray-600 font-normal">
                Set up your voice AI project with automatic API token generation
              </p>
            </DialogHeader>

            {/* Form */}
            <div className="px-6 pb-6">
              <form onSubmit={handleSubmit} className="space-y-4">
                {/* Project Name */}
                <div>
                  <label htmlFor="project-name" className="block text-sm font-medium text-gray-700 mb-2">
                    Project Name
                  </label>
                  <Input
                    id="project-name"
                    placeholder="Enter project name"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    disabled={loading}
                    className="h-11 px-4 text-sm border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all"
                  />
                </div>

                {/* Description */}
                <div>
                  <label htmlFor="project-description" className="block text-sm font-medium text-gray-700 mb-2">
                    Description
                    <span className="text-gray-400 font-normal ml-1">(optional)</span>
                  </label>
                  <textarea
                    id="project-description"
                    placeholder="Brief description of your project..."
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    disabled={loading}
                    rows={3}
                    className="w-full px-4 py-3 text-sm border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 focus:outline-none resize-none transition-all placeholder:text-gray-400"
                  />
                </div>

                {/* Error Message */}
                {error && (
                  <div className="p-3 rounded-lg bg-red-50 border border-red-200">
                    <span className="text-sm text-red-700 font-medium">{error}</span>
                  </div>
                )}

                {/* Actions */}
                <div className="flex gap-3 pt-4">
                  <Button 
                    type="button" 
                    variant="outline"
                    onClick={handleClose}
                    disabled={loading}
                    className="flex-1 h-11 font-medium text-gray-700 border-gray-300 hover:bg-gray-50 rounded-lg"
                  >
                    Cancel
                  </Button>
                  <Button 
                    type="submit"
                    disabled={loading || !formData.name.trim()}
                    className="flex-1 h-11 text-white rounded-lg font-medium shadow-sm disabled:bg-gray-300 disabled:text-gray-500 transition-all"
                  >
                    {loading ? (
                      <Loader2 className="w-4 h-4 animate-spin" />
                    ) : (
                      'Create Project'
                    )}
                  </Button>
                </div>
              </form>
            </div>
          </>
        ) : (
          <>
            {/* Success Header */}
            <DialogHeader className="px-6 pt-6 pb-4 text-center">
              <div className="w-12 h-12 mx-auto mb-4 bg-green-100 rounded-full flex items-center justify-center">
                <CheckCircle className="w-6 h-6 text-green-600" />
              </div>
              <DialogTitle className="text-xl font-semibold text-gray-900 mb-1">
                Project Created Successfully!
              </DialogTitle>
              <p className="text-sm text-gray-600 font-normal">
                Your project "{createdProjectData?.name}" has been created with API access
              </p>
            </DialogHeader>

            {/* Success Content */}
            <div className="px-6 pb-6 space-y-4">
              {/* API Token */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  API Token
                </label>
                <div className="relative">
                  <input
                    type={showToken ? 'text' : 'password'}
                    value={createdProjectData?.api_token || ''}
                    readOnly
                    className="w-full h-11 px-4 pr-20 text-sm border border-gray-300 rounded-lg bg-gray-50 font-mono"
                  />
                  <div className="absolute right-2 top-1/2 -translate-y-1/2 flex gap-1">
                    <Button
                      type="button"
                      size="sm"
                      variant="ghost"
                      onClick={() => setShowToken(!showToken)}
                      className="h-7 w-7 p-0"
                    >
                      {showToken ? <EyeOff className="w-3 h-3" /> : <Eye className="w-3 h-3" />}
                    </Button>
                    <Button
                      type="button"
                      size="sm"
                      variant="ghost"
                      onClick={handleCopyToken}
                      className="h-7 w-7 p-0"
                    >
                      <Copy className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
                {tokenCopied && (
                  <p className="text-xs text-green-600 mt-1">Token copied to clipboard!</p>
                )}
              </div>

              {/* Warning */}
              <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <p className="text-xs text-yellow-800">
                  <strong>Important:</strong> This token will only be shown once. Please save it in a secure location.
                  You can regenerate it later if needed.
                </p>
              </div>

              {/* Project Details */}
              <div className="p-3 bg-gray-50 rounded-lg">
                <h4 className="font-medium text-gray-900 text-sm mb-2">Project Details</h4>
                <div className="space-y-1 text-xs">
                  <div className="flex justify-between">
                    <span className="text-gray-600">ID:</span>
                    <span className="font-mono text-gray-800">{createdProjectData?.id}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Environment:</span>
                    <span className="text-gray-800">{createdProjectData?.environment}</span>
                  </div>
                </div>
              </div>

              {/* Finish Button */}
              <div className="pt-4">
                <Button 
                  onClick={handleFinish}
                  className="w-full h-11 text-white rounded-lg font-medium shadow-sm"
                >
                  Continue to Project
                </Button>
              </div>
            </div>
          </>
        )}
      </DialogContent>
    </Dialog>
  )
}

export default ProjectCreationDialog
</file>

<file path="src/components/projects/ProjectSelection.tsx">
'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import TokenRegenerationConfirmDialog from '../TokenRegenerationConfirmDialog'
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu'
import { ChevronRight, Settings, Loader2, AlertCircle, Search, Plus, FolderOpen, MoreHorizontal, Trash2, Key, Copy, Eye, EyeOff, RefreshCw, Users, Clock, Filter, SortDesc, Grid3X3, List, ExternalLink, Building2, Folder } from 'lucide-react'
import { useSupabaseQuery } from '../../hooks/useSupabase'
import ProjectCreationDialog from './ProjectCreationDialog'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog'
import MemberManagementDialog from '../MemberManagmentDialog'
import Header from '../shared/Header'

interface Project {
  id: string
  name: string
  description: string
  environment: string
  created_at: string
  is_active: boolean
  token_hash?: string
  agent_count?: number // Adding agent count for workspace context
}

interface ProjectSelectionProps {}

const ProjectSelection: React.FC<ProjectSelectionProps> = () => {
  const [selectedProject, setSelectedProject] = useState<string | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [showCreateDialog, setShowCreateDialog] = useState(false)
  const [deletingProject, setDeletingProject] = useState<string | null>(null)
  const [showDeleteConfirm, setShowDeleteConfirm] = useState<Project | null>(null)
  const [showTokenDialog, setShowTokenDialog] = useState<Project | null>(null)
  const [regeneratedToken, setRegeneratedToken] = useState<string | null>(null)
  const [regeneratingToken, setRegeneratingToken] = useState<string | null>(null)
  const [membersDialog, setShowAddMemberDialog] = useState<boolean>(false)
  const [showToken, setShowToken] = useState(false)
  const [tokenCopied, setTokenCopied] = useState(false)
  const [projectSelected, setSelectedProjectForDialog] = useState<any>(null)
  const [showRegenerateConfirm, setShowRegenerateConfirm] = useState<Project | null>(null)
  const [projects, setProjects] = useState<Project[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  const router = useRouter()

  const fetchProjects = async () => {
    setLoading(true)
    setError(null)
    try {
      const res = await fetch('/api/projects')
      if (!res.ok) throw new Error('Failed to fetch projects')
      const data = await res.json()
      setProjects(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error')
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchProjects()
  }, [])

  const refetch = fetchProjects

  const handleProjectClick = (project: Project) => {
    setSelectedProject(project.id)
    setTimeout(() => {
      router.push(`/${project.id}/agents`)
    }, 150)
  }

  const handleCreateProject = () => {
    setShowCreateDialog(true)
  }

  const handleProjectCreated = (newProject: Project) => {
    refetch()
    setTimeout(() => {
      router.push(`/${newProject.id}/agents`)
    }, 500)
  }

  const handleDeleteProject = async (project: Project) => {
    setDeletingProject(project.id)
    try {
      const response = await fetch(`/api/projects/${project.id}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
      })
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to delete workspace')
      }
      refetch()
      setShowDeleteConfirm(null)
    } catch (error: unknown) {
      console.error('Error deleting workspace:', error)
      const errorMessage = error instanceof Error ? error.message : 'Failed to delete workspace'
      alert(`Failed to delete workspace: ${errorMessage}`)
    } finally {
      setDeletingProject(null)
    }
  }

  const handleRegenerateToken = async (project: Project) => {
    setRegeneratingToken(project.id)
    try {
      const response = await fetch(`/api/projects/${project.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'regenerate_token' }),
      })
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to regenerate token')
      }
      const result = await response.json()
      setRegeneratedToken(result.api_token)
      setShowTokenDialog(project)
      setShowRegenerateConfirm(null)
      refetch()
    } catch (error: unknown) {
      console.error('Error regenerating token:', error)
      const errorMessage = error instanceof Error ? error.message : 'Failed to regenerate token'
      alert(`Failed to regenerate token: ${errorMessage}`)
    } finally {
      setRegeneratingToken(null)
    }
  }

  const handleCopyToken = async () => {
    if (regeneratedToken) {
      try {
        await navigator.clipboard.writeText(regeneratedToken)
        setTokenCopied(true)
        setTimeout(() => setTokenCopied(false), 2000)
      } catch (err) {
        console.error('Failed to copy token:', err)
      }
    }
  }

  const handleCloseTokenDialog = () => {
    setShowTokenDialog(null)
    setRegeneratedToken(null)
    setShowToken(false)
    setTokenCopied(false)
  }

  const getWorkspaceInitials = (name: string) => {
    return name.split(' ').map(word => word[0]).join('').toUpperCase().slice(0, 2)
  }

  const getEnvironmentColor = (environment: string) => {
    switch (environment.toLowerCase()) {
      case 'production':
      case 'prod':
        return 'bg-red-50 text-red-700 border-red-200'
      case 'staging':
      case 'stage':
        return 'bg-yellow-50 text-yellow-700 border-yellow-200'
      case 'development':
      case 'dev':
        return 'bg-blue-50 text-blue-700 border-blue-200'
      default:
        return 'bg-gray-50 text-gray-700 border-gray-200'
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric', 
      year: 'numeric' 
    })
  }

  const filteredProjects = projects?.filter(project =>
    project.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    (project.description && project.description.toLowerCase().includes(searchQuery.toLowerCase()))
  ) || []

  if (loading) {
    return (
      <div className="min-h-screen bg-project-gradient">
        <div className="absolute inset-0 bg-subtle-pattern opacity-60"></div>
        <div className="relative z-10">
          <Header />
          <div className="flex items-center justify-center py-32">
            <div className="text-center space-y-4">
              <div className="w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto"></div>
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-gray-900">Loading workspaces</h3>
                <p className="text-xs text-gray-500">This should only take a moment</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-project-gradient">
        <div className="absolute inset-0 bg-subtle-pattern opacity-60"></div>
        <div className="relative z-10">
          <Header />
          <div className="flex items-center justify-center py-32">
            <div className="text-center space-y-6 max-w-sm">
              <div className="w-12 h-12 bg-red-50 rounded-full flex items-center justify-center mx-auto">
                <AlertCircle className="w-6 h-6 text-red-600" />
              </div>
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-gray-900">Failed to load workspaces</h3>
                <p className="text-xs text-gray-500">{error}</p>
              </div>
              <Button 
                onClick={() => window.location.reload()} 
                size="sm"
                className="bg-blue-600 hover:bg-blue-700 text-white text-xs px-4 py-2"
              >
                Try again
              </Button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-project-gradient">
      <div className="absolute inset-0 bg-subtle-pattern opacity-60"></div>
      <div className="relative z-10">
        <Header />
        
        <main className="max-w-[1400px] mx-auto px-6 py-8">
          {/* Updated Header */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-6">
              <div>
                <div className="flex items-center gap-3 mb-2">
                  <h1 className="text-2xl font-semibold text-gray-900">Workspaces</h1>
                </div>
                <p className="text-sm text-gray-600">
                  Organize your voice agents by department or team. Each workspace provides isolated access control and dedicated analytics.
                </p>
              </div>
              <Button 
                onClick={handleCreateProject}
                className="bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-2.5 text-sm"
              >
                <Plus className="w-4 h-4 mr-2" />
                New Workspace
              </Button>
            </div>

            {/* Controls */}
            <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400" />
                  <input
                    type="search"
                    placeholder="Search workspaces..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-80 pl-10 pr-4 py-2.5 text-sm border border-gray-200 rounded-lg bg-white placeholder:text-gray-500 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none transition-all"
                  />
                </div>
                <Button variant="outline" size="sm" className="text-gray-600 border-gray-200 hover:bg-gray-50">
                  <Filter className="w-4 h-4 mr-2" />
                  Filter
                </Button>
                <Button variant="outline" size="sm" className="text-gray-600 border-gray-200 hover:bg-gray-50">
                  <SortDesc className="w-4 h-4 mr-2" />
                  Sort
                </Button>
              </div>
              
              <div className="flex items-center gap-3">
                <div className="flex items-center border border-gray-200 rounded-lg p-1 bg-gray-50">
                  <Button
                    variant={viewMode === 'grid' ? 'default' : 'ghost'}
                    size="sm"
                    onClick={() => setViewMode('grid')}
                    className={`w-8 h-8 p-0 ${viewMode === 'grid' ? 'bg-white shadow-sm text-gray-900' : 'text-gray-500 hover:text-gray-700 hover:bg-transparent'}`}
                  >
                    <Grid3X3 className="w-4 h-4" />
                  </Button>
                  <Button
                    variant={viewMode === 'list' ? 'default' : 'ghost'}
                    size="sm"
                    onClick={() => setViewMode('list')}
                    className={`w-8 h-8 p-0 ${viewMode === 'list' ? 'bg-white shadow-sm text-gray-900' : 'text-gray-500 hover:text-gray-700 hover:bg-transparent'}`}
                  >
                    <List className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </div>
          </div>

          {/* Workspace Grid */}
          <div className={`grid gap-4 ${viewMode === 'grid' ? 'grid-cols-1 lg:grid-cols-2 xl:grid-cols-3' : 'grid-cols-1'}`}>
            {filteredProjects.map((project) => (
              <Card
                key={project.id}
                className={`group bg-white/80 backdrop-blur-sm border border-gray-200/60 hover:border-gray-300 hover:shadow-lg hover:bg-white transition-all duration-200 cursor-pointer ${
                  selectedProject === project.id ? 'opacity-50 scale-[0.98]' : ''
                }`}
                onClick={() => handleProjectClick(project)}
              >
                <CardContent className="p-6">
                  {/* Header */}
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3 min-w-0 flex-1">
                      <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-blue-600 rounded-lg flex items-center justify-center text-white font-semibold text-sm flex-shrink-0 relative">
                        {getWorkspaceInitials(project.name)}
                        <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-white rounded-full flex items-center justify-center shadow-sm">
                          <FolderOpen className="w-2 h-2 text-indigo-600" />
                        </div>
                      </div>
                      <div className="min-w-0 flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <h3 className="font-semibold text-gray-900 text-base truncate">{project.name}</h3>
                          <div className={`w-2 h-2 rounded-full flex-shrink-0 ${project.is_active ? 'bg-emerald-500' : 'bg-gray-300'}`}></div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge 
                            variant="outline" 
                            className={`text-xs font-medium border ${getEnvironmentColor(project.environment)}`}
                          >
                            {project.environment}
                          </Badge>
                          {project.token_hash && (
                            <Badge variant="outline" className="text-xs font-medium bg-green-50 text-green-700 border-green-200">
                              <Key className="h-3 w-3 mr-1" />
                              API
                            </Badge>
                          )}
                          {project.agent_count !== undefined && (
                            <Badge variant="outline" className="text-xs font-medium bg-blue-50 text-blue-700 border-blue-200">
                              {project.agent_count} {project.agent_count === 1 ? 'agent' : 'agents'}
                            </Badge>
                          )}
                        </div>
                      </div>
                    </div>
                    
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="opacity-0 group-hover:opacity-100 transition-opacity h-8 w-8 p-0 text-gray-400 hover:text-gray-600 hover:bg-gray-100"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end" className="w-48">
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation()
                          setSelectedProjectForDialog(project)
                          setShowAddMemberDialog(true)
                        }}>
                          <Users className="h-4 w-4 mr-2" />
                          Manage access
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation()
                        }}>
                          <Settings className="h-4 w-4 mr-2" />
                          Settings
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation()
                          setShowRegenerateConfirm(project)
                        }} disabled={regeneratingToken === project.id}>
                          {regeneratingToken === project.id ? (
                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                          ) : (
                            <RefreshCw className="h-4 w-4 mr-2" />
                          )}
                          Regenerate token
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation()
                          setShowDeleteConfirm(project)
                        }} className="text-red-600 focus:text-red-600">
                          <Trash2 className="h-4 w-4 mr-2" />
                          Delete workspace
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>

                  {/* Description */}
                  {project.description && (
                    <p className="text-sm text-gray-600 mb-6 line-clamp-2 leading-relaxed">
                      {project.description}
                    </p>
                  )}

                  {/* Footer */}
                  <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                    <div className="flex items-center gap-1.5 text-xs text-gray-500">
                      <Clock className="w-3 h-3" />
                      <span>Created {formatDate(project.created_at)}</span>
                    </div>
                    <div className="flex items-center gap-1 text-xs text-gray-400 group-hover:text-blue-600 transition-colors">
                      <span>Open workspace</span>
                      <ChevronRight className="w-3 h-3" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Empty State for Search */}
          {filteredProjects.length === 0 && searchQuery && (
            <div className="text-center py-20">
              <div className="w-16 h-16 bg-gray-100 rounded-2xl flex items-center justify-center mx-auto mb-6">
                <Search className="h-8 w-8 text-gray-400" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">No workspaces found</h3>
              <p className="text-sm text-gray-600 mb-8 max-w-md mx-auto leading-relaxed">
                We couldn't find any workspaces matching "<span className="font-medium text-gray-900">{searchQuery}</span>". 
                Try adjusting your search terms.
              </p>
              <Button 
                variant="outline" 
                onClick={() => setSearchQuery('')}
                className="text-gray-600 border-gray-300"
              >
                Clear search
              </Button>
            </div>
          )}

          {/* Empty State for No Workspaces */}
          {projects.length === 0 && !loading && !error && (
            <div className="text-center py-20">
              <div className="w-16 h-16 bg-blue-50 rounded-2xl flex items-center justify-center mx-auto mb-6">
                <Building2 className="h-8 w-8 text-blue-600" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Create your first workspace</h3>
              <p className="text-sm text-gray-600 mb-8 max-w-lg mx-auto leading-relaxed">
                Organize your voice agents by department or team. Each workspace provides isolated access control, 
                dedicated analytics, and team-specific agent management.
              </p>
              <div className="space-y-4">
                <Button 
                  onClick={handleCreateProject}
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Create workspace
                </Button>
                <div className="text-xs text-gray-500 max-w-sm mx-auto">
                  <p><strong>Example:</strong> Create "Sales Department" to organize all sales-related voice agents and provide access to your sales team.</p>
                </div>
              </div>
            </div>
          )}
        </main>

        {/* Dialogs - Updated terminology */}
        <ProjectCreationDialog
          isOpen={showCreateDialog}
          onClose={() => setShowCreateDialog(false)}
          onProjectCreated={handleProjectCreated}
        />

        <Dialog open={showTokenDialog !== null} onOpenChange={handleCloseTokenDialog}>
          <DialogContent className="sm:max-w-[500px]">
            <DialogHeader>
              <DialogTitle className="text-lg font-semibold">API token generated</DialogTitle>
              <DialogDescription className="text-sm text-gray-600">
                A new API token has been generated for the "{showTokenDialog?.name}" workspace. Save this token securely as it won't be shown again.
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-900 mb-2">API Token</label>
                <div className="relative">
                  <input
                    type={showToken ? 'text' : 'password'}
                    value={regeneratedToken || ''}
                    readOnly
                    className="w-full h-10 px-3 pr-20 text-sm border border-gray-200 rounded-lg bg-gray-50 font-mono focus:outline-none"
                  />
                  <div className="absolute right-2 top-1/2 -translate-y-1/2 flex gap-1">
                    <Button
                      type="button"
                      size="sm"
                      variant="ghost"
                      onClick={() => setShowToken(!showToken)}
                      className="h-6 w-6 p-0 text-gray-500 hover:text-gray-700"
                    >
                      {showToken ? <EyeOff className="w-3 h-3" /> : <Eye className="w-3 h-3" />}
                    </Button>
                    <Button
                      type="button"
                      size="sm"
                      variant="ghost"
                      onClick={handleCopyToken}
                      className="h-6 w-6 p-0 text-gray-500 hover:text-gray-700"
                    >
                      <Copy className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
                {tokenCopied && (
                  <p className="text-xs text-emerald-600 mt-2">Token copied to clipboard</p>
                )}
              </div>
              <div className="p-3 bg-amber-50 border border-amber-200 rounded-lg">
                <p className="text-xs text-amber-800">
                  <strong>Important:</strong> Store this token securely. The previous token has been invalidated and will no longer work.
                </p>
              </div>
              <div className="flex justify-end pt-4">
                <Button onClick={handleCloseTokenDialog} className="bg-blue-600 hover:bg-blue-700 text-white">
                  Done
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        <Dialog open={showDeleteConfirm !== null} onOpenChange={() => setShowDeleteConfirm(null)}>
          <DialogContent className="sm:max-w-[400px]">
            <DialogHeader>
              <DialogTitle className="text-lg font-semibold">Delete workspace</DialogTitle>
              <DialogDescription className="text-sm text-gray-600">
                Are you sure you want to delete the "{showDeleteConfirm?.name}" workspace? This action cannot be undone and will permanently delete all agents, call logs, and analytics data in this workspace.
              </DialogDescription>
            </DialogHeader>
            <div className="flex gap-3 pt-6">
              <Button variant="outline" onClick={() => setShowDeleteConfirm(null)} className="flex-1">
                Cancel
              </Button>
              <Button
                variant="destructive"
                onClick={() => showDeleteConfirm && handleDeleteProject(showDeleteConfirm)}
                disabled={deletingProject !== null}
                className="flex-1"
              >
                {deletingProject ? <Loader2 className="w-4 h-4 animate-spin mr-2" /> : null}
                Delete workspace
              </Button>
            </div>
          </DialogContent>
        </Dialog>

        <TokenRegenerationConfirmDialog
          isOpen={showRegenerateConfirm !== null}
          project={showRegenerateConfirm}
          isRegenerating={regeneratingToken === showRegenerateConfirm?.id}
          onConfirm={() => showRegenerateConfirm && handleRegenerateToken(showRegenerateConfirm)}
          onCancel={() => setShowRegenerateConfirm(null)}
        />

        <MemberManagementDialog
          isOpen={membersDialog}
          onClose={setShowAddMemberDialog}
          project={projectSelected}
        />
      </div>
    </div>
  )
}

export default ProjectSelection
</file>

<file path="src/components/shared/ColumnSelector.tsx">
"use client"

import type React from "react"
import { useRef, useCallback } from "react"
import { Checkbox } from "@/components/ui/checkbox"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Columns3, Eye, EyeOff } from "lucide-react"
import { cn } from "@/lib/utils"

interface ColumnSelectorProps {
  basicColumns: string[]
  basicColumnLabels: Record<string, string>
  metadataColumns: string[]
  transcriptionColumns: string[]
  visibleColumns: {
    basic: string[]
    metadata: string[]
    transcription_metrics: string[]
  }
  onColumnChange: (type: "basic" | "metadata" | "transcription_metrics", column: string, visible: boolean) => void
  onSelectAll: (type: "basic" | "metadata" | "transcription_metrics", visible: boolean) => void
  alignProp?: number // Optional prop to control alignment, default to "-60"
}

const ColumnSelector: React.FC<ColumnSelectorProps> = ({
  basicColumns,
  basicColumnLabels,
  metadataColumns,
  transcriptionColumns,
  visibleColumns,
  onColumnChange,
  onSelectAll,
  alignProp = -60, // Default alignment prop
}) => {
  // FIXED: Add ref to preserve scroll position
  const scrollContainerRef = useRef<HTMLDivElement>(null)
  const scrollPositionRef = useRef<number>(0)

  const totalVisible =
    visibleColumns.basic.length + visibleColumns.metadata.length + visibleColumns.transcription_metrics.length
  const totalColumns = basicColumns.length + metadataColumns.length + transcriptionColumns.length

  // FIXED: Preserve scroll position when column changes
  const handleColumnChange = useCallback((type: "basic" | "metadata" | "transcription_metrics", column: string, visible: boolean) => {
    // Save current scroll position
    if (scrollContainerRef.current) {
      scrollPositionRef.current = scrollContainerRef.current.scrollTop
    }
    
    // Call the parent handler
    onColumnChange(type, column, visible)
    
    // Restore scroll position after re-render
    setTimeout(() => {
      if (scrollContainerRef.current && scrollPositionRef.current > 0) {
        scrollContainerRef.current.scrollTop = scrollPositionRef.current
      }
    }, 0)
  }, [onColumnChange])

  // FIXED: Preserve scroll position when select all changes
  const handleSelectAll = useCallback((type: "basic" | "metadata" | "transcription_metrics", visible: boolean) => {
    // Save current scroll position
    if (scrollContainerRef.current) {
      scrollPositionRef.current = scrollContainerRef.current.scrollTop
    }
    
    // Call the parent handler
    onSelectAll(type, visible)
    
    // Restore scroll position after re-render
    setTimeout(() => {
      if (scrollContainerRef.current && scrollPositionRef.current > 0) {
        scrollContainerRef.current.scrollTop = scrollPositionRef.current
      }
    }, 0)
  }, [onSelectAll])

  const ColumnSection = ({
    title,
    columns,
    type,
    visibleCount,
    getLabel,
  }: {
    title: string
    columns: string[]
    type: "basic" | "metadata" | "transcription_metrics"
    visibleCount: number
    getLabel?: (column: string) => string
  }) => {
    if (columns.length === 0) return null

    return (
      <div className="space-y-3">
        <div className="flex items-center justify-between px-1">
          <div className="flex items-center gap-2">
            <span className="text-sm font-medium text-gray-900">{title}</span>
            <span className="text-xs text-gray-500 bg-gray-100 px-2 py-0.5 rounded-full">
              {visibleCount}/{columns.length}
            </span>
          </div>
          <div className="flex gap-1">
            <Button
              variant="ghost"
              size="sm"
              className="h-7 px-2 text-xs text-gray-600 hover:text-gray-900 hover:bg-gray-100 transition-colors"
              onClick={() => handleSelectAll(type, true)}
              disabled={visibleCount === columns.length}
            >
              <Eye className="h-3 w-3 mr-1" />
              All
            </Button>
            <Button
              variant="ghost"
              size="sm"
              className="h-7 px-2 text-xs text-gray-600 hover:text-gray-900 hover:bg-gray-100 transition-colors"
              onClick={() => handleSelectAll(type, false)}
              disabled={visibleCount === 0}
            >
              <EyeOff className="h-3 w-3 mr-1" />
              None
            </Button>
          </div>
        </div>

        <div className="space-y-1">
          {columns.map((column) => {
            const isVisible = visibleColumns[type].includes(column)
            return (
              <div
                key={`${type}-${column}`} // FIXED: Add unique key with type prefix
                className={cn(
                  "flex items-center space-x-3 px-3 py-2 rounded-md transition-colors",
                  isVisible ? "bg-blue-50 dark:bg-blue-900/20" : "hover:bg-muted/50"
                )}
              >
                <Checkbox
                  id={`${type}-${column}`}
                  checked={isVisible}
                  onCheckedChange={(checked) => handleColumnChange(type, column, checked as boolean)}
                  className="data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600"
                />
                <label
                  htmlFor={`${type}-${column}`}
                  className="text-sm text-foreground cursor-pointer flex-1"
                >
                  {getLabel ? getLabel(column) : column}
                </label>
                {isVisible && <div className="w-2 h-2 bg-blue-500 rounded-full opacity-60" />}
              </div>
            )
          })}
        </div>
      </div>
    )
  }

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="gap-2 h-9 bg-white border-gray-200 hover:bg-gray-50 hover:border-gray-300 transition-all duration-200 shadow-sm"
        >
          <Columns3 className="h-4 w-4 text-gray-600" />
          <span className="text-sm font-medium">Columns</span>
          <span className="text-xs text-gray-500 bg-gray-100 px-2 py-0.5 rounded-full ml-1">
            {totalVisible}/{totalColumns}
          </span>
        </Button>
      </PopoverTrigger>
      <PopoverContent
        className="w-96 max-h-[60vh] p-0 shadow-xl border border-gray-200 bg-white flex flex-col overflow-hidden"
        side="left"
        align="start"  // Changed from "start" to "end" to align with bottom of trigger
        alignOffset={alignProp} // Reduced negative offset to move it higher
        sideOffset={400}    // Increased side offset for more spacing
        style={{ 
          zIndex: 9999,
          position: 'fixed',
          transform: 'translateY(-50px)' // Additional CSS transform to move it up
        }}
        avoidCollisions={false} // Disable collision detection that might override positioning
      >
        {/* Header */}
        <div className="px-6 py-4 border-b border-gray-100 bg-gray-50/50 shrink-0">
          <div className="flex items-center justify-between">
            <h4 className="font-semibold text-base text-gray-900">Table Columns</h4>
            <div className="text-xs text-gray-500 bg-white px-3 py-1 rounded-full border border-gray-200">
              {totalVisible} of {totalColumns} visible
            </div>
          </div>
          <p className="text-sm text-gray-600 mt-1">Choose which columns to display in your table</p>
        </div>

        {/* FIXED: Scrollable body with ref and scroll preservation */}
        <div 
          ref={scrollContainerRef}
          className="overflow-y-auto flex-1"
          style={{ 
            scrollBehavior: 'auto',  // Prevent smooth scrolling interfering with position restoration
            touchAction: 'pan-y',   // Enable touch scrolling on mobile
            overscrollBehavior: 'contain'  // Prevent scroll chaining to parent
          }}
          onWheel={(e) => {
            // Prevent wheel events from bubbling up to dialog
            e.stopPropagation()
          }}
          onTouchMove={(e) => {
            // Prevent touch scroll from bubbling up to dialog
            e.stopPropagation()
          }}
        >
          <div className="p-6 space-y-6">
            <ColumnSection
              title="Basic Columns"
              columns={basicColumns}
              type="basic"
              visibleCount={visibleColumns.basic.length}
              getLabel={(column) => basicColumnLabels[column] || column}
            />

            {basicColumns.length > 0 && (metadataColumns.length > 0 || transcriptionColumns.length > 0) && (
              <div className="relative">
                <Separator className="bg-gray-200" />
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="bg-white px-3 text-xs text-gray-500 font-medium">DYNAMIC COLUMNS</div>
                </div>
              </div>
            )}

            <ColumnSection
              title="Metadata"
              columns={metadataColumns}
              type="metadata"
              visibleCount={visibleColumns.metadata.length}
            />

            {metadataColumns.length > 0 && transcriptionColumns.length > 0 && (
              <Separator className="bg-gray-200" />
            )}

            <ColumnSection
              title="Transcription Metrics"
              columns={transcriptionColumns}
              type="transcription_metrics"
              visibleCount={visibleColumns.transcription_metrics.length}
            />
          </div>
        </div>

        {/* Footer */}
        <div className="px-6 py-3 border-t border-gray-100 bg-gray-50/30 shrink-0">
          <div className="flex items-center justify-between text-xs text-gray-500">
            <span>{totalColumns > 8 ? "Scroll to see more options" : `${totalColumns} columns available`}</span>
            <div className="flex items-center gap-1">
              <div className="w-1 h-1 bg-gray-400 rounded-full" />
              <div className="w-1 h-1 bg-gray-300 rounded-full" />
              <div className="w-1 h-1 bg-gray-300 rounded-full" />
            </div>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  )
}

export default ColumnSelector
</file>

<file path="src/components/shared/Header.tsx">
"use client"

import { UserButton, SignedIn, useUser } from "@clerk/clerk-react";
import Image from "next/image";
import { usePathname } from "next/navigation";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Mic, Bell, Search, Settings, BarChart3, Users, FileText, Zap, ChevronDown, HelpCircle, Command } from 'lucide-react';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu';

function Header() {
  const pathname = usePathname();
  const { user } = useUser();

  const isActive = (path: string) => {
    if (path === '/') return pathname === '/';
    return pathname.startsWith(path);
  };

  // Get user's display name
  const getUserDisplayName = () => {
    if (user?.fullName) return user.fullName;
    if (user?.firstName && user?.lastName) return `${user.firstName} ${user.lastName}`;
    if (user?.firstName) return user.firstName;
    if (user?.emailAddresses?.[0]?.emailAddress) {
      return user.emailAddresses[0].emailAddress.split('@')[0];
    }
    return 'User';
  };

  return (
    <SignedIn>
      <header className="bg-white border-b border-gray-200 sticky top-0 z-50">
        <div className="px-6 py-4">
          <div className="flex items-center justify-between max-w-[1400px] mx-auto">
            {/* Logo & Brand */}
            <div className="flex items-center gap-8">
              <Link href="/" className="flex items-center gap-3 group">
                <div className="w-12 h-12 bg-white rounded-xl flex items-center justify-center">
                  <Image src="/logo.png" alt="Pype AI Logo" width={100} height={100} />
                </div>
                <div>
                  <h1 className="text-lg font-semibold text-gray-900 group-hover:text-blue-600 transition-colors">
                    Whispey
                  </h1>
                  <p className="text-xs text-gray-500 -mt-0.5">LiveKit Observability Platform</p>
                </div>
              </Link>
            </div>

            {/* Right Side Actions */}
            <div className="flex items-center gap-3">
              {/* Help */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="text-gray-500 hover:text-gray-700 hover:bg-gray-100 w-9 h-9 p-0"
                  >
                    <HelpCircle className="w-4 h-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-56">
                  <DropdownMenuItem asChild>
                    <Link href="/docs" className="flex items-center w-full">
                      <FileText className="w-4 h-4 mr-2" />
                      Documentation
                    </Link>
                  </DropdownMenuItem>
                  <DropdownMenuItem asChild>
                    <Link href="/api-reference" className="flex items-center w-full">
                      <Zap className="w-4 h-4 mr-2" />
                      API Reference
                    </Link>
                  </DropdownMenuItem>
                  <DropdownMenuItem asChild>
                    <Link href="/community" className="flex items-center w-full">
                      <Users className="w-4 h-4 mr-2" />
                      Community
                    </Link>
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem asChild>
                    <Link href="/support" className="flex items-center w-full">
                      <HelpCircle className="w-4 h-4 mr-2" />
                      Contact Support
                    </Link>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>

              {/* User Profile */}
              <div className="flex items-center gap-3 pl-3 border-l border-gray-200">
                <div className="hidden sm:block text-right">
                  <p className="text-sm font-medium text-gray-900">{getUserDisplayName()}</p>
                  <p className="text-xs text-gray-500">Community Edition</p>
                </div>
                <UserButton 
                  appearance={{
                    elements: {
                      avatarBox: "w-9 h-9 ring-2 ring-gray-200 hover:ring-gray-300 transition-all duration-200",
                      userButtonPopoverCard: "shadow-xl border border-gray-200 rounded-xl",
                      userButtonPopoverActionButton: "hover:bg-gray-50 rounded-lg",
                      userButtonPopoverActionButtonText: "text-gray-700 font-medium",
                      userButtonPopoverFooter: "hidden"
                    }
                  }}
                  userProfileProps={{
                    appearance: {
                      elements: {
                        card: "shadow-2xl border border-gray-200 rounded-xl",
                        navbar: "bg-gray-50 rounded-t-xl",
                        navbarButton: "text-gray-600 hover:text-gray-900 font-medium",
                        headerTitle: "text-gray-900 font-bold",
                        headerSubtitle: "text-gray-600"
                      }
                    }
                  }}
                />
              </div>
            </div>
          </div>
        </div>
      </header>
    </SignedIn>
  );
}

export default Header;
</file>

<file path="src/components/shared/LoadingSpinner.tsx">
import { Loader2 } from "lucide-react";

export default function LoadingSpinner() {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center space-y-4">
          <Loader2 className="w-8 h-8 animate-spin text-blue-500 mx-auto" />
          <p className="text-gray-600">Loading...</p>
        </div>
      </div>
    )
  }
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.tsx">
"use client"

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>["variant"]
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn(
          "flex gap-4 flex-col md:flex-row relative",
          defaultClassNames.months
        ),
        month: cn("flex flex-col w-full gap-4", defaultClassNames.month),
        nav: cn(
          "flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn(
          "absolute bg-popover inset-0 opacity-0",
          defaultClassNames.dropdown
        ),
        caption_label: cn(
          "select-none font-medium",
          captionLayout === "label"
            ? "text-sm"
            : "rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5",
          defaultClassNames.caption_label
        ),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none",
          defaultClassNames.weekday
        ),
        week: cn("flex w-full mt-2", defaultClassNames.week),
        week_number_header: cn(
          "select-none w-(--cell-size)",
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          "text-[0.8rem] select-none text-muted-foreground",
          defaultClassNames.week_number
        ),
        day: cn(
          "relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none",
          defaultClassNames.day
        ),
        range_start: cn(
          "rounded-l-md bg-accent",
          defaultClassNames.range_start
        ),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("rounded-r-md bg-accent", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn(
          "text-muted-foreground opacity-50",
          defaultClassNames.disabled
        ),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === "left") {
            return (
              <ChevronLeftIcon className={cn("size-4", className)} {...props} />
            )
          }

          if (orientation === "right") {
            return (
              <ChevronRightIcon
                className={cn("size-4", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn("size-4", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="src/components/ui/checkbox.tsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }
</file>

<file path="src/components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="src/components/ui/drawer.tsx">
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

function Drawer({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) {
  return <DrawerPrimitive.Root data-slot="drawer" {...props} />
}

function DrawerTrigger({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {
  return <DrawerPrimitive.Trigger data-slot="drawer-trigger" {...props} />
}

function DrawerPortal({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {
  return <DrawerPrimitive.Portal data-slot="drawer-portal" {...props} />
}

function DrawerClose({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Close>) {
  return <DrawerPrimitive.Close data-slot="drawer-close" {...props} />
}

function DrawerOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {
  return (
    <DrawerPrimitive.Overlay
      data-slot="drawer-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DrawerContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Content>) {
  return (
    <DrawerPortal data-slot="drawer-portal">
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          "group/drawer-content bg-background fixed z-50 flex h-auto flex-col",
          "data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b",
          "data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t",
          "data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm",
          "data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm",
          className
        )}
        {...props}
      >
        <div className="bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  )
}

function DrawerHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-header"
      className={cn(
        "flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left",
        className
      )}
      {...props}
    />
  )
}

function DrawerFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function DrawerTitle({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Title>) {
  return (
    <DrawerPrimitive.Title
      data-slot="drawer-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function DrawerDescription({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Description>) {
  return (
    <DrawerPrimitive.Description
      data-slot="drawer-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
</file>

<file path="src/components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }
</file>

<file path="src/components/ui/popover.tsx">
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
</file>

<file path="src/components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }
</file>

<file path="src/components/ui/scroll-area.tsx">
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
</file>

<file path="src/components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="src/components/ui/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }
</file>

<file path="src/components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/AuthPage.tsx">
'use client';

import { SignIn } from '@clerk/nextjs';
import Image from 'next/image';
import { Mic, Sparkles, Shield, Zap } from 'lucide-react';

export default function AuthPage() {
  return (
    <div className="min-h-screen bg-white flex">
      {/* Left Side - Branding & Value Proposition */}
      <div className="hidden lg:flex lg:w-1/2 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 relative overflow-hidden">
        {/* Background Pattern */}
        <div className="absolute inset-0 opacity-20" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fillRule='evenodd'%3E%3Cg fill='%23ffffff' fillOpacity='0.03'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`
        }}></div>
        
        <div className="relative z-10 flex flex-col justify-center px-12 py-16">
          <div className="max-w-md">
            {/* Logo */}
            <div className="flex items-center space-x-3 mb-12">
              <div className="w-12 h-12 bg-white rounded-xl flex items-center justify-center">
                <Image src="/logo.png" alt="Pype AI Logo" width={100} height={100} />
              </div>
              <span className="text-2xl font-bold text-white">Whispey</span>
            </div>

            {/* Value Proposition */}
            <h1 className="text-4xl font-bold text-white mb-6 leading-tight">
              Monitor your LiveKit Voice AI agents.
            </h1>
            
            <p className="text-slate-300 text-lg mb-12 leading-relaxed">
              Join hundereds of engineers and get complete observability into your Voice AI Applications.
            </p>

            {/* Features */}
            <div className="space-y-6">
              <div className="flex items-center space-x-4">
                <div className="w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center">
                  <Sparkles className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h3 className="text-white font-semibold">Smart Transcription</h3>
                  <p className="text-slate-400 text-sm">Real-time voice-to-text with context awareness</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <div className="w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center">
                  <Zap className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h3 className="text-white font-semibold">Instant Insights</h3>
                  <p className="text-slate-400 text-sm">AI-powered analysis and action items</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <div className="w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center">
                  <Shield className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h3 className="text-white font-semibold">Completely Private</h3>
                  <p className="text-slate-400 text-sm">Open Source</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Right Side - Authentication */}
      <div className="flex-1 flex items-center justify-center px-6 py-12 lg:px-12">
        <div className="w-full max-w-md space-y-8">
          {/* Mobile Logo */}
          <div className="lg:hidden text-center">
            <div className="inline-flex items-center space-x-3 mb-8">
              <div className="w-12 h-12 bg-slate-900 rounded-xl flex items-center justify-center">
                <Mic className="w-6 h-6 text-white" />
              </div>
              <span className="text-2xl font-bold text-slate-900">Whispey</span>
            </div>
          </div>

          {/* Header */}
          <div className="text-center lg:text-left">
            <h2 className="text-3xl font-bold text-slate-900 mb-2">
              Welcome back
            </h2>
            <p className="text-slate-600">
              Sign in to your account to continue
            </p>
          </div>

          {/* Clerk Sign In Component */}
          <div className="mt-8">
            <SignIn 
              routing="hash"
              appearance={{
                elements: {
                  card: "shadow-none bg-transparent p-0",
                  formButtonPrimary: "bg-slate-900 hover:bg-slate-800 text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 ease-in-out shadow-sm hover:shadow-md",
                  headerTitle: "hidden",
                  headerSubtitle: "hidden",
                  socialButtonsBlockButton: "border-2 border-slate-200 hover:border-slate-300 hover:bg-slate-50 text-slate-700 font-medium py-3 px-4 rounded-lg transition-all duration-200 ease-in-out",
                  socialButtonsBlockButtonText: "font-medium",
                  formFieldInput: "border-2 border-slate-200 focus:ring-2 focus:ring-slate-900 focus:border-slate-900 rounded-lg py-3 px-4 transition-all duration-200 ease-in-out",
                  formFieldLabel: "text-slate-700 font-medium mb-2",
                  footerActionLink: "text-slate-900 hover:text-slate-700 font-medium",
                  dividerLine: "bg-slate-200",
                  dividerText: "text-slate-500 font-medium",
                  formFieldInputShowPasswordButton: "text-slate-500 hover:text-slate-700",
                  identityPreviewText: "text-slate-600",
                  identityPreviewEditButton: "text-slate-900 hover:text-slate-700"
                },
                layout: {
                  socialButtonsPlacement: "top"
                }
              }}
              redirectUrl="/dashboard"
            />
          </div>

          {/* Trust Indicators */}
          <div className="pt-8 border-t border-slate-200">
            <div className="flex items-center justify-center space-x-6 text-sm text-slate-500">
              <div className="flex items-center space-x-2">
                <Shield className="w-4 h-4" />
                <span>Secure</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-green-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span>SOC 2 Compliant</span>
              </div>
            </div>
            <p className="text-center text-xs text-slate-400 mt-4">
              Protected by industry-leading security standards
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/FieldExtractorLogs.tsx">
"use client"

import type React from "react"
import { useState } from "react"
import { Plus, X, WandSparkles } from "lucide-react"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Separator } from "@/components/ui/separator" // Added Separator for visual breaks
import MagicButton from "@/components/buttons/MagicButton" // Assuming this is a custom button component

interface FieldExtractorItem {
  key: string
  description: string
}

interface FieldExtractorDialogProps {
  initialData?: FieldExtractorItem[]
  onSave: (data: FieldExtractorItem[], enabled: boolean) => void
  isEnabled?: boolean
}

const FieldExtractorDialog: React.FC<FieldExtractorDialogProps> = ({ initialData = [], onSave, isEnabled = false }) => {
  const [fields, setFields] = useState<FieldExtractorItem[]>(initialData)
  const [enabled, setEnabled] = useState(isEnabled)
  const [isOpen, setIsOpen] = useState(false) // State to control dialog open/close

  const addField = () => {
    setFields([...fields, { key: "", description: "" }])
  }

  const removeField = (index: number) => {
    const updated = [...fields]
    updated.splice(index, 1)
    setFields(updated)
  }

  const updateField = (index: number, field: Partial<FieldExtractorItem>) => {
    const updated = [...fields]
    updated[index] = { ...updated[index], ...field }
    setFields(updated)
  }

  const handleSave = () => {
    const validFields = fields.filter((f) => f.key.trim() !== "" || f.description.trim() !== "")
    onSave(validFields, enabled)
    setIsOpen(false) // Close dialog on save
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      {" "}
      {/* Control dialog state */}
      <DialogTrigger asChild>
        {/* The single, refined "sparkle" button */}
        <MagicButton />
      </DialogTrigger>
      <DialogContent className="max-w-2xl rounded-lg shadow-xl flex flex-col h-[80vh] max-h-[600px] p-0">
        <DialogHeader className="p-6 pb-4 flex-shrink-0">
          <DialogTitle className="text-2xl font-semibold text-gray-900 dark:text-gray-50">
            Field Extractor Config
          </DialogTitle>
        </DialogHeader>
        <Separator className="flex-shrink-0" />

        {/* Fixed section for the enable switch */}
        <div className="flex-shrink-0 p-6 pb-4">
          <div className="flex items-center justify-between p-2 rounded-md bg-gray-50 dark:bg-gray-800">
            <Label htmlFor="enabled" className="text-base font-medium text-gray-700 dark:text-gray-300">
              Enable Field Extraction
            </Label>
            <Switch id="enabled" checked={enabled} onCheckedChange={setEnabled} />
          </div>
        </div>

        {/* Scrollable section for the fields list */}
        <div className="flex-grow overflow-y-auto px-6 space-y-4">
          {fields.map((field, index) => (
            <div key={index} className="grid grid-cols-12 gap-4 items-end">
              <div className="col-span-5">
                <Label
                  htmlFor={`field-key-${index}`}
                  className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block"
                >
                  Label
                </Label>
                <Input
                  id={`field-key-${index}`}
                  placeholder="e.g. Respondent Name"
                  value={field.key}
                  onChange={(e) => updateField(index, { key: e.target.value })}
                  className="rounded-md border border-gray-300 dark:border-gray-700 focus:ring-gray-950 focus:border-gray-950 dark:focus:ring-gray-300 dark:focus:border-gray-300"
                />
              </div>
              <div className="col-span-6">
                <Label
                  htmlFor={`field-description-${index}`}
                  className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block"
                >
                  Description
                </Label>
                <Input
                  id={`field-description-${index}`}
                  placeholder="Describe what to extract"
                  value={field.description}
                  onChange={(e) => updateField(index, { description: e.target.value })}
                  className="rounded-md border border-gray-300 dark:border-gray-700 focus:ring-gray-950 focus:border-gray-950 dark:focus:ring-gray-300 dark:focus:border-gray-300"
                />
              </div>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => removeField(index)}
                aria-label={`Remove field ${index + 1}`}
                className="rounded-full w-8 h-8 text-gray-400 hover:bg-gray-100 hover:text-red-500 dark:text-gray-600 dark:hover:bg-gray-800 dark:hover:text-red-400"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          ))}
        </div>

        {/* Fixed section for action buttons */}
        <div className="flex-shrink-0 p-6 pt-4 space-y-2">
          <Button
            type="button"
            variant="outline"
            onClick={addField}
            className="w-full rounded-md border border-dashed border-gray-300 text-gray-600 hover:bg-gray-50 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-800 bg-transparent"
          >
            <Plus className="w-4 h-4 mr-2" /> Add Field
          </Button>
          <Button
            onClick={handleSave}
            className="w-full rounded-md bg-gray-900 text-white shadow-sm hover:bg-gray-800 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-200 dark:focus-visible:ring-gray-300"
          >
            Save Field Extractor
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  )
}

export default FieldExtractorDialog
</file>

<file path="src/components/MemberManagmentDialog.tsx">
// components/MemberManagementDialog.tsx
'use client'
import React, { useState, useEffect } from 'react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { 
  UserPlus, 
  Mail, 
  Loader2, 
  Users,
  Clock,
  CheckCircle,
  AlertCircle
} from 'lucide-react'

interface Project {
  id: string
  name: string
  user_role: string
}

interface Member {
  id: number
  clerk_id: string
  role: string
  permissions: Record<string, any>
  joined_at: string
  user: {
    email: string
    first_name: string | null
    last_name: string | null
    profile_image_url: string | null
  }
}

interface PendingMapping {
  id: number
  email: string
  role: string
  permissions: Record<string, any>
  created_at: string
}

interface MemberManagementDialogProps {
  isOpen: boolean
  onClose: any
  project: Project | null
}

const MemberManagementDialog: React.FC<MemberManagementDialogProps> = ({
  isOpen,
  onClose,
  project
}) => {

  const [email, setEmail] = useState('')
  const [role, setRole] = useState('member')
  const [loading, setLoading] = useState(false)
  const [members, setMembers] = useState<Member[]>([])
  const [pendingMappings, setPendingMappings] = useState<PendingMapping[]>([])
  const [fetchingMembers, setFetchingMembers] = useState(false)
  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null)

  // Check if current user can manage members
  const canManageMembers = project?.user_role === 'owner' || project?.user_role === 'admin'

  useEffect(() => {
    if (isOpen && project && canManageMembers) {
      fetchMembers()
    }
  }, [isOpen, project, canManageMembers])

  const fetchMembers = async () => {
    if (!project) return
    
    setFetchingMembers(true)
    try {
      const response = await fetch(`/api/projects/${project.id}/members`)

      if (response.ok) {
        const data = await response.json()

        console.log("Fetched members data:", data)
        setMembers(data.members || [])
        setPendingMappings(data.pending_mappings || [])
      }
    } catch (error) {
      console.error('Error fetching members:', error)
    } finally {
      setFetchingMembers(false)
    }
  }

  const handleAddMember = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!project || !email.trim()) {
      setMessage({ type: 'error', text: 'Please enter an email address' })
      return
    }

    setLoading(true)
    setMessage(null)

    try {
      const response = await fetch(`/api/projects/${project.id}/members`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: email.trim(),
          role: role
        }),
      })

      const data = await response.json()

      console.log("user_data",data)

      if (!response.ok) {
        throw new Error(data.error || 'Failed to add member')
      }

      setMessage({ 
        type: 'success', 
        text: data.type === 'direct_add' 
          ? 'User added to project successfully!'
          : 'Email added! User will be added when they sign up.'
      })
      
      setEmail('')
      setRole('member')
      
      // Refresh members list
      fetchMembers()
      
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to add member'
      setMessage({ type: 'error', text: errorMessage })
    } finally {
      setLoading(false)
    }
  }

  const getRoleBadgeColor = (role: string) => {
    switch (role) {
      case 'owner': return 'bg-purple-100 text-purple-800'
      case 'admin': return 'bg-blue-100 text-blue-800'
      case 'member': return 'bg-green-100 text-green-800'
      case 'viewer': return 'bg-gray-100 text-gray-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getUserInitials = (firstName: string | null, lastName: string | null, email: string) => {
    if (firstName && lastName) {
      return `${firstName[0]}${lastName[0]}`.toUpperCase()
    }
    if (firstName) {
      return firstName.substring(0, 2).toUpperCase()
    }
    return email.substring(0, 2).toUpperCase()
  }

  const handleClose = () => {
    setEmail('')
    setRole('member')
    setMessage(null)
    setMembers([])
    setPendingMappings([])
    onClose()
  }

  if (!project) return null

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[600px] max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            Manage Members - {project.name}
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Access Check */}
          {!canManageMembers && (
            <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-center gap-2">
                <AlertCircle className="h-5 w-5 text-yellow-600" />
                <p className="text-sm text-yellow-800">
                  You need admin or owner access to manage project members.
                </p>
              </div>
            </div>
          )}

          {/* Add Member Form */}
          {canManageMembers && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Add New Member</h3>
              
              {message && (
                <div className={`p-3 rounded-lg ${
                  message.type === 'success' 
                    ? 'bg-green-50 text-green-800 border border-green-200' 
                    : 'bg-red-50 text-red-800 border border-red-200'
                }`}>
                  {message.text}
                </div>
              )}

              <form onSubmit={handleAddMember} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email Address
                  </label>
                  <input
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="colleague@example.com"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Role
                  </label>
                  <select
                    value={role}
                    onChange={(e) => setRole(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="viewer">Viewer (Read only)</option>
                    <option value="member">Member (Read & Write)</option>
                    <option value="admin">Admin (Read, Write & Delete)</option>
                  </select>
                </div>

                <Button 
                  type="submit" 
                  disabled={loading}
                  className="w-full"
                >
                  {loading ? (
                    <Loader2 className="w-4 h-4 animate-spin mr-2" />
                  ) : (
                    <UserPlus className="w-4 h-4 mr-2" />
                  )}
                  {loading ? 'Adding...' : 'Add Member'}
                </Button>
              </form>
            </div>
          )}

          {/* Members List */}
          {canManageMembers && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Current Members ({members.length})</h3>
              
              {fetchingMembers ? (
                <div className="flex items-center justify-center py-8">
                  <Loader2 className="w-6 h-6 animate-spin" />
                  <span className="ml-2 text-gray-600">Loading members...</span>
                </div>
              ) : members.length === 0 ? (
                <p className="text-gray-500 text-center py-4">No members found</p>
              ) : (
                <div className="space-y-3">
                  {members.map((member) => (
                    <div key={member.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center gap-3">
                        <Avatar className="h-10 w-10">
                          <AvatarImage src={member.user.profile_image_url || undefined} />
                          <AvatarFallback>
                            {getUserInitials(member.user.first_name, member.user.last_name, member.user.email)}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <p className="font-medium">
                            {member.user.first_name && member.user.last_name 
                              ? `${member.user.first_name} ${member.user.last_name}`
                              : member.user.email
                            }
                          </p>
                          <p className="text-sm text-gray-600">{member.user.email}</p>
                          <p className="text-xs text-gray-500">
                            Joined {new Date(member.joined_at).toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge className={getRoleBadgeColor(member.role)}>
                          {member.role}
                        </Badge>
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {/* Pending Email Mappings */}
              {pendingMappings.length > 0 && (
                <div className="space-y-3">
                  <h4 className="font-medium text-gray-700 flex items-center gap-2">
                    <Clock className="h-4 w-4" />
                    Pending Invitations ({pendingMappings.length})
                  </h4>
                  {pendingMappings.map((mapping) => (
                    <div key={mapping.id} className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                      <div className="flex items-center gap-3">
                        <div className="h-10 w-10 bg-yellow-200 rounded-full flex items-center justify-center">
                          <Mail className="h-5 w-5 text-yellow-700" />
                        </div>
                        <div>
                          <p className="font-medium">{mapping.email}</p>
                          <p className="text-xs text-gray-500">
                            Invited {new Date(mapping.created_at).toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge className={getRoleBadgeColor(mapping.role)}>
                          {mapping.role}
                        </Badge>
                        <Clock className="h-4 w-4 text-yellow-500" />
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Close Button */}
          <div className="pt-4 border-t">
            <Button onClick={handleClose} variant="outline" className="w-full">
              Close
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

export default MemberManagementDialog
</file>

<file path="src/components/TokenRegenerationConfirmDialog.tsx">
import React from 'react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { AlertTriangle, Loader2, RefreshCw } from 'lucide-react'

interface Project {
  id: string
  name: string
  description: string
  environment: string
  created_at: string
  is_active: boolean
  token_hash?: string
}

interface TokenRegenerationConfirmDialogProps {
  isOpen: boolean
  project: Project | null
  isRegenerating: boolean
  onConfirm: () => void
  onCancel: () => void
}

const TokenRegenerationConfirmDialog: React.FC<TokenRegenerationConfirmDialogProps> = ({
  isOpen,
  project,
  isRegenerating,
  onConfirm,
  onCancel,
}) => {
  return (
    <Dialog open={isOpen} onOpenChange={onCancel}>
      <DialogContent className="sm:max-w-[480px]">
        <DialogHeader>
          <div className="flex items-center gap-3 mb-2">
            <div className="flex h-10 w-10 items-center justify-center rounded-full bg-orange-100">
              <AlertTriangle className="h-5 w-5 text-orange-600" />
            </div>
            <div>
              <DialogTitle className="text-left">Regenerate API Token</DialogTitle>
            </div>
          </div>
          <DialogDescription className="text-left">
            Are you sure you want to regenerate the API token for{' '}
            <strong>"{project?.name}"</strong>?
          </DialogDescription>
        </DialogHeader>

        <div className="py-4">
          <div className="space-y-3">
            <div className="flex items-start gap-3 p-3 bg-amber-50 border border-amber-200 rounded-lg">
              <AlertTriangle className="h-4 w-4 text-amber-600 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-amber-800">
                <p className="font-medium mb-1">This action will:</p>
                <ul className="list-disc list-inside space-y-1 text-xs">
                  <li>Generate a new API token</li>
                  <li>Immediately invalidate the current token</li>
                  <li>Require updating all applications using the old token</li>
                </ul>
              </div>
            </div>

            <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>Note:</strong> The new token will only be displayed once. 
                Make sure to save it securely before closing the dialog.
              </p>
            </div>
          </div>
        </div>

        <DialogFooter className="gap-2">
          <Button 
            variant="outline" 
            onClick={onCancel}
            disabled={isRegenerating}
          >
            Cancel
          </Button>
          <Button 
            variant="default"
            onClick={onConfirm}
            disabled={isRegenerating}
            className="bg-orange-600 hover:bg-orange-700"
          >
            {isRegenerating ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                Regenerating...
              </>
            ) : (
              <>
                <RefreshCw className="w-4 h-4 mr-2" />
                Regenerate Token
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

export default TokenRegenerationConfirmDialog
</file>

<file path="src/hooks/useOverviewQuery.ts">
import { useState, useEffect } from 'react'
import { supabase } from '../lib/supabase'

interface OverviewData {
  totalCalls: number
  totalMinutes: number
  successfulCalls: number
  successRate: number
  averageLatency: number
  totalCost:number
  uniqueCustomers: number
  dailyData: Array<{
    date: string
    dateKey: string
    calls: number
    minutes: number
  }>
}

interface UseOverviewQueryProps {
  agentId: string
  dateFrom: string // 'YYYY-MM-DD'
  dateTo: string   // 'YYYY-MM-DD'
}

export const useOverviewQuery = ({ agentId, dateFrom, dateTo }: UseOverviewQueryProps) => {
  const [data, setData] = useState<OverviewData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchOverviewData = async () => {
      try {
        setLoading(true)
        setError(null)
    
        // üîÑ Call the PostgreSQL function to refresh the materialized view
        const { error: refreshError } = await supabase.rpc('refresh_call_summary')
        console.log(refreshError)
        if (refreshError) throw refreshError

    
        // ‚úÖ Then query the refreshed materialized view
        const { data: dailyStats, error: queryError } = await supabase
          .from('call_summary_materialized')
          .select(`
            call_date,
            calls,
            total_minutes,
            avg_latency,
            unique_customers,
            successful_calls,
            success_rate,
            total_cost
          `)
          .eq('agent_id', agentId)
          .gte('call_date', dateFrom)
          .lte('call_date', dateTo)
          .order('call_date', { ascending: true })
            

          console.log(queryError)
        if (queryError) throw queryError
    
        const totalCalls = dailyStats?.reduce((sum, day) => sum + day.calls, 0) || 0
        const successfulCalls = dailyStats?.reduce((sum, day) => sum + day.successful_calls, 0) || 0
        const totalCost = dailyStats?.reduce((sum, day) => sum + day.total_cost, 0) || 0


    
        const typedData: OverviewData = {
          totalCalls,
          totalCost,
          totalMinutes: dailyStats?.reduce((sum, day) => sum + day.total_minutes, 0) || 0,
          successfulCalls,
          successRate: totalCalls > 0 ? (successfulCalls / totalCalls) * 100 : 0,
          averageLatency: dailyStats && dailyStats.length > 0
            ? dailyStats.reduce((sum, day) => sum + day.avg_latency, 0) / dailyStats.length
            : 0,
          uniqueCustomers: dailyStats?.reduce((sum, day) => sum + day.unique_customers, 0) || 0,
          dailyData: dailyStats?.map(day => ({
            date: day.call_date,
            dateKey: day.call_date,
            calls: day.calls,
            minutes: day.total_minutes,
            avg_latency: day.avg_latency
          })) || []
          
        }
    
        setData(typedData)
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An error occurred')
      } finally {
        setLoading(false)
      }
    }
    

    if (agentId && dateFrom && dateTo) {
      fetchOverviewData()
    }
  }, [agentId, dateFrom, dateTo])

  return { data, loading, error }
}
</file>

<file path="src/hooks/useSupabase.ts">
// hooks/useSupabase.ts - FIXED VERSION
'use client'
import { useState, useEffect, useCallback, useRef } from 'react'
import { supabase } from '../lib/supabase'

export const useInfiniteScroll = (table: string, options: any = {}) => {
  const [data, setData] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  const [hasMore, setHasMore] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [initialLoad, setInitialLoad] = useState(true)
  const offsetRef = useRef(0)
  const loadingRef = useRef(false) // Prevent concurrent requests
  const limit = options.limit || 50

  console.log(options)

  // Memoize options to prevent unnecessary re-renders
  const optionsHash = JSON.stringify(options)

  const fetchData = useCallback(async (reset = false) => {
    // Prevent concurrent requests
    if (loadingRef.current) return
    
    loadingRef.current = true
    setLoading(true)
    setError(null)
    
    try {
      const offset = reset ? 0 : offsetRef.current
      
      let query = supabase
        .from(table)
        .select(options.select || '*')
        .range(offset, offset + limit - 1)
      
      // Apply filters if provided
      if (options.filters) {
        options.filters.forEach((filter: any) => {
          query = query.filter(filter.column, filter.operator, filter.value)
        })
      }
      
      // Apply ordering
      if (options.orderBy) {
        query = query.order(options.orderBy.column, { ascending: options.orderBy.ascending })
      }
      
      const { data: newData, error } = await query
      
      if (error) throw error
      
      const fetchedData = newData || []
      
      if (reset) {
        setData(fetchedData)
        offsetRef.current = fetchedData.length
      } else {
        // Remove duplicates by checking existing IDs
        setData(prevData => {
          const existingIds = new Set(prevData.map(item => item.id))
          //@ts-ignore
          const uniqueNewData = fetchedData.filter(item => !existingIds.has(item.id))
          return [...prevData, ...uniqueNewData]
        })
        offsetRef.current += fetchedData.length
      }
      
      setHasMore(fetchedData.length === limit)
      
    } catch (err: any) {
      setError(err.message)
    } finally {
      setLoading(false)
      loadingRef.current = false
    }
  }, [table, optionsHash, limit])

  const loadMore = useCallback(() => {
    if (!loadingRef.current && hasMore && !initialLoad) {
      fetchData(false)
    }
  }, [fetchData, hasMore, initialLoad])

  const refresh = useCallback(() => {
    offsetRef.current = 0
    setInitialLoad(true)
    fetchData(true).then(() => setInitialLoad(false))
  }, [fetchData])

  // Initial load
  useEffect(() => {
    if (initialLoad) {
      fetchData(true).then(() => setInitialLoad(false))
    }
  }, [fetchData, initialLoad])

  return { data, loading, hasMore, error, loadMore, refresh }
}

// Alternative: Simple query hook without infinite scroll
export const useSupabaseQuery = (table: string, options: any = {}) => {
  const [data, setData] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const fetchData = useCallback(async () => {
    setLoading(true)
    setError(null)
    
    try {
      let query = supabase
        .from(table)
        .select(options.select || '*')
      
      if (options.filters) {
        options.filters.forEach((filter: any) => {
          query = query.filter(filter.column, filter.operator, filter.value)
        })
      }
      
      if (options.orderBy) {
        query = query.order(options.orderBy.column, { ascending: options.orderBy.ascending })
      }
      
      if (options.limit) {
        query = query.limit(options.limit)
      }
      
      const { data, error } = await query
      
      if (error) throw error
      
      setData(data || [])
    } catch (err: any) {
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }, [table, JSON.stringify(options)])

  useEffect(() => {
    fetchData()
  }, [fetchData])

  return { data, loading, error, refetch: fetchData }
}
</file>

<file path="src/lib/supabase.ts">
"use client"
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/types/logs.ts">
export interface CallLog {
  id: string
  call_id: string
  agent_id: string
  customer_number: string
  call_ended_reason: string
  transcript_type: string
  transcript_json: any
  metadata: any
  environment: string
  call_started_at: string
  call_ended_at: string
  avg_latency?: number
  recording_url: string
  duration_seconds: number
  created_at: string
  transcription_metrics?: any
  total_llm_cost?: number
  total_tts_cost?: number
  total_stt_cost?: number
  total_cost?:number
}
</file>

<file path="src/utils/constants.ts">
export const plivoRate = 0.70;
</file>

<file path="src/utils/cost.ts">
export function telecomCost(
    durationSeconds: number,
    ratePaisePerMin: number = 0.7 * 100 // 0.7 paise = ‚Çπ0.007; default per user request
  ): number {
    const minutes = Math.ceil(durationSeconds / 60) || 1;
    return (ratePaisePerMin / 100) * minutes;
  }
</file>

<file path="src/utils/s3.ts">
export const extractS3Key = (s3Url: string): string => {
  if (!s3Url) return ''
  
  // Handle different S3 URL formats
  if (s3Url.includes('amazonaws.com')) {
    // Format: https://bucket.s3.region.amazonaws.com/key
    const parts = s3Url.split('amazonaws.com/')
    return parts[1] || ''
  } else if (s3Url.includes('s3://')) {
    // Format: s3://bucket/key
    const parts = s3Url.replace('s3://', '').split('/')
    return parts.slice(1).join('/')
  }
  
  return s3Url // Assume it's already a key
}
</file>

<file path=".env.example">
# ---- Supabase ----
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key

# ---- AWS S3 ----
AWS_REGION=ap-south-1
AWS_ACCESS_KEY_ID=your-aws-access-key-id
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key
AWS_S3_BUCKET=your-s3-bucket-name

# ---- JWT ----
JWT_SECRET=your-jwt-secret

# ---- Clerk Auth ----
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL=/
NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL=/
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your-clerk-publishable-key
CLERK_SECRET_KEY=your-clerk-secret-key
CLERK_WEBHOOK_SIGNING_SECRET=your-clerk-webhook-signing-secret

# ---- Node ----
NODE_ENV=development
</file>

<file path=".gitattributes">
# Auto detect text files and perform LF normalization
* text=auto
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "stone",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="sdk/setup.py">
from setuptools import setup, find_packages

setup(
    name="whispy",
    version="1.0.0",
    author="Pype AI Voice Analytics",
    author_email="support@pype.ai",
    description="Voice Analytics SDK for AI Agents",
    long_description="Monitor, track, and analyze AI voice agent conversations with Pype's advanced analytics platform.",
    url="https://pypeai.com/home",
    packages=find_packages(),
    classifiers=[
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
    ],
    python_requires=">=3.8",
    install_requires=[
        "livekit-agents>=1.2.2",
        "aiohttp>=3.8.0",
        "python-dotenv>=1.0.0",
    ],
    keywords="voice analytics, AI agents, conversation intelligence, pype"
)
</file>

<file path="src/app/[projectid]/agents/page.tsx">
'use client'
import { useParams } from 'next/navigation'
import AgentSelection from '@/components/agents/AgentSelection'

export default function ProjectAgentsPage() {
  const params = useParams()
  const projectId = params.projectid as string

  return <AgentSelection projectId={projectId} />
}
</file>

<file path="src/app/agents/[agentid]/page.tsx">
'use client'
import { useParams } from 'next/navigation'
import { useEffect, useState } from 'react'
import Dashboard from '@/components/Dashboard'
import { Loader2, AlertCircle } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { useRouter } from 'next/navigation'

export default function AgentDashboardPage() {
  const params = useParams()
  const router = useRouter()
  const [agentId, setAgentId] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    // Wait for params to be properly loaded
    if (params && params.agentid) {
      const id = Array.isArray(params.agentid) ? params.agentid[0] : params.agentid
      setAgentId(id)
    }
    setIsLoading(false)
  }, [params])

  if (isLoading) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center space-y-4">
          <Loader2 className="w-8 h-8 animate-spin text-blue-500 mx-auto" />
          <p className="text-gray-600">Loading...</p>
        </div>
      </div>
    )
  }

  if (!agentId) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center space-y-4">
          <AlertCircle className="w-12 h-12 text-red-500 mx-auto" />
          <h2 className="text-xl font-semibold text-gray-900">Invalid Agent ID</h2>
          <p className="text-gray-600 max-w-md">
            The agent ID in the URL is invalid or missing.
          </p>
          <Button variant="outline" onClick={() => router.push('/')}>
            Go Home
          </Button>
        </div>
      </div>
    )
  }

  return <Dashboard agentId={agentId} />
}
</file>

<file path="src/app/api/agents/[id]/route.ts">
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

// Create Supabase client for server-side operations
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseAnonKey)

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: agentId } = await params

    if (!agentId) {
      return NextResponse.json(
        { error: 'Agent ID is required' },
        { status: 400 }
      )
    }

    // Start cascade deletion process
    console.log(`Starting cascade delete for agent: ${agentId}`)

    // 1. Delete call logs for this agent
    const { error: callLogsError } = await supabase
      .from('pype_voice_call_logs')
      .delete()
      .eq('agent_id', agentId)

    if (callLogsError) {
      console.error('Error deleting call logs:', callLogsError)
      return NextResponse.json(
        { error: 'Failed to delete call logs' },
        { status: 500 }
      )
    }
    console.log('Successfully deleted call logs')

    // 2. Delete metrics logs (adjust based on your schema relationships)
    const { error: metricsError } = await supabase
      .from('pype_voice_metrics_logs')
      .delete()
      .eq('session_id', agentId) // Adjust this field based on your actual schema

    // Don't fail if metrics logs have different relationships
    if (metricsError) {
      console.warn('Warning: Could not delete metrics logs:', metricsError)
    } else {
      console.log('Successfully deleted metrics logs')
    }

    console.log('Successfully deleted auth tokens')

    // 4. Finally, delete the agent itself
    const { error: agentError } = await supabase
      .from('pype_voice_agents')
      .delete()
      .eq('id', agentId)

    if (agentError) {
      console.error('Error deleting agent:', agentError)
      return NextResponse.json(
        { error: 'Failed to delete agent' },
        { status: 500 }
      )
    }
    
    console.log(`Successfully deleted agent: ${agentId}`)

    return NextResponse.json(
      { 
        message: 'Agent and all related data deleted successfully'
      },
      { status: 200 }
    )

  } catch (error) {
    console.error('Unexpected error during agent deletion:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
</file>

<file path="src/app/api/projects/[id]/members/route.ts">
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { auth, currentUser } from '@clerk/nextjs/server'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

export async function POST(
  request: NextRequest,
  { params }: { params:any }
) {
  try {
    const { userId } = await auth()
    const user = await currentUser()

    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const projectId = params.id // UUID, no parseInt()

    console.log("projectId",projectId)

    const body = await request.json()
    const { email, role = 'member' } = body

    if (!email || !email.trim()) {
      return NextResponse.json({ error: 'Email is required' }, { status: 400 })
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email.trim())) {
      return NextResponse.json({ error: 'Invalid email format' }, { status: 400 })
    }

    const userEmail = user?.emailAddresses?.[0]?.emailAddress


    console.log("userEmail", userEmail)
    // Check current user access to project
    const { data: userProject } = await supabase
      .from('pype_voice_email_project_mapping')
      .select('role')
      .eq('email', userEmail)
      .eq('project_id', projectId)
      .single()
      

    let hasAdminAccess = false

    console.log("userProjects", userProject)

    if (userProject && ['admin', 'owner'].includes(userProject.role)) {
      hasAdminAccess = true
    } 

    if (!hasAdminAccess) {
      return NextResponse.json(
        { error: 'Admin access required to add members' },
        { status: 403 }
      )
    }

    // Check if already added by email
    const { data: existingMapping } = await supabase
      .from('pype_voice_email_project_mapping')
      .select('id')
      .eq('email', email.trim())
      .eq('project_id', projectId)
      .single()

    if (existingMapping) {
      return NextResponse.json({ error: 'Email already added to project' }, { status: 400 })
    }

    // Check if user already exists in users table
    const { data: existingUser } = await supabase
      .from('pype_voice_users')
      .select('clerk_id')
      .eq('email', email.trim())
      .single()

    const permissions = getPermissionsByRole(role)

    if (existingUser?.clerk_id) {
      // If the user exists, check if they‚Äôre already mapped
      const { data: existingUserProject } = await supabase
        .from('pype_voice_email_project_mapping')
        .select('id')
        .eq('clerk_id', existingUser.clerk_id)
        .eq('project_id', projectId)
        .single()

      if (existingUserProject) {
        return NextResponse.json(
          { error: 'User is already a member of this project' },
          { status: 400 }
        )
      }

      // Insert mapping using clerk_id
      const { data: newMapping, error } = await supabase
        .from('pype_voice_email_project_mapping')
        .insert({
          clerk_id: existingUser.clerk_id,
          email: email.trim(),
          project_id: projectId,
          role,
          permissions,
          added_by_clerk_id: userId,
          is_active: true,
        })
        .select()
        .single()

      if (error) {
        console.error(error)
        return NextResponse.json({ error: 'Failed to add member' }, { status: 500 })
      }

      return NextResponse.json({ message: 'User added to project', member: newMapping }, { status: 201 })
    } else {
      // Create pending email-based invite
      const { data: mapping, error } = await supabase
        .from('pype_voice_email_project_mapping')
        .insert({
          email: email.trim(),
          project_id: projectId,
          role,
          permissions,
          added_by_clerk_id: userId,
          is_active: true,
        })
        .select()
        .single()

      if (error) {
        console.error('Insert error:', error)
        return NextResponse.json({ error: 'Failed to add member' }, { status: 500 })
      }

      return NextResponse.json(
        {
          message: 'Email added to project successfully. User will be added when they sign up.',
          member: mapping,
          type: 'email_mapping'
        },
        { status: 201 }
      )
    }
  } catch (error) {
    console.error('Unexpected error adding member:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function GET(
  request: NextRequest,
  context: any
) {
  try {
    const { userId } = await auth()
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { params } = await context;

    const projectId = params.id

    const { data: accessCheck,error:accessError } = await supabase
      .from('pype_voice_email_project_mapping')
      .select('id')
      .eq('clerk_id', userId)
      .eq('project_id', projectId)
      .eq('is_active', true)
      .single()
    

    if(accessError)
    {
      console.error("Access error:", accessError)
      return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }

    if (!accessCheck) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 })
    }


    const { data: members, error } = await supabase
    .from('pype_voice_email_project_mapping')
    .select(`
      id,
      clerk_id,
      email,
      role,
      permissions,
      is_active,
      added_by_clerk_id,
      user:pype_voice_users!fk_mail_id(*)
    `)
    .eq('project_id', projectId)
    .eq('is_active', true)
  
    console.log("error",error)

    console.log("members", members)

    return NextResponse.json({ members: members || [] }, { status: 200 })
  } catch (error) {
    console.error('Unexpected error fetching members:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

function getPermissionsByRole(role: string): Record<string, boolean> {
  const rolePermissions: Record<string, Record<string, boolean>> = {
    viewer: { read: true, write: false, delete: false, admin: false },
    member: { read: true, write: true, delete: false, admin: false },
    admin: { read: true, write: true, delete: true, admin: false },
    owner: { read: true, write: true, delete: true, admin: true },
  }

  return rolePermissions[role] || rolePermissions['member']
}
</file>

<file path="src/app/api/validate-sso-token/route.ts">
// app/api/validate-sso-token/route.ts
import { NextRequest, NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const token = searchParams.get('token');

  if (!token) {
    return NextResponse.json(
      { valid: false, error: "Token is required" },
      { status: 400 }
    );
  }

  try {
    const jwtSecret = process.env.JWT_SECRET || "default-jwt-secret-change-in-production";

    // Decode and verify the token
    const payload = jwt.verify(token, jwtSecret) as any;

    // Check if token is expired manually (optional ‚Äî jwt.verify already does it)
    const now = Math.floor(Date.now() / 1000);
    if (payload.exp && payload.exp < now) {
      return NextResponse.json(
        { valid: false, error: "Token has expired" },
        { status: 401 }
      );
    }

    return NextResponse.json({
      valid: true,
      user_email: payload.user_email,
      user_id: payload.user_id,
      agent_info: payload.agent_info || {},
      expires_at: new Date(payload.exp * 1000).toISOString(),
    });
  } catch (err: any) {
    if (err.name === "TokenExpiredError") {
      return NextResponse.json(
        { valid: false, error: "Token has expired" },
        { status: 401 }
      );
    }
    return NextResponse.json(
      { valid: false, error: `Invalid token: ${err.message}` },
      { status: 401 }
    );
  }
}
</file>

<file path="src/app/auth/callback/page.tsx">
'use client';

import { useEffect, useState, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';

// Inner component that uses useSearchParams
function CallbackComponent() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const token = searchParams.get('token');
    const redirect = searchParams.get('redirect');

    if (!token || !redirect) {
      setError('Missing token or redirect URL');
      return;
    }

    const validateToken = async () => {
      try {
        const res = await fetch(`/api/validate-sso-token?token=${token}`);
        const data = await res.json();

        if (res.ok && data.valid) {
          // Token valid, redirect
          router.replace(redirect);
        } else {
          setError(data.detail || 'Invalid token');
        }
      } catch (err) {
        setError('Something went wrong while validating the token');
      }
    };

    validateToken();
  }, [searchParams, router]);

  if (error) {
    return <div style={{ padding: '2rem', color: 'red' }}>SSO Error: {error}</div>;
  }

  return <div style={{ padding: '2rem' }}>Validating, please wait...</div>;
}

// Default export with Suspense boundary
export default function CallbackPage() {
  return (
    <Suspense fallback={<div style={{ padding: '2rem' }}>Loading...</div>}>
      <CallbackComponent />
    </Suspense>
  );
}
</file>

<file path="src/app/dashboard/page.tsx">
import ProjectSelection from "@/components/projects/ProjectSelection";

export default function Dashboard(){
    return <ProjectSelection/>
}
</file>

<file path="src/components/calls/CallLogs.tsx">
"use client"

import type React from "react"
import { useState, useEffect, useRef, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Phone, Clock, CheckCircle, XCircle, Loader2, AlertCircle, RefreshCw } from "lucide-react"
import { useInfiniteScroll } from "../../hooks/useSupabase"
import CallDetailsDrawer from "./CallDetailsDrawer"
import CallFilter, { FilterRule } from "../CallFilter"
import ColumnSelector from "../shared/ColumnSelector"
import { cn } from "@/lib/utils"
import { CostTooltip } from "../tool-tip/costToolTip"
import { CallLog } from "../../types/logs"
import { supabase } from "../../lib/supabase"
import Papa from 'papaparse'


interface CallLogsProps {
  project: any
  agent: any
  onBack: () => void
}

function flattenAndPickColumns(
  row: CallLog,
  basic: string[],
  metadata: string[],
  transcription: string[]
): Record<string, any> {
  const flat: Record<string, any> = {};

  // Basic columns (skip "total_cost")
  for (const key of basic) {
    if (key in row) {
      flat[key] = row[key as keyof CallLog];
    }
  }

  // Metadata columns
  if (row.metadata && typeof row.metadata === "object") {
    for (const key of metadata) flat[key] = row.metadata[key];
  }

  // Transcription metrics columns
  if (row.transcription_metrics && typeof row.transcription_metrics === "object") {
    for (const key of transcription) flat[key] = row.transcription_metrics[key];
  }

  return flat;
}



const TruncatedText: React.FC<{ 
  text: string; 
  maxLength?: number;
  className?: string;
}> = ({ text, maxLength = 30, className = "" }) => {
  const truncated = text.length > maxLength ? `${text.substring(0, maxLength)}...` : text
  
  return (
    <span 
      className={cn("break-words", className)}
      title={text.length > maxLength ? text : undefined}
    >
      {truncated}
    </span>
  )
}

// Dynamic JSON Cell Component - Fixed version with better text handling
const DynamicJsonCell: React.FC<{ 
  data: any; 
  fieldKey: string;
  maxWidth?: string;
}> = ({ data, fieldKey, maxWidth = "180px" }) => {
  if (!data || typeof data !== 'object') {
    return <span className="text-muted-foreground text-xs">-</span>
  }

  const value = data[fieldKey]
  
  if (value === undefined || value === null) {
    return <span className="text-muted-foreground text-xs">-</span>
  }

  // Handle different data types
  if (typeof value === 'object') {
    const jsonString = JSON.stringify(value, null, 2)
    const truncatedJson = jsonString.length > 80 ? jsonString.substring(0, 80) + '...' : jsonString
    
    return (
      <div 
        className="w-full max-w-full overflow-hidden border rounded-md bg-muted/20"
        style={{ maxWidth }}
      >
        <div className="p-1.5 w-full overflow-hidden">
          <pre 
            className="text-xs font-mono text-foreground whitespace-pre-wrap break-all overflow-hidden w-full"
            style={{ 
              wordBreak: 'break-all',
              overflowWrap: 'break-word',
              maxWidth: '100%'
            }}
            title={jsonString}
          >
            {truncatedJson}
          </pre>
        </div>
      </div>
    )
  }

  // Handle primitive values - truncate long strings
  const stringValue = String(value)
  const shouldTruncate = stringValue.length > 25
  const displayValue = shouldTruncate ? stringValue.substring(0, 25) + '...' : stringValue

  return (
    <div 
      className="text-xs w-full overflow-hidden" 
      style={{ maxWidth }}
    >
      <span 
        className="text-foreground font-medium block w-full overflow-hidden"
        style={{ 
          wordBreak: 'break-all',
          overflowWrap: 'break-word',
          textOverflow: 'ellipsis',
          whiteSpace: 'nowrap'
        }}
        title={shouldTruncate ? stringValue : undefined}
      >
        {displayValue}
      </span>
    </div>
  )
}





const CallLogs: React.FC<CallLogsProps> = ({ project, agent, onBack }) => {

  const basicColumns = useMemo(
    () => [
      { key: "customer_number", label: "Customer Number" },
      { key: "call_id", label: "Call ID" },
      { key: "call_ended_reason", label: "Call Status" },
      { key: "duration_seconds", label: "Duration" },
      {
        key: "total_cost",
        label: "Total Cost (‚Çπ)",
      },
      { key: "call_started_at", label: "Start Time" },
      { key: "avg_latency", label: "Avg Latency (ms)" },
      { key: "total_llm_cost", label: "LLM Cost (‚Çπ)", hidden: true },
      { key: "total_tts_cost", label: "TTS Cost (‚Çπ)", hidden: true },
      { key: "total_stt_cost", label: "STT Cost (‚Çπ)", hidden: true }
    ],
    [],
  )

  
  const [selectedCall, setSelectedCall] = useState<CallLog | null>(null)
  const [activeFilters, setActiveFilters] = useState<FilterRule[]>([])
  const [visibleColumns, setVisibleColumns] = useState<{
    basic: string[]
    metadata: string[]
    transcription_metrics: string[]
  }>({
    basic: basicColumns.filter(col => !col.hidden).map(col => col.key), // initially show all
    metadata: [],
    transcription_metrics: []
  })



  // Convert FilterRule[] to Supabase filter format
  const convertToSupabaseFilters = (filters: FilterRule[]) => {
    const supabaseFilters = [{ column: "agent_id", operator: "eq", value: agent.id }]
    
    filters.forEach(filter => {
      // Determine the column name (with JSONB path if applicable)
      // Use ->> for text operations, -> for existence checks and numeric comparisons
      const getColumnName = (forTextOperation = false) => {
        if (!filter.jsonField) return filter.column
        
        if (forTextOperation) {
          return `${filter.column}->>${filter.jsonField}` // Double arrow for text extraction
        } else {
          return `${filter.column}->${filter.jsonField}` // Single arrow for JSONB data
        }
      }
      
      switch (filter.operation) {
        // Regular operations
        case 'equals':
          if (filter.column === 'call_started_at') {
            const startOfDay = `${filter.value} 00:00:00`
            const endOfDay = `${filter.value} 23:59:59.999`
            supabaseFilters.push({ 
              column: filter.column, 
              operator: 'gte', 
              value: startOfDay
            })
            supabaseFilters.push({ 
              column: filter.column, 
              operator: 'lte', 
              value: endOfDay
            })
          } else {
            supabaseFilters.push({ 
              column: getColumnName(false), 
              operator: 'eq', 
              value: filter.value 
            })
          }
          break
          
        case 'contains':
          supabaseFilters.push({ 
            column: getColumnName(true), // Use ->> for text operations
            operator: 'ilike', 
            value: `%${filter.value}%` 
          })
          break
          
        case 'starts_with':
          supabaseFilters.push({ 
            column: getColumnName(true), // Use ->> for text operations
            operator: 'ilike', 
            value: `${filter.value}%` 
          })
          break
          
        case 'greater_than':
          if (filter.column === 'call_started_at') {
            const nextDay = new Date(filter.value)
            nextDay.setDate(nextDay.getDate() + 1)
            const nextDayStr = nextDay.toISOString().split('T')[0]
            supabaseFilters.push({ 
              column: filter.column, 
              operator: 'gte', 
              value: `${nextDayStr} 00:00:00`
            })
          } else {
            supabaseFilters.push({ 
              column: getColumnName(false), 
              operator: 'gt', 
              value: filter.value 
            })
          }
          break
          
        case 'less_than':
          if (filter.column === 'call_started_at') {
            supabaseFilters.push({ 
              column: filter.column, 
              operator: 'lt', 
              value: `${filter.value} 00:00:00`
            })
          } else {
            supabaseFilters.push({ 
              column: getColumnName(false), 
              operator: 'lt', 
              value: filter.value 
            })
          }
          break
  
        // JSONB-specific operations
        case 'json_equals':
          supabaseFilters.push({ 
            column: getColumnName(true), // Use ->> for text comparison
            operator: 'eq', 
            value: filter.value 
          })
          break
          
        case 'json_contains':
          supabaseFilters.push({ 
            column: getColumnName(true), // Use ->> for text operations
            operator: 'ilike', 
            value: `%${filter.value}%` 
          })
          break
          
        case 'json_greater_than':
          // For numeric JSONB fields, use -> and cast to numeric
          supabaseFilters.push({ 
            column: `${getColumnName(false)}::numeric`, 
            operator: 'gt', 
            value: parseFloat(filter.value) 
          })
          break
          
        case 'json_less_than':
          // For numeric JSONB fields, use -> and cast to numeric
          supabaseFilters.push({ 
            column: `${getColumnName(false)}::numeric`, 
            operator: 'lt', 
            value: parseFloat(filter.value) 
          })
          break
          
        case 'json_exists':
          // Check if the JSONB field exists (is not null)
          supabaseFilters.push({ 
            column: getColumnName(false), // Use -> for existence check
            operator: 'not.is', 
            value: null 
          })
          break
          
        default:
          console.warn(`Unknown filter operation: ${filter.operation}`)
          break
      }
    })
    
    return supabaseFilters
  }

  const handleColumnChange = (type: 'basic' | 'metadata' | 'transcription_metrics', column: string, visible: boolean) => {
    setVisibleColumns(prev => ({
      ...prev,
      [type]: visible 
        ? [...prev[type], column]
        : prev[type].filter(col => col !== column)
    }))
    }
    
    const handleSelectAll = (type: 'basic' | 'metadata' | 'transcription_metrics', visible: boolean) => {
      setVisibleColumns(prev => ({
        ...prev,
        [type]: visible
          ? (type === "basic" ? basicColumns.map(col => col.key) : dynamicColumns[type])
          : []
      }))
    }
  


  const queryOptions = useMemo(
    () => ({
      select: `
      id,
      call_id,
      customer_number,
      call_ended_reason,
      call_started_at,
      call_ended_at,
      duration_seconds,
      recording_url,
      metadata,
      environment,
      transcript_type,
      avg_latency,
      transcript_json,
      created_at,
      transcription_metrics,
      total_llm_cost,
      total_tts_cost,
      total_stt_cost
    `,
      filters: convertToSupabaseFilters(activeFilters),
      orderBy: { column: "created_at", ascending: false },
      limit: 50,
    }),
    [agent.id, activeFilters],
  )

  

  const { data: calls, loading, hasMore, error, loadMore, refresh } = useInfiniteScroll("pype_voice_call_logs", queryOptions)

  // Extract all unique keys from metadata and transcription_metrics across all calls
  const dynamicColumns = useMemo(() => {
    const metadataKeys = new Set<string>()
    const transcriptionKeys = new Set<string>()

    calls.forEach((call: CallLog) => {
      // Extract metadata keys
      if (call.metadata && typeof call.metadata === 'object') {
        Object.keys(call.metadata).forEach(key => metadataKeys.add(key))
      }

      // Extract transcription_metrics keys
      if (call.transcription_metrics && typeof call.transcription_metrics === 'object') {
        Object.keys(call.transcription_metrics).forEach(key => transcriptionKeys.add(key))
      }
    })

    return {
      metadata: Array.from(metadataKeys).sort(),
      transcription_metrics: Array.from(transcriptionKeys).sort()
    }
  }, [calls])

  // Initialize visible columns when dynamic columns change
  useEffect(() => {
    setVisibleColumns((prev) => ({
      basic: prev.basic ?? basicColumns.map((col) => col.key),
      metadata: Array.from(
        new Set(
          (prev.metadata.length === 0 ? dynamicColumns.metadata : prev.metadata.filter((col) => dynamicColumns.metadata.includes(col)))
        )
      ),
      transcription_metrics: Array.from(
        new Set(
          (prev.transcription_metrics.length === 0 ? dynamicColumns.transcription_metrics : prev.transcription_metrics.filter((col) => dynamicColumns.transcription_metrics.includes(col)))
        )
      ),
    }))
  }, [dynamicColumns, basicColumns])
  

  const handleDownloadCSV = async () => {
    const { basic, metadata, transcription_metrics } = visibleColumns;
  
    // Build Supabase select string
    // Always fetch metadata and transcription_metrics if you need their subfields
    const selectColumns = [
      ...(basic.filter(col => col !== "total_cost")), // Exclude total_cost from basic
      ...(metadata.length ? ["metadata"] : []),
      ...(transcription_metrics.length ? ["transcription_metrics"] : []),
    ].join(",");
  
    // Build base query
    let query = supabase
      .from("pype_voice_call_logs")
      .select(selectColumns);
  
    // Apply filters
    for (const { column, operator, value } of convertToSupabaseFilters(activeFilters)) {
      // Typesafe way, assuming only .eq, .ilike, .gte, .lte etc
      // @ts-ignore
      query = query[operator](column, value);
    }
  
    // Fetch in chunks for large data sets
    let allData: CallLog[] = [];
    let page = 0;
    const pageSize = 1000;
    let done = false;
  
    while (!done) {
      const { data, error } = await query.range(page * pageSize, (page + 1) * pageSize - 1);
      if (error) {
        alert("Failed to fetch data for export: " + error.message);
        return;
      }
      if (data) {
        allData = allData.concat(data as unknown as CallLog[]);
        if (data.length < pageSize) done = true;
        else page += 1;
      } else {
        done = true;
      }
    }
  
    // Map/flatten for CSV according to selected columns
    const csvData = allData.map((row) =>
      flattenAndPickColumns(row, basic, metadata, transcription_metrics)
    );
  
    // Build CSV and trigger download
    const csv = Papa.unparse(csvData);
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.setAttribute("download", "call_logs.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Calculate total dynamic columns for table width
  const totalVisibleColumns = visibleColumns.metadata.length + visibleColumns.transcription_metrics.length
  const baseWidth = 1020 // Fixed columns width
  const dynamicWidth = totalVisibleColumns * 200 // 200px per dynamic column
  const minTableWidth = baseWidth + dynamicWidth

  const loadMoreRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    refresh()
  }, [activeFilters])

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && hasMore && !loading) {
          loadMore()
        }
      },
      { threshold: 0.1 },
    )

    if (loadMoreRef.current) {
      observer.observe(loadMoreRef.current)
    }

    return () => observer.disconnect()
  }, [hasMore, loading, loadMore])

  const handleFiltersChange = (filters: FilterRule[]) => {
    setActiveFilters(filters)
    setTimeout(() => refresh(), 100)
  }

  const handleClearFilters = () => {
    setActiveFilters([])
    setTimeout(() => refresh(), 100)
  }

  const handleRefresh = () => {
    refresh()
  }


  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, "0")}`
  }

  const formatToIndianDateTime = (timestamp: any) => {
    const date = new Date(timestamp)
    const indianTime = new Date(date.getTime() + (5.5 * 60 * 60 * 1000))
    
    return indianTime.toLocaleString('en-IN', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    })
  }

  if (error) {
    return (
      <div className="p-6">
        <div className="flex items-center justify-center py-12">
          <div className="text-center space-y-4">
            <AlertCircle className="w-12 h-12 text-red-500 mx-auto" />
            <h3 className="text-lg font-semibold text-gray-900">Unable to load calls</h3>
            <p className="text-gray-600">{error}</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="flex-1 flex flex-col min-h-0 overflow-hidden">
      {/* Header with Filters and Column Selector */}
      <div className="flex-none p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="flex items-center justify-between">
          <CallFilter 
            onFiltersChange={handleFiltersChange}
            onClear={handleClearFilters}
            availableMetadataFields={dynamicColumns.metadata}
            availableTranscriptionFields={dynamicColumns.transcription_metrics}
          />
          
          <div className="flex items-center gap-2">
          <Button
              variant="outline"
              size="sm"
              onClick={handleDownloadCSV}
              disabled={loading}
            >
              Download CSV
            </Button>
            <ColumnSelector
              basicColumns={basicColumns.map((col) => col.key)}
              basicColumnLabels={Object.fromEntries(basicColumns.filter(col => !col.hidden).map((col) => [col.key, col.label]))}
              metadataColumns={dynamicColumns.metadata}
              transcriptionColumns={dynamicColumns.transcription_metrics}
              visibleColumns={visibleColumns}
              onColumnChange={handleColumnChange}
              onSelectAll={handleSelectAll}
            />
            <Button
              variant="outline"
              size="sm"
              onClick={handleRefresh}
              disabled={loading}
              className="gap-2 h-8 w-8 p-0"
            >
              <RefreshCw className={`h-3 w-3 ${loading ? 'animate-spin' : ''}`} />
            </Button>
            
          </div>
        </div>
      </div>

      {/* Horizontally Scrollable Table Container */}
      <div className="flex-1 overflow-y-auto min-h-0">
      {loading && calls.length === 0 ? (
          <div className="flex items-center justify-center py-12">
            <div className="text-center space-y-4">
              <Loader2 className="w-8 h-8 animate-spin text-primary mx-auto" />
              <p className="text-muted-foreground">Loading calls...</p>
            </div>
          </div>
        ) : calls.length === 0 && !loading ? (
          <div className="text-center py-12">
            <Phone className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">
              {activeFilters.length > 0 ? "No calls match your filters" : "No calls found"}
            </h3>
            <p className="text-muted-foreground">
              {activeFilters.length > 0
                ? "Try adjusting your filters to find what you're looking for."
                : "Calls will appear here once your agent starts handling conversations."}
            </p>
          </div>
          ) : (
      <div className="h-full overflow-x-auto overflow-y-hidden"> {/* Horizontal scroll container */}
        <div className="h-full overflow-y-auto" style={{ minWidth: `${minTableWidth}px` }}> {/* Vertical scroll with min-width */}
          <Table className="w-full ">
                <TableHeader className="sticky top-0 z-10 bg-background/95 backdrop-blur-sm border-b-2">
                  <TableRow className="bg-muted/80 hover:bg-muted/80">
                    {/* Fixed Columns */}
                    {visibleColumns.basic.map((key) => {
                      const col = basicColumns.find((c) => c.key === key)
                      return (
                        <TableHead key={`basic-${key}`} className="font-semibold text-foreground min-w-[120px]">
                          {col?.label ?? key}
                        </TableHead>
                      )
                    })}

                    {/* Dynamic Metadata Columns */}
                    {visibleColumns.metadata.map((key) => (
                      <TableHead 
                        key={`metadata-${key}`} 
                        className="w-[200px] font-semibold text-foreground bg-blue-50/50 dark:bg-blue-950/20 border-r border-blue-200/50"
                      >
                        <div className="flex flex-col">
                          <span className="text-sm">{key}</span>
                        </div>
                      </TableHead>
                    ))}
                    
                    {/* Dynamic Transcription Metrics Columns */}
                    {visibleColumns.transcription_metrics.map((key, index) => (
                      <TableHead 
                        key={`transcription-${key}`} 
                        className={cn(
                          "w-[200px] font-semibold text-foreground bg-blue-50/50 dark:bg-blue-950/20",
                          index === 0 && visibleColumns.metadata.length === 0 && "border-l-2 border-primary/30",
                          index < visibleColumns.transcription_metrics.length - 1 && "border-r border-blue-200/50"
                        )}
                      >
                        <div className="flex flex-col">
                          <span className="text-sm">{key}</span>
                        </div>
                      </TableHead>
                    ))}
                  </TableRow>
                </TableHeader>
                <TableBody className="overflow-auto">
                  {calls.map((call: CallLog) => (
                    <TableRow
                      key={call.id}
                      className={cn(
                        "cursor-pointer hover:bg-muted/30 transition-all duration-200 border-b border-border/50",
                        selectedCall?.id === call.id && "bg-muted/50",
                      )}
                      onClick={() => setSelectedCall(call)}
                    >
              {visibleColumns.basic.map((key) => {
                let value: React.ReactNode = "-"

                switch (key) {
                  case "customer_number":
                    value = (
                      <div className="flex w-full items-center gap-3">
                        <div className="w-10 h-8 rounded-full  flex items-center justify-center">
                          <Phone className="w-4 h-4 text-primary" />
                        </div>
                        <span className="font-medium">{call.customer_number}</span>
                      </div>
                    )
                    break
                  case "call_id":
                    value = (
                      <code className="text-xs bg-muted/60 px-3 py-1.5 rounded-md font-mono">
                        {call.call_id.slice(-8)}
                      </code>
                    )
                    break
                  case "call_ended_reason":
                    value = (
                      <Badge
                        variant={call.call_ended_reason === "completed" ? "default" : "destructive"}
                        className="text-xs font-medium px-2.5 py-1"
                      >
                        {call.call_ended_reason === "completed" ? (
                          <CheckCircle className="w-3 h-3 mr-1.5" />
                        ) : (
                          <XCircle className="w-3 h-3 mr-1.5" />
                        )}
                        {call.call_ended_reason}
                      </Badge>
                    )
                    break
                  case "duration_seconds":
                    value = (
                      <div className="flex items-center gap-2 text-sm font-medium">
                        <Clock className="w-3 h-3 text-muted-foreground" />
                        {formatDuration(call.duration_seconds)}
                      </div>
                    )
                    break
                  case "call_started_at":
                    value = formatToIndianDateTime(call.call_started_at)
                    break
                  case "avg_latency":
                    value = call?.avg_latency ? (
                      <span className="font-mono">{call.avg_latency.toFixed(2)}s</span>
                    ) : "-"
                    break
                  case "total_cost":
                    value = call?.total_llm_cost || call?.total_tts_cost || call?.total_stt_cost ? (
                      <CostTooltip call={call}/>
                    ) : "-"
                    break
                }

                return (
                  <TableCell key={`basic-${call.id}-${key}`} className="py-4">
                    {value}
                  </TableCell>
                )
              })}
              {/* Dynamic Metadata Columns */}
              {visibleColumns.metadata.map((key) => (
                <TableCell 
                  key={`metadata-${call.id}-${key}`} 
                  className="py-4 bg-blue-50/30 dark:bg-blue-950/10 border-r border-blue-200/50"
                >
                  <DynamicJsonCell 
                    data={call.metadata} 
                    fieldKey={key}
                    maxWidth="180px"
                  />
                </TableCell>
              ))}

              {/* Dynamic Transcription Metrics Columns */}
              {visibleColumns.transcription_metrics.map((key, index) => (
                <TableCell 
                  key={`transcription-${call.id}-${key}`} 
                  className={cn(
                    "py-4 bg-blue-50/30 dark:bg-blue-950/10",
                    index === 0 && visibleColumns.metadata.length === 0 && "border-l-2 border-primary/30",
                    index < visibleColumns.transcription_metrics.length - 1 && "border-r border-blue-200/50"
                  )}
                >
                  <DynamicJsonCell 
                    data={call.transcription_metrics} 
                    fieldKey={key}
                    maxWidth="180px"
                  />
                </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableBody>

              </Table>
                {/* Load More Trigger */}
                {hasMore && (
                  <div ref={loadMoreRef} className="py-6 border-t">
                    {loading && <Loader2 className="w-6 h-6 animate-spin text-primary" />}
                  </div>
                )}

                {/* End of List */}
                {!hasMore && calls.length > 0 && (
                  <div className="py-4 text-muted-foreground text-sm border-t">
                    All calls loaded ({calls.length} total)
                  </div>
                )}
            </div>
          </div>
        )}
      </div>
      <CallDetailsDrawer 
        isOpen={!!selectedCall} 
        callData={selectedCall} 
        onClose={() => setSelectedCall(null)} 
      />
    </div>
  )
}

export default CallLogs
</file>

<file path="src/components/tool-tip/costToolTip.tsx">
// src/components/CostTooltip.tsx
import * as Tooltip from "@radix-ui/react-tooltip";
import React from "react";
import { plivoRate } from "../../utils/constants";
import { telecomCost } from "../../utils/cost";
import { CallLog } from "../../types/logs";

type Props = {
  call: CallLog;
};

export const CostTooltip: React.FC<Props> = ({ call}) => {
  const telecom = telecomCost(call.duration_seconds);
  const total = call.total_stt_cost! + call.total_llm_cost! + call.total_tts_cost! + telecom;

  return (
    <Tooltip.Provider delayDuration={400}>
      <Tooltip.Root>
        <Tooltip.Trigger asChild>
          <span
            tabIndex={0}
            className="font-mono cursor-help"
            aria-label={`Total ‚Çπ${total.toFixed(2)}. Hover for cost breakdown.`}
          >
            ‚Çπ{total.toFixed(2)}
          </span>
        </Tooltip.Trigger>
        <Tooltip.Portal>
          <Tooltip.Content
            side="top"
            sideOffset={4}
            className="rounded-md bg-gray-800 text-white text-xs px-2 py-1 z-50 shadow"
            style={{ whiteSpace: "pre-line" }}
          >
            {`LLM ‚Çπ${call.total_llm_cost?.toFixed(2)}
              TTS ‚Çπ${call.total_tts_cost?.toFixed(2)}
              STT ‚Çπ${call.total_stt_cost?.toFixed(2)}
              Plivo ‚Çπ${telecom.toFixed(2)} (${plivoRate.toFixed(2)}/min)`}

            <Tooltip.Arrow className="fill-gray-800" />
          </Tooltip.Content>
        </Tooltip.Portal>
      </Tooltip.Root>
    </Tooltip.Provider>
  );
};
</file>

<file path="src/components/CallFilter.tsx">
'use client'
import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Calendar } from '@/components/ui/calendar'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { 
  Filter,
  X,
  ChevronDown,
  Calendar as CalendarIcon
} from 'lucide-react'
import { Badge } from '@/components/ui/badge'
import { format } from 'date-fns'

export interface FilterRule {
  id: string
  column: string
  operation: string
  value: string
  jsonField?: string  // Add this for JSONB field names
}

interface CallFilterProps {
  onFiltersChange: (filters: FilterRule[]) => void
  onClear: () => void
  availableMetadataFields?: string[]
  availableTranscriptionFields?: string[]
}

const COLUMNS = [
  { value: 'customer_number', label: 'Customer Number', type: 'text' },
  { value: 'duration_seconds', label: 'Duration (seconds)', type: 'number' },
  { value: 'avg_latency', label: 'Avg Latency (ms)', type: 'number' },
  { value: 'call_started_at', label: 'Date', type: 'date' },
  { value: 'call_ended_reason', label: 'Status', type: 'text' },
  { value: 'metadata', label: 'Metadata', type: 'jsonb' },
  { value: 'transcription_metrics', label: 'Transcription', type: 'jsonb' }
]

const OPERATIONS = {
  text: [
    { value: 'equals', label: 'Equals' },
    { value: 'contains', label: 'Contains' },
    { value: 'starts_with', label: 'Starts with' }
  ],
  number: [
    { value: 'equals', label: 'Equals' },
    { value: 'greater_than', label: 'Greater than' },
    { value: 'less_than', label: 'Less than' }
  ],
  date: [
    { value: 'equals', label: 'On date' },
    { value: 'greater_than', label: 'After' },
    { value: 'less_than', label: 'Before' }
  ],
  jsonb: [
    { value: 'json_equals', label: 'Equals' },
    { value: 'json_contains', label: 'Contains' },
    { value: 'json_exists', label: 'Field Exists' },
    { value: 'json_greater_than', label: 'Greater than' },
    { value: 'json_less_than', label: 'Less than' }
  ]
}

const CallFilter: React.FC<CallFilterProps> = ({ 
  onFiltersChange, 
  onClear, 
  availableMetadataFields = [],
  availableTranscriptionFields = []
}) => {
  const [filters, setFilters] = useState<FilterRule[]>([])
  const [isOpen, setIsOpen] = useState(false)
  const [newFilter, setNewFilter] = useState({
    column: '',
    operation: '',
    value: '',
    jsonField: ''
  })
  const [selectedDate, setSelectedDate] = useState<Date>()

  const getAvailableJsonFields = () => {
    if (newFilter.column === 'metadata') {
      return availableMetadataFields
    }
    if (newFilter.column === 'transcription_metrics') {
      return availableTranscriptionFields
    }
    return []
  }

  const isJsonbColumn = () => {
    return newFilter.column === 'metadata' || newFilter.column === 'transcription_metrics'
  }

  const isValidFilter = () => {
    const hasBasicFields = newFilter.column && newFilter.operation
    const hasValue = newFilter.operation !== 'json_exists' ? newFilter.value : true
    const hasJsonField = isJsonbColumn() ? newFilter.jsonField : true
    
    return hasBasicFields && hasValue && hasJsonField
  }

  const addFilter = () => {
    if (isValidFilter()) {
      const filter: FilterRule = {
        id: Date.now().toString(),
        column: newFilter.column,
        operation: newFilter.operation,
        value: newFilter.value,
        ...(newFilter.jsonField && { jsonField: newFilter.jsonField })
      }
      
      const updatedFilters = [...filters, filter]
      setFilters(updatedFilters)
      onFiltersChange(updatedFilters)
      
      // Reset form
      setNewFilter({ column: '', operation: '', value: '', jsonField: '' })
      setSelectedDate(undefined)
    }
  }

  const removeFilter = (filterId: string) => {
    const updatedFilters = filters.filter(f => f.id !== filterId)
    setFilters(updatedFilters)
    onFiltersChange(updatedFilters)
  }

  const clearAllFilters = () => {
    setFilters([])
    setNewFilter({ column: '', operation: '', value: '', jsonField: '' })
    setSelectedDate(undefined)
    onClear()
  }

  const handleDateSelect = (date: Date | undefined) => {
    if (date) {
      setSelectedDate(date)
      setNewFilter({ ...newFilter, value: format(date, 'yyyy-MM-dd') })
    }
  }

  const getColumnLabel = (value: string) => 
    COLUMNS.find(col => col.value === value)?.label || value

  const getOperationLabel = (value: string) => {
    for (const ops of Object.values(OPERATIONS)) {
      const op = ops.find(op => op.value === value)
      if (op) return op.label
    }
    return value
  }

  const getAvailableOperations = () => {
    const selectedColumn = COLUMNS.find(col => col.value === newFilter.column)
    if (!selectedColumn) return []
    return OPERATIONS[selectedColumn.type as keyof typeof OPERATIONS] || []
  }

  const isDateField = newFilter.column === 'call_started_at'
  const needsValue = newFilter.operation !== 'json_exists'
  const gridCols = isJsonbColumn() ? 'grid-cols-5' : 'grid-cols-4'

  const getFilterDisplayText = (filter: FilterRule) => {
    const columnLabel = getColumnLabel(filter.column)
    const operationLabel = getOperationLabel(filter.operation)
    const jsonFieldText = filter.jsonField ? `.${filter.jsonField}` : ''
    const valueText = filter.operation !== 'json_exists' ? ` "${filter.value}"` : ''
    
    return `${columnLabel}${jsonFieldText} ${operationLabel}${valueText}`
  }

  return (
    <div className="w-fit">
      {/* Compact Filter Button */}
      <div className="flex items-center gap-2">
        <Popover open={isOpen} onOpenChange={setIsOpen}>
          <PopoverTrigger asChild>
            <Button
              variant={filters.length > 0 ? "default" : "outline"}
              size="sm"
              className="gap-2 h-8 hover:shadow-md transition-all"
            >
              <Filter className="h-3 w-3" />
              Filter
              {filters.length > 0 && (
                <Badge variant="secondary" className="ml-1 h-4 w-4 rounded-full p-0 text-xs">
                  {filters.length}
                </Badge>
              )}
              <ChevronDown className={`h-3 w-3 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
            </Button>
          </PopoverTrigger>
          
          <PopoverContent className="w-[600px] p-3" align="start">
            <div className="space-y-3">
              {/* Compact Form */}
              <div className={`grid gap-2 ${gridCols}`}>
                {/* Column */}
                <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm" className="h-8 text-xs justify-between min-w-0">
                    <span className="truncate">
                      {newFilter.column ? getColumnLabel(newFilter.column) : 'Column'}
                    </span>
                    <ChevronDown className="h-3 w-3 flex-shrink-0 ml-1" />
                  </Button>
                </DropdownMenuTrigger>
                  <DropdownMenuContent align="start" className="w-48">
                    {COLUMNS.map((column) => (
                      <DropdownMenuItem
                        key={column.value}
                        onClick={() => {
                          setNewFilter({ 
                            column: column.value,
                            operation: '',
                            value: '',
                            jsonField: ''
                          })
                          setSelectedDate(undefined)
                        }}
                        className="text-xs"
                      >
                        {column.label}
                      </DropdownMenuItem>
                    ))}
                  </DropdownMenuContent>
                </DropdownMenu>

                {/* JSON Field (only for JSONB columns) */}
                {isJsonbColumn() && (
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="h-8 text-xs justify-between min-w-0"
                        disabled={!newFilter.column}
                      >
                        <span className="truncate">
                          {newFilter.jsonField || 'Field'}
                        </span>
                        <ChevronDown className="h-3 w-3 flex-shrink-0 ml-1" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="start" className="w-40 max-h-48 overflow-y-auto">
                      {getAvailableJsonFields().map((field) => (
                        <DropdownMenuItem
                          key={field}
                          onClick={() => setNewFilter({ ...newFilter, jsonField: field })}
                          className="text-xs"
                        >
                          {field}
                        </DropdownMenuItem>
                      ))}
                    </DropdownMenuContent>
                  </DropdownMenu>
                )}

                {/* Operation */}
                <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="h-8 text-xs justify-between min-w-0"
                      disabled={!newFilter.column || (isJsonbColumn() && !newFilter.jsonField)}
                    >
                      <span className="truncate">
                        {newFilter.operation ? getOperationLabel(newFilter.operation) : 'Operation'}
                      </span>
                      <ChevronDown className="h-3 w-3 flex-shrink-0 ml-1" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="start" className="w-40">
                    {getAvailableOperations().map((operation) => (
                      <DropdownMenuItem
                        key={operation.value}
                        onClick={() => setNewFilter({ ...newFilter, operation: operation.value })}
                        className="text-xs"
                      >
                        {operation.label}
                      </DropdownMenuItem>
                    ))}
                  </DropdownMenuContent>
                </DropdownMenu>

                {/* Value - Only show if operation needs a value */}
                {needsValue && (
                  <>
                    {isDateField ? (
                      <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          variant="outline"
                          size="sm"
                          className="h-8 text-xs justify-between min-w-0"
                          disabled={!newFilter.operation}
                        >
                          <span className="truncate">
                            {selectedDate ? format(selectedDate, 'MMM dd') : 'Date'}
                          </span>
                          <CalendarIcon className="h-3 w-3 flex-shrink-0 ml-1" />
                        </Button>
                      </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start" side="bottom">
                          <Calendar
                            mode="single"
                            selected={selectedDate}
                            onSelect={handleDateSelect}
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                    ) : (
                      <Input
                        placeholder="Value"
                        value={newFilter.value}
                        onChange={(e) => setNewFilter({ ...newFilter, value: e.target.value })}
                        disabled={!newFilter.operation}
                        className="h-8 text-xs"
                        onKeyDown={(e) => {
                          if (e.key === 'Enter') {
                            addFilter()
                          }
                        }}
                      />
                    )}
                  </>
                )}

                {/* Add Button */}
                <Button
                  onClick={addFilter}
                  disabled={!isValidFilter()}
                  size="sm"
                  className="h-8 text-xs"
                >
                  Add
                </Button>
              </div>
            </div>
          </PopoverContent>
        </Popover>

        {filters.length > 0 && (
          <Button
            variant="ghost"
            size="sm"
            onClick={clearAllFilters}
            className="gap-1 h-8 text-xs text-muted-foreground hover:text-foreground"
          >
            <X className="h-3 w-3" />
            Clear
          </Button>
        )}
      </div>

      {/* Active Filters */}
      {filters.length > 0 && (
        <div className="flex flex-wrap gap-1 mt-2">
          {filters.map((filter) => (
            <Badge
              key={filter.id}
              variant="secondary"
              className="gap-1 py-1 px-2 text-xs"
            >
              <span>{getFilterDisplayText(filter)}</span>
              <button
                onClick={() => removeFilter(filter.id)}
                className="hover:bg-muted rounded-full p-0.5"
              >
                <X className="h-2 w-2" />
              </button>
            </Badge>
          ))}
        </div>
      )}
    </div>
  )
}

export default CallFilter
</file>

<file path="src/lib/user-data.ts">
// lib/user-data.ts
import { supabase } from '../lib/supabase'
import { auth, currentUser } from '@clerk/nextjs/server'



export interface PyveVoiceUser {
  id?: number
  clerk_id: string
  email: string
  first_name: string | null
  last_name: string | null
  profile_image_url: string | null
  created_at?: string
  updated_at?: string
}

// Server-side function to get current user's data from your database
export async function getCurrentUserProfile(): Promise<{
  data: PyveVoiceUser | null
  error: string | null
}> {
  try {
    const { userId } = await auth()
    
    if (!userId) {
      return { data: null, error: 'Not authenticated' }
    }
    
    const { data, error } = await supabase
      .from('pype_voice_users')
      .select('*')
      .eq('clerk_id', userId)
      .single()
      
    if (error) {
      return { data: null, error: error.message }
    }
    
    return { data: data as PyveVoiceUser, error: null }
  } catch (error) {
    return { 
      data: null, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    }
  }
}

// Server-side function to get current user from Clerk
export async function getCurrentClerkUser() {
  try {
    const user = await currentUser()
    return user
  } catch (error) {
    console.error('Error fetching current user:', error)
    return null
  }
}

// Client-side hook for React components
export function useUserData() {
  // This would be used in client components
  // Implementation depends on your specific needs
}
</file>

<file path="setup-supabase.sql">
create table public.pype_voice_metrics_logs (
    id uuid primary key default gen_random_uuid(),
    session_id uuid,
    turn_id text,
    user_transcript text,
    agent_response text,
    stt_metrics jsonb,
    llm_metrics jsonb,
    tts_metrics jsonb,
    eou_metrics jsonb,
    lesson_day int4,
    created_at timestamp with time zone default now(),
    unix_timestamp numeric,
    phone_number text,
    call_duration numeric,
    call_success boolean,
    lesson_completed boolean
);


create table public.pype_voice_call_logs (
    id uuid primary key default gen_random_uuid(),
    call_id varchar,
    agent_id uuid,
    customer_number varchar,
    call_ended_reason varchar,
    transcript_type varchar,
    transcript_json jsonb,
    metadata jsonb,
    dynamic_variables jsonb,
    environment varchar,
    created_at timestamp with time zone default now(),
    call_started_at timestamp with time zone,
    call_ended_at timestamp with time zone,
    duration_seconds int4,
    recording_url text,
    avg_latency float8,
    transcription_metrics jsonb,
    total_stt_cost float8,
    total_tts_cost float8,
    total_llm_cost float8
);


create table public.pype_voice_agents (
    id uuid primary key default gen_random_uuid(),
    project_id uuid,
    name varchar,
    agent_type varchar,
    configuration jsonb,
    environment varchar,
    created_at timestamp with time zone default now(),
    updated_at timestamp with time zone,
    is_active boolean default true,
    user_id uuid,
    field_extractor boolean,
    field_extractor_prompt text,
    field_extractor_keys jsonb
);


create table public.pype_voice_projects (
    id uuid primary key default gen_random_uuid(),
    name varchar,
    description text,
    environment varchar,
    created_at timestamp with time zone default now(),
    updated_at timestamp with time zone,
    is_active boolean default true,
    retry_configuration jsonb,
    token_hash text,
    owner_clerk_id text,
    campaign_config jsonb
);

create table public.pype_voice_email_project_mapping (
    id serial primary key,
    email text,
    project_id uuid,
    role text,
    permissions jsonb,
    added_by_clerk_id text,
    created_at timestamp with time zone default now(),
    clerk_id text,
    is_active boolean default true
);

create table public.pype_voice_agent_call_log_views (
    id uuid primary key default gen_random_uuid(),
    agent_id uuid,
    name text,
    filters jsonb,
    visible_columns jsonb,
    created_at timestamp with time zone default now(),
    updated_at timestamp with time zone
);

create table public.audio_api_pricing (
    service_type text,
    provider text,
    model_or_plan text,
    unit text,
    cost_usd_per_unit numeric,
    valid_from date,
    source_url text
);

create table public.gpt_api_pricing (
    model_name text,
    input_usd_per_million numeric,
    output_usd_per_million numeric,
    created_at timestamp with time zone default now()
);

create table public.gpt_api_pricing_inr (
    model_name text,
    input_inr_per_million numeric,
    output_inr_per_million numeric,
    rate_date date,
    created_at timestamp with time zone default now()
);

create table public.pype_voice_users (
    id uuid primary key default gen_random_uuid(),
    email text,
    first_name text,
    last_name text,
    profile_image_url text,
    created_at timestamp with time zone default now(),
    updated_at timestamp with time zone,
    clerk_id text,
    is_active boolean default true
);

create table public.usd_to_inr_rate (
    as_of date,
    rate numeric,
    source text
);


CREATE MATERIALIZED VIEW call_summary_materialized AS
SELECT
  agent_id,
  DATE(created_at) AS call_date,

  COUNT(*) AS calls,
  SUM(duration_seconds) AS total_seconds,
  ROUND(SUM(duration_seconds)::numeric / 60, 0) AS total_minutes,
  AVG(avg_latency) AS avg_latency,
  COUNT(DISTINCT call_id) AS unique_customers,
  COUNT(*) FILTER (WHERE call_ended_reason = 'completed') AS successful_calls,
  ROUND(
    (COUNT(*) FILTER (WHERE call_ended_reason = 'completed')::numeric / NULLIF(COUNT(*), 0)) * 100,
    2
  ) AS success_rate,

  -- Telecom cost only for completed calls (‚Çπ 0.70 per started minute)
  SUM(
    CEIL(duration_seconds::numeric / 60)
  ) FILTER (WHERE call_ended_reason = 'completed') * 0.70 AS telecom_cost,

  -- Total LLM+TTS+STT cost only for completed calls
  (
    COALESCE(SUM(total_llm_cost) FILTER (WHERE call_ended_reason = 'completed'), 0)
    + COALESCE(SUM(total_tts_cost) FILTER (WHERE call_ended_reason = 'completed'), 0)
    + COALESCE(SUM(total_stt_cost) FILTER (WHERE call_ended_reason = 'completed'), 0)
    + SUM(CEIL(duration_seconds::numeric / 60)) FILTER (WHERE call_ended_reason = 'completed') * 0.70
  )::numeric(16, 2) AS total_cost

FROM pype_voice_call_logs
GROUP BY agent_id, DATE(created_at);

CREATE UNIQUE INDEX call_summary_agent_date_idx
  ON call_summary_materialized (agent_id, call_date);


REFRESH MATERIALIZED VIEW CONCURRENTLY call_summary_materialized;
</file>

<file path="sdk/agent.py">
from dotenv import load_dotenv
from livekit import agents
from livekit.agents import AgentSession, Agent, RoomInputOptions
from livekit.plugins import (
    openai,
    cartesia,
    deepgram,
    noise_cancellation,
    silero,
    elevenlabs,
)
from livekit.plugins.turn_detector.multilingual import MultilingualModel
from whispey import LivekitObserve


import base64
import os


load_dotenv()


pype = LivekitObserve(agent_id="2a72948a-094d-4a13-baf7-e033a5cdeb22")

    


class Assistant(Agent):
    def __init__(self) -> None:
        super().__init__(instructions="You are a helpful voice AI assistant.")

async def entrypoint(ctx: agents.JobContext):
    await ctx.connect()
    
    session = AgentSession(
        stt=deepgram.STT(model="nova-3", language="multi"),
        llm=openai.LLM(model="gpt-4o-mini"),
        # tts=cartesia.TTS(model="sonic-2", voice="f786b574-daa5-4673-aa0c-cbe3e8534c02"),
        tts=elevenlabs.TTS(
            voice_id="H8bdWZHK2OgZwTN7ponr",
            model="eleven_flash_v2_5",
            language="hi",
            voice_settings=elevenlabs.VoiceSettings(
                similarity_boost=1,
                stability=0.7,
                style=0.7,
                use_speaker_boost=False,
                speed=1.1
            )
        ),
        vad=silero.VAD.load(),
        turn_detection=MultilingualModel(),
    )
    
    # Set up observablity after session creation
    session_id = pype.start_session(session, phone_number="+1234567890")

    # send session data to Whispey
    # Note: recording_url can be provided if you have a recording URL to attach 
    async def whispey_observe_shutdown():
          await pype.export(session_id)

    ctx.add_shutdown_callback(whispey_observe_shutdown)


    await session.start(
        room=ctx.room,
        agent=Assistant(),
        room_input_options=RoomInputOptions(
            noise_cancellation=noise_cancellation.BVC(), 
        ),
    )

    await session.generate_reply(
        instructions="Greet the user and offer your assistance."
    )

if __name__ == "__main__":
    agents.cli.run_app(agents.WorkerOptions(entrypoint_fnc=entrypoint))
</file>

<file path="sdk/readme.md">
# Whispey SDK

**Professional Voice Analytics for AI Agents**

Monitor, analyze, and gain insights from your AI voice agent conversations with Whispey's advanced voice analytics platform.

## üöÄ Quick Start

### Installation

```bash
pip install whispey
```

**üì¶ Available on PyPI:** [https://pypi.org/project/Whispey/1.4.0/](https://pypi.org/project/Whispey/1.4.0/)

### Get Your Credentials

1. **Sign up** at [Whispey Voice Analytics Dashboard](https://pype-voice-analytics-dashboard.vercel.app/)
2. **Get your Agent ID** from the dashboard
3. **Generate your API Key** from your account 

### Environment Setup

Create a `.env` file in your project root:

```env
# Whispey Voice Analytics
WHISPEY_API_KEY=your_whispey_api_key_here
```

## üìñ Complete Implementation

Here's a complete example of how to integrate Whispey into your LiveKit voice agent:

```python
from dotenv import load_dotenv
from livekit import agents
from livekit.agents import AgentSession, Agent, RoomInputOptions
from livekit.plugins import (
    openai,
    deepgram,
    noise_cancellation,
    silero,
    elevenlabs,
)
from livekit.plugins.turn_detector.multilingual import MultilingualModel
from whispey import LivekitObserve

import base64
import os

# Load environment variables
load_dotenv()

# üéôÔ∏è Initialize Whispey with your Agent ID from the dashboard
whispey = LivekitObserve(
    agent_id="your-agent-id-from-dashboard"  # Get this from https://pype-voice-analytics-dashboard.vercel.app/
)

class Assistant(Agent):
    def __init__(self) -> None:
        super().__init__(instructions="You are a helpful voice AI assistant.")

async def entrypoint(ctx: agents.JobContext):
    await ctx.connect()
        
    # Configure your AI agent session
    session = AgentSession(
        stt=deepgram.STT(model="nova-3", language="multi"),
        llm=openai.LLM(model="gpt-4o-mini"),
        tts=elevenlabs.TTS(
            voice_id="H8bdWZHK2OgZwTN7ponr",
            model="eleven_flash_v2_5",
            language="hi",  # Adjust language as needed
            voice_settings=elevenlabs.VoiceSettings(
                similarity_boost=1,
                stability=0.7,
                style=0.7,
                use_speaker_boost=False,
                speed=1.1
            )
        ),
        vad=silero.VAD.load(),
        turn_detection=MultilingualModel(),
    )
    
    # üöÄ Start Whispey Voice Analytics
session_id = whispey.start_session(
    session,
    phone_number="+1234567890",     # Optional: Customer phone number
    customer_name="John Doe",       # Optional: Customer name
    conversation_type="voice_call"  # Optional: Type of conversation
)
    
    print(f"üéôÔ∏è Whispey Analytics started for session: {session_id}")

    # üì§ Export analytics data when session ends
    async def whispey_shutdown():
    try:
        result = await whispey.export(
            session_id,
            recording_url=""  # Optional: Add recording URL if available
        )
            
            if result.get("success"):
                print("‚úÖ Successfully exported to Whispey Voice Analytics!")
                print(f"üìä Log ID: {result.get('data', {}).get('log_id')}")
            else:
                print(f"‚ùå Export failed: {result.get('error')}")
                
        except Exception as e:
            print(f"üí• Export error: {e}")

    # Register cleanup callback
    ctx.add_shutdown_callback(whispey_shutdown)

    # Start the agent session
    await session.start(
        room=ctx.room,
        agent=Assistant(),
        room_input_options=RoomInputOptions(
            noise_cancellation=noise_cancellation.BVC(), 
        ),
    )

    # Generate initial greeting
    await session.generate_reply(
        instructions="Greet the user and offer your assistance."
    )

if __name__ == "__main__":
    agents.cli.run_app(agents.WorkerOptions(entrypoint_fnc=entrypoint))
```

## üîß Configuration

### Required Environment Variables

| Variable | Description | Where to Get |
|----------|-------------|--------------|
| `WHISPEY_API_KEY` | Your Whispey API authentication key | [Dashboard ‚Üí API Keys](https://pype-voice-analytics-dashboard.vercel.app/) |

### Agent Configuration

Replace `"your-agent-id-from-dashboard"` with your actual Agent ID from the Whispey dashboard:

```python
whispey = LivekitObserve(
    agent_id="2a72948a-094d-4a13-baf7-e033a5cdeb22"  # Your actual Agent ID
)
```

## üìä Features

### Automatic Metrics Collection
- **üéôÔ∏è Speech-to-Text (STT)**: Audio duration, processing time
- **üß† Large Language Model (LLM)**: Token usage, response time, TTFT
- **üó£Ô∏è Text-to-Speech (TTS)**: Character count, audio duration, TTFB
- **üëÇ Voice Activity Detection (VAD)**: Voice detection metrics
- **‚è±Ô∏è End of Utterance (EOU)**: Turn-taking timing

### Conversation Analytics
- **üìù Full Transcript**: Complete conversation history with timestamps
- **üîÑ Turn Tracking**: User and agent turns with associated metrics
- **üìà Performance Insights**: Response times, token usage, audio quality
- **üéØ Success Metrics**: Call completion, lesson progress, handoff detection

### Session Metadata
```python
session_id = whispey.start_session(
    session,
    phone_number="+1234567890",        # Customer contact
    customer_name="Jane Smith",        # Customer identification
    conversation_type="voice_call",    # Call type
    fpo_name="John Agent",            # Agent name
    lesson_day=3,                     # Custom metadata
    custom_field="any_value"          # Additional custom data
)
```

## üîç Advanced Usage

### Manual Session Control

```python
# Start session
session_id = whispey.start_session(session, **metadata)

# Get current session data (without exporting)
current_data = whispey.get_data(session_id)
print(f"Current metrics: {current_data}")

# Manually end session
whispey.end(session_id)

# Export to Whispey platform
result = await whispey.export(session_id, recording_url="https://...")
```
## üìà Dashboard Integration

Once your data is exported, view detailed analytics at:
**[Whispey Voice Analytics Dashboard](https://pype-voice-analytics-dashboard.vercel.app/)**

### Available Analytics:
- üìä **Call Performance**: Response times, success rates
- üéôÔ∏è **Voice Quality**: Audio metrics, clarity scores  
- üí¨ **Conversation Flow**: Turn analysis, interruption patterns
- üìà **Usage Statistics**: Token consumption, API costs
- üéØ **Business Metrics**: Conversion rates, customer satisfaction

## üõ†Ô∏è Troubleshooting

### Common Issues

**1. "Session not found" Error**
```python
# Ensure session_id is stored correctly
session_id = whispey.start_session(session)
print(f"Session ID: {session_id}")  # Save this for later use
```

**2. "No data available" Error**
```python
# Make sure session has activity before exporting
await asyncio.sleep(1)  # Allow time for metrics collection
result = await whispey.export(session_id)
```

**3. API Authentication Error**
```bash
# Check your .env file
echo $WHISPEY_API_KEY

# Ensure API key is set in environment
export WHISPEY_API_KEY="your_api_key_here"
```

### Debug Mode

Enable verbose logging:
```python
import logging
logging.basicConfig(level=logging.INFO)

# Your Whispey code here - you'll see detailed logs
```

## üìù Requirements

- Python >= 3.8
- LiveKit Agents >= 1.2.2
- Active Whispey account with valid API key

## ü§ù Support

- **Documentation**: [docs.whispey.ai](https://docs.whispey.ai)
- **Dashboard**: [pype-voice-analytics-dashboard.vercel.app](https://pype-voice-analytics-dashboard.vercel.app/)
- **Email**: support@whispey.ai
- **Issues**: [GitHub Issues](https://github.com/whispey-ai/whispey/issues)

## üìÑ License

MIT License - see [LICENSE](LICENSE) file for details.

---

**Built with ‚ù§Ô∏è by [Whispey Voice Analytics](https://whispey.ai)**

*Transform your voice agents with professional analytics and insights.*
</file>

<file path="src/app/api/campaign-logs/route.ts">
import { NextRequest, NextResponse } from 'next/server'
import { DynamoDBClient } from '@aws-sdk/client-dynamodb'
import { DynamoDBDocumentClient, ScanCommand, BatchWriteCommand } from '@aws-sdk/lib-dynamodb'

// Initialize DynamoDB client
const client = new DynamoDBClient({
  region: process.env.AWS_REGION || 'ap-south-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
  },
})

const docClient = DynamoDBDocumentClient.from(client)

const TABLE_NAME = 'pype-samunnati-dynamodb'
const ENHANCED_PROJECT_ID = '371c4bbb-76db-4c61-9926-bd75726a1cda'

// Helper functions
function validateProjectAccess(projectId: string): boolean {
  return projectId === ENHANCED_PROJECT_ID
}

function parseIntWithDefault(value: string | null, defaultValue: number, min?: number, max?: number): number {
  const parsed = parseInt(value || '') || defaultValue
  if (min !== undefined && parsed < min) return min
  if (max !== undefined && parsed > max) return max
  return parsed
}

function cleanString(value: string | null): string | undefined {
  const cleaned = value?.trim()
  return cleaned && cleaned !== 'all' && cleaned !== '' ? cleaned : undefined
}

function buildFilterExpression(params: {
  callStatus?: string
  sourceFile?: string
  search?: string
  filters?: Array<{ column: string; operation: string; value: string | number }>
}) {
  const filterExpressions: string[] = []
  const expressionAttributeValues: Record<string, any> = {}
  const expressionAttributeNames: Record<string, string> = {}

  // Call status filter
  if (params.callStatus) {
    filterExpressions.push('#call_status = :call_status')
    expressionAttributeNames['#call_status'] = 'call_status'
    expressionAttributeValues[':call_status'] = params.callStatus
  }

  // Source file filter
  if (params.sourceFile) {
    filterExpressions.push('contains(#sourceFile, :source_file)')
    expressionAttributeNames['#sourceFile'] = 'sourceFile'
    expressionAttributeValues[':source_file'] = params.sourceFile
  }

  // Global search across multiple fields
  if (params.search) {
    const searchTerm = params.search.toLowerCase()
    const searchExpressions = [
      'contains(#phoneNumber, :search)',
      'contains(#fpoName, :search)',
      'contains(#fpoLoginId, :search)',
      'contains(#sourceFile_search, :search)'
    ]
    
    filterExpressions.push(`(${searchExpressions.join(' OR ')})`)
    expressionAttributeNames['#phoneNumber'] = 'phoneNumber'
    expressionAttributeNames['#fpoName'] = 'fpoName'
    expressionAttributeNames['#fpoLoginId'] = 'fpoLoginId'
    expressionAttributeNames['#sourceFile_search'] = 'sourceFile'
    expressionAttributeValues[':search'] = searchTerm
  }

  // Advanced filters from POST request
  if (params.filters?.length) {
    params.filters.forEach((filter, index) => {
      const attrName = `#attr${index}`
      const attrValue = `:val${index}`

      expressionAttributeNames[attrName] = filter.column

      switch (filter.operation) {
        case 'equals':
          filterExpressions.push(`${attrName} = ${attrValue}`)
          expressionAttributeValues[attrValue] = filter.value
          break
        case 'contains':
          filterExpressions.push(`contains(${attrName}, ${attrValue})`)
          expressionAttributeValues[attrValue] = filter.value
          break
        case 'greater_than':
          filterExpressions.push(`${attrName} > ${attrValue}`)
          expressionAttributeValues[attrValue] = typeof filter.value === 'string' 
            ? parseFloat(filter.value) || filter.value 
            : filter.value
          break
        case 'less_than':
          filterExpressions.push(`${attrName} < ${attrValue}`)
          expressionAttributeValues[attrValue] = typeof filter.value === 'string' 
            ? parseFloat(filter.value) || filter.value 
            : filter.value
          break
        case 'starts_with':
          filterExpressions.push(`begins_with(${attrName}, ${attrValue})`)
          expressionAttributeValues[attrValue] = filter.value
          break
      }
    })
  }

  return {
    FilterExpression: filterExpressions.length > 0 ? filterExpressions.join(' AND ') : undefined,
    ExpressionAttributeNames: Object.keys(expressionAttributeNames).length > 0 ? expressionAttributeNames : undefined,
    ExpressionAttributeValues: Object.keys(expressionAttributeValues).length > 0 ? expressionAttributeValues : undefined,
  }
}

function createErrorResponse(message: string, status: number = 500) {
  console.error(`API Error (${status}): ${message}`)
  return NextResponse.json({ error: message }, { status })
}

function createSuccessResponse(data: any, message?: string) {
  return NextResponse.json({ 
    ...data,
    ...(message && { message })
  }, { status: 200 })
}

// Get total count efficiently (separate from main query)
async function getTotalCount(filterConfig: any): Promise<number> {
  try {
    let totalCount = 0
    let hasMore = true
    let lastEvaluatedKey = undefined
    
    const countParams = {
      TableName: TABLE_NAME,
      Select: 'COUNT' as const,
      ...filterConfig,
    }
    
    // Use multiple scans to get accurate count with filters
    while (hasMore && totalCount < 10000) { // Cap at 10k for performance
      const scanParams:any= {
        ...countParams,
        ExclusiveStartKey: lastEvaluatedKey,
      }
      
      const command = new ScanCommand(scanParams)
      const result = await docClient.send(command)
      
      totalCount += result.Count || 0
      lastEvaluatedKey = result.LastEvaluatedKey
      hasMore = !!lastEvaluatedKey
      
      // Break after reasonable number of scans
      if (totalCount > 5000) break
    }
    
    return totalCount
  } catch (error) {
    console.error('Error getting total count:', error)
    return 0
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    
    // Extract and parse parameters with defaults
    const project_id = searchParams.get('project_id')
    const page = parseIntWithDefault(searchParams.get('page'), 1, 1)
    const limit = parseIntWithDefault(searchParams.get('limit'), 20, 1, 100)
    const call_status = cleanString(searchParams.get('call_status'))
    const source_file = cleanString(searchParams.get('source_file'))
    const search = cleanString(searchParams.get('search'))
    const sort_by = ['createdAt', 'phoneNumber', 'call_status'].includes(searchParams.get('sort_by') || '') 
      ? searchParams.get('sort_by')! : 'createdAt'
    const sort_order = searchParams.get('sort_order') === 'asc' ? 'asc' : 'desc'
    
    // Handle pagination tokens for DynamoDB
    const lastKeyParam = searchParams.get('lastKey')
    let lastEvaluatedKey = undefined
    
    if (lastKeyParam) {
      try {
        lastEvaluatedKey = JSON.parse(decodeURIComponent(lastKeyParam))
      } catch (e) {
        console.warn('Failed to parse lastKey parameter')
      }
    }

    console.log('Parsed parameters:', { project_id, page, limit, call_status, source_file, search, sort_by, sort_order })

    if (!project_id) {
      return createErrorResponse('Missing project_id parameter', 400)
    }

    // Validate project access
    if (!validateProjectAccess(project_id)) {
      return createErrorResponse('Campaign logs not available for this project', 403)
    }

    // Build filter expressions
    const filterConfig = buildFilterExpression({
      callStatus: call_status,
      sourceFile: source_file,
      search: search,
    })

    console.log('Filter config:', filterConfig)

    // For true pagination, we need to collect enough items to fill the requested page
    // Since DynamoDB doesn't support offset-based pagination directly, we simulate it
    const itemsNeeded = page * limit
    let allItems: any[] = []
    let hasMore = true
    let currentLastKey = lastEvaluatedKey
    let scannedCount = 0

    // Collect items until we have enough for the requested page
    while (hasMore && allItems.length < itemsNeeded + limit) {
      const scanParams: any = {
        TableName: TABLE_NAME,
        Limit: Math.min(100, itemsNeeded + limit - allItems.length), // Fetch in reasonable chunks
        ExclusiveStartKey: currentLastKey,
        ...filterConfig,
      }

      const command = new ScanCommand(scanParams)
      const result = await docClient.send(command)

      const items = result.Items || []
      allItems = allItems.concat(items)
      scannedCount += result.ScannedCount || 0
      
      currentLastKey = result.LastEvaluatedKey
      hasMore = !!currentLastKey
      
      // Safety break to avoid infinite loops
      if (scannedCount > 5000) break
    }

    console.log(`Collected ${allItems.length} items from DynamoDB`)

    // Sort items in memory (since DynamoDB scan doesn't support sorting)
    if (allItems.length > 0) {
      allItems.sort((a, b) => {
        let aValue = a[sort_by]
        let bValue = b[sort_by]
        
        // Handle different data types
        if (sort_by === 'createdAt') {
          aValue = new Date(aValue).getTime()
          bValue = new Date(bValue).getTime()
        } else if (typeof aValue === 'string' && typeof bValue === 'string') {
          aValue = aValue.toLowerCase()
          bValue = bValue.toLowerCase()
        }
        
        if (sort_order === 'asc') {
          return aValue > bValue ? 1 : aValue < bValue ? -1 : 0
        } else {
          return aValue < bValue ? 1 : aValue > bValue ? -1 : 0
        }
      })
    }

    // Calculate pagination
    const startIndex = (page - 1) * limit
    const endIndex = startIndex + limit
    const paginatedItems = allItems.slice(startIndex, endIndex)
    
    // Get total count (this is expensive, but necessary for pagination)
    const totalItems = allItems.length < itemsNeeded + limit ? allItems.length : await getTotalCount(filterConfig)
    const totalPages = Math.ceil(totalItems / limit)
    const hasNextPage = page < totalPages
    const hasPreviousPage = page > 1

    // Format response with pagination metadata
    const response = {
      items: paginatedItems,
      pagination: {
        currentPage: page,
        totalPages,
        totalItems,
        itemsPerPage: limit,
        hasNextPage,
        hasPreviousPage,
        nextPage: hasNextPage ? page + 1 : null,
        previousPage: hasPreviousPage ? page - 1 : null,
      },
      filters: {
        call_status,
        source_file,
        search,
        sort_by,
        sort_order,
      },
      scannedCount,
      // Include last evaluated key for potential optimization
      lastEvaluatedKey: currentLastKey,
    }

    console.log(`Retrieved ${paginatedItems.length}/${totalItems} campaign logs (Page ${page}/${totalPages})`)

    return createSuccessResponse(response)

  } catch (error: any) {
    console.error('Error fetching campaign logs:', error)
    return createErrorResponse('Failed to fetch campaign logs')
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Extract and validate parameters
    const projectId = body.projectId
    const page = parseIntWithDefault(body.page?.toString(), 1, 1)
    const limit = parseIntWithDefault(body.limit?.toString(), 20, 1, 100)
    const filters = Array.isArray(body.filters) ? body.filters : []
    const search = cleanString(body.search)
    const sort_by = ['createdAt', 'phoneNumber', 'call_status'].includes(body.sort_by) ? body.sort_by : 'createdAt'
    const sort_order = body.sort_order === 'asc' ? 'asc' : 'desc'

    if (!projectId) {
      return createErrorResponse('Missing projectId in request body', 400)
    }

    // Validate project access
    if (!validateProjectAccess(projectId)) {
      return createErrorResponse('Campaign logs not available for this project', 403)
    }

    // Build filter expressions
    const filterConfig = buildFilterExpression({
      filters,
      search,
    })

    console.log(`Advanced filtering campaign logs - Page: ${page}, Limit: ${limit}, Filters:`, filters)

    // Similar pagination logic as GET
    const itemsNeeded = page * limit
    let allItems: any[] = []
    let hasMore = true
    let lastEvaluatedKey = undefined
    let scannedCount = 0

    while (hasMore && allItems.length < itemsNeeded + limit) {
      const scanParams: any = {
        TableName: TABLE_NAME,
        Limit: Math.min(100, itemsNeeded + limit - allItems.length),
        ExclusiveStartKey: lastEvaluatedKey,
        ...filterConfig,
      }

      const command = new ScanCommand(scanParams)
      const result = await docClient.send(command)

      const items = result.Items || []
      allItems = allItems.concat(items)
      scannedCount += result.ScannedCount || 0
      
      lastEvaluatedKey = result.LastEvaluatedKey
      hasMore = !!lastEvaluatedKey
      
      if (scannedCount > 5000) break
    }

    // Sort items
    if (allItems.length > 0) {
      allItems.sort((a, b) => {
        let aValue = a[sort_by]
        let bValue = b[sort_by]
        
        if (sort_by === 'createdAt') {
          aValue = new Date(aValue).getTime()
          bValue = new Date(bValue).getTime()
        } else if (typeof aValue === 'string' && typeof bValue === 'string') {
          aValue = aValue.toLowerCase()
          bValue = bValue.toLowerCase()
        }
        
        if (sort_order === 'asc') {
          return aValue > bValue ? 1 : aValue < bValue ? -1 : 0
        } else {
          return aValue < bValue ? 1 : aValue > bValue ? -1 : 0
        }
      })
    }

    // Pagination
    const startIndex = (page - 1) * limit
    const endIndex = startIndex + limit
    const paginatedItems = allItems.slice(startIndex, endIndex)
    
    const totalItems = allItems.length < itemsNeeded + limit ? allItems.length : await getTotalCount(filterConfig)
    const totalPages = Math.ceil(totalItems / limit)
    const hasNextPage = page < totalPages
    const hasPreviousPage = page > 1

    const response = {
      items: paginatedItems,
      pagination: {
        currentPage: page,
        totalPages,
        totalItems,
        itemsPerPage: limit,
        hasNextPage,
        hasPreviousPage,
        nextPage: hasNextPage ? page + 1 : null,
        previousPage: hasPreviousPage ? page - 1 : null,
      },
      filters: {
        advanced: filters,
        search,
        sort_by,
        sort_order,
      },
      scannedCount,
    }

    console.log(`Advanced filter returned ${paginatedItems.length}/${totalItems} logs (Page ${page}/${totalPages})`)

    return createSuccessResponse(response)

  } catch (error: any) {
    console.error('Error filtering campaign logs:', error)
    return createErrorResponse('Failed to filter campaign logs')
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const projectId = searchParams.get('project_id')
    const confirmToken = searchParams.get('confirm')

    // Validate inputs
    if (!projectId) {
      return createErrorResponse('Missing project_id parameter', 400)
    }

    if (!validateProjectAccess(projectId)) {
      return createErrorResponse('Campaign logs deletion not available for this project', 403)
    }

    if (confirmToken !== 'DELETE_ALL_CAMPAIGN_LOGS') {
      return createErrorResponse('Missing or invalid confirmation token', 400)
    }

    console.log(`Starting bulk deletion of campaign logs for project: ${projectId}`)

    let deletedCount = 0
    let batchCount = 0
    let hasMore = true
    let lastEvaluatedKey = undefined

    // Delete in batches to avoid timeout and API limits
    while (hasMore) {
      batchCount++
      
      const scanParams: any = {
        TableName: TABLE_NAME,
        Limit: 25, // Batch delete limit
        ExclusiveStartKey: lastEvaluatedKey,
        ProjectionExpression: 'id', // Only get the keys we need for deletion
      }

      const scanCommand = new ScanCommand(scanParams)
      const scanResult = await docClient.send(scanCommand)

      if (!scanResult.Items || scanResult.Items.length === 0) {
        console.log(`No more items to delete after ${batchCount} batches`)
        break
      }

      // Create delete requests
      const deleteRequests = scanResult.Items.map(item => ({
        DeleteRequest: {
          Key: { id: item.id }
        }
      }))

      try {
        // Execute batch delete
        const batchCommand = new BatchWriteCommand({
          RequestItems: {
            [TABLE_NAME]: deleteRequests
          }
        })

        await docClient.send(batchCommand)
        deletedCount += deleteRequests.length

        console.log(`Batch ${batchCount}: Deleted ${deleteRequests.length} items. Total deleted: ${deletedCount}`)
      } catch (batchError) {
        console.error(`Error in batch ${batchCount}:`, batchError)
        // Continue with next batch even if one fails
      }

      // Check if more items exist
      lastEvaluatedKey = scanResult.LastEvaluatedKey
      hasMore = !!lastEvaluatedKey

      // Rate limiting: small delay to prevent overwhelming DynamoDB
      if (hasMore) {
        await new Promise(resolve => setTimeout(resolve, 100))
      }

      // Safety check: prevent infinite loops
      if (batchCount >= 1000) {
        console.warn(`Stopping deletion after ${batchCount} batches for safety`)
        break
      }
    }

    const successMessage = `Successfully deleted ${deletedCount} campaign log records in ${batchCount} batches`
    console.log(`Bulk deletion completed: ${successMessage}`)

    return createSuccessResponse({
      success: true,
      message: successMessage,
      deletedCount,
      batchCount,
      projectId
    })

  } catch (error: any) {
    console.error('Error deleting campaign logs:', error)
    return createErrorResponse('Failed to delete campaign logs')
  }
}
</file>

<file path="src/app/api/projects/[id]/route.ts">
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import crypto from 'crypto'

// Create Supabase client for server-side operations
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Generate a secure API token
function generateApiToken(): string {
  // Generate a random token with prefix for easy identification
  const randomBytes = crypto.randomBytes(32).toString('hex')
  return `pype_${randomBytes}`
}

// Hash a token using SHA-256
function hashToken(token: string): string {
  return crypto.createHash('sha256').update(token).digest('hex')
}

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: projectId } = await params
    const body = await request.json()
    const { action } = body

    if (!projectId) {
      return NextResponse.json(
        { error: 'Project ID is required' },
        { status: 400 }
      )
    }

    if (action === 'regenerate_token') {
      // Generate new API token
      const newApiToken = generateApiToken()
      const newHashedToken = hashToken(newApiToken)

      // Update the project with the new hashed token
      const { data, error } = await supabase
        .from('pype_voice_projects')
        .update({ token_hash: newHashedToken })
        .eq('id', projectId)
        .select('*')
        .single()

      if (error) {
        console.error('Error regenerating project token:', error)
        return NextResponse.json(
          { error: 'Failed to regenerate token' },
          { status: 500 }
        )
      }

      // Return project data with the new unhashed token
      const response = {
        ...data,
        api_token: newApiToken // Include the unhashed token for display
      }

      console.log(`Successfully regenerated token for project "${data.name}"`)
      return NextResponse.json(response, { status: 200 })
    }

    return NextResponse.json(
      { error: 'Invalid action' },
      { status: 400 }
    )

  } catch (error) {
    console.error('Unexpected error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: projectId } = await params
    const body = await request.json()
    const { retry_configuration } = body

    if (!projectId) {
      return NextResponse.json(
        { error: 'Project ID is required' },
        { status: 400 }
      )
    }

    // Validate retry_configuration if provided
    if (retry_configuration) {
      const validCodes = ['408', '480', '486', '504', '600']
      for (const [code, minutes] of Object.entries(retry_configuration)) {
        if (!validCodes.includes(code)) {
          return NextResponse.json(
            { error: `Invalid SIP code: ${code}` },
            { status: 400 }
          )
        }
        if (typeof minutes !== 'number' || minutes < 1 || minutes > 1440) {
          return NextResponse.json(
            { error: `Invalid retry minutes for ${code}: must be between 1 and 1440` },
            { status: 400 }
          )
        }
      }
    }

    // Update the project with retry configuration
    const { data, error } = await supabase
      .from('pype_voice_projects')
      .update({ retry_configuration })
      .eq('id', projectId)
      .select('*')
      .single()

    if (error) {
      console.error('Error updating project:', error)
      return NextResponse.json(
        { error: 'Failed to update project' },
        { status: 500 }
      )
    }

    console.log(`Successfully updated retry configuration for project "${data.name}"`)
    return NextResponse.json(data, { status: 200 })

  } catch (error) {
    console.error('Unexpected error updating project:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: projectId } = await params

    if (!projectId) {
      return NextResponse.json(
        { error: 'Project ID is required' },
        { status: 400 }
      )
    }

    // Start cascade deletion process
    console.log(`Starting cascade delete for project: ${projectId}`)

    // 1. Get all agents for this project first
    const { data: agents, error: agentsError } = await supabase
      .from('pype_voice_agents')
      .select('id')
      .eq('project_id', projectId)

    if (agentsError) {
      console.error('Error fetching agents:', agentsError)
      return NextResponse.json(
        { error: 'Failed to fetch project agents' },
        { status: 500 }
      )
    }

    const agentIds = agents?.map((agent: { id: string }) => agent.id) || []
    console.log(`Found ${agentIds.length} agents to clean up`)

    // 2. Delete call logs for all agents in this project
    if (agentIds.length > 0) {
      const { error: callLogsError } = await supabase
        .from('pype_voice_call_logs')
        .delete()
        .in('agent_id', agentIds)

      if (callLogsError) {
        console.error('Error deleting call logs:', callLogsError)
        return NextResponse.json(
          { error: 'Failed to delete call logs' },
          { status: 500 }
        )
      }
      console.log('Successfully deleted call logs')

      // 3. Delete metrics logs (adjust based on your schema relationships)
      const { error: metricsError } = await supabase
        .from('pype_voice_metrics_logs')
        .delete()
        .in('session_id', agentIds) // Adjust this field based on your actual schema

      // Don't fail if metrics logs have different relationships
      if (metricsError) {
        console.warn('Warning: Could not delete metrics logs:', metricsError)
      } else {
        console.log('Successfully deleted metrics logs')
      }
    }

    console.log('Successfully deleted auth tokens')

    // 5. Delete all agents for this project
    const { error: agentsDeleteError } = await supabase
      .from('pype_voice_agents')
      .delete()
      .eq('project_id', projectId)

    if (agentsDeleteError) {
      console.error('Error deleting agents:', agentsDeleteError)
      return NextResponse.json(
        { error: 'Failed to delete agents' },
        { status: 500 }
      )
    }
    console.log('Successfully deleted agents')

    // 6. Finally, delete the project itself
    const { error: projectError } = await supabase
      .from('pype_voice_projects')
      .delete()
      .eq('id', projectId)

    if (projectError) {
      console.error('Error deleting project:', projectError)
      return NextResponse.json(
        { error: 'Failed to delete project' },
        { status: 500 }
      )
    }
    
    console.log(`Successfully deleted project: ${projectId}`)

    return NextResponse.json(
      { 
        message: 'Project and all related data deleted successfully'
      },
      { status: 200 }
    )

  } catch (error) {
    console.error('Unexpected error during project deletion:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
</file>

<file path="src/app/api/projects/route.ts">
// app/api/projects/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { auth, currentUser } from '@clerk/nextjs/server'
import crypto from 'crypto'

// Create Supabase client for server-side operations (use service role for admin operations)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseServiceKey)

// Generate a secure API token
function generateApiToken(): string {
  // Generate a random token with prefix for easy identification
  const randomBytes = crypto.randomBytes(32).toString('hex')
  return `pype_${randomBytes}`
}

// Hash a token using SHA-256
function hashToken(token: string): string {
  return crypto.createHash('sha256').update(token).digest('hex')
}

export async function POST(request: NextRequest) {
  try {
    // Check authentication
    const { userId } = await auth()
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // Get current user details
    const user = await currentUser()
    if (!user) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      )
    }

    const body = await request.json()
    const { name, description } = body

    if (!name || !name.trim()) {
      return NextResponse.json(
        { error: 'Project name is required' },
        { status: 400 }
      )
    }

    // Generate API token
    const apiToken = generateApiToken()
    const hashedToken = hashToken(apiToken)

    const projectData = {
      name: name.trim(),
      description: description?.trim() || null,
      environment: 'dev', // Default environment
      is_active: true,
      retry_configuration: {},
      token_hash: hashedToken,
      owner_clerk_id: userId // Add owner reference
    }

    // Start a transaction-like approach
    const { data: project, error: projectError } = await supabase
      .from('pype_voice_projects')
      .insert([projectData])
      .select('*')
      .single()

    if (projectError) {
      console.error('Error creating project:', projectError)
      return NextResponse.json(
        { error: 'Failed to create project' },
        { status: 500 }
      )
    }

    console.log(`Successfully created project "${project.name}" with ID ${project.id}`)

    // Add creator to email_project_mapping as owner
    const userEmail = user.emailAddresses[0]?.emailAddress
    if (userEmail) {
      const { error: mappingError } = await supabase
        .from('pype_voice_email_project_mapping')
        .insert({
          email: userEmail,
          project_id: project.id,
          role: 'owner',
          permissions: {
            read: true,
            write: true,
            delete: true,
            admin: true
          },
          added_by_clerk_id: userId
        })

      if (mappingError) {
        console.error('Error adding creator to email mapping:', mappingError)
        // Don't fail the whole operation, just log the error
        // The user will still be added via the webhook when they sign up
      } else {
        console.log(`Added creator ${userEmail} to email mapping for project ${project.id}`)
      }
    }



    // Return project data with the unhashed token
    const response = {
      ...project,
      api_token: apiToken // Include the unhashed token for display
    }

    return NextResponse.json(response, { status: 201 })

  } catch (error) {
    console.error('Unexpected error creating project:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    const { userId } = await auth()
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const user = await currentUser()
    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    const userEmail = user.emailAddresses[0]?.emailAddress
    if (!userEmail) {
      return NextResponse.json({ error: 'User email not found' }, { status: 400 })
    }

    // Fetch projects linked to user email
    const { data: projectMappings, error } = await supabase
      .from('pype_voice_email_project_mapping')
      .select(`
        project:pype_voice_projects (
          id,
          name,
          description,
          environment,
          is_active,
          owner_clerk_id,
          created_at
        ),
        role
      `)
      .eq('email', userEmail)

    if (error) {
      console.error('Error fetching projects:', error)
      return NextResponse.json({ error: 'Failed to fetch projects' }, { status: 500 })
    }




    // Return only active projects with user role included
    const activeProjects = projectMappings
      .map(mapping => ({
        ...mapping.project,
        user_role: mapping.role
      }))

    return NextResponse.json(activeProjects, { status: 200 })

  } catch (error) {
    console.error('Unexpected error fetching projects:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
</file>

<file path="src/app/api/schedule/route.ts">
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

// Create Supabase client for server-side operations
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseAnonKey)

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Extract form data
    const { project_id, start_date, end_date, start_time, end_time, concurrency, retry_config } = body
    console.log(project_id, start_date, end_date, start_time, end_time, concurrency, retry_config)

    // Validation
    if (!project_id) {
      return NextResponse.json({ error: 'Project ID is required' }, { status: 400 })
    }
    
    if (!start_date || !end_date) {
      return NextResponse.json({ error: 'Start date and end date are required' }, { status: 400 })
    }

    if (!start_time || !end_time) {
      return NextResponse.json({ error: 'Start time and end time are required' }, { status: 400 })
    }

    // Validate concurrency
    const concurrencyNum = parseInt(concurrency) || 10
    if (concurrencyNum < 1 || concurrencyNum > 50) {
      return NextResponse.json({ error: 'Concurrency must be between 1 and 50' }, { status: 400 })
    }

    // Validate retry configuration
    if (retry_config) {
      const validCodes = ['408', '480', '486', '504', '600']
      for (const [code, minutes] of Object.entries(retry_config)) {
        if (!validCodes.includes(code)) {
          return NextResponse.json({ error: `Invalid SIP code: ${code}` }, { status: 400 })
        }
        if (typeof minutes !== 'number' || minutes < 1 || minutes > 1440) {
          return NextResponse.json({ error: `Invalid retry minutes for ${code}: must be between 1 and 1440` }, { status: 400 })
        }
      }
    }

    // Step 1: Update project retry configuration if provided
    if (retry_config && Object.keys(retry_config).length > 0) {
      console.log('Updating project retry configuration:', retry_config)

      const campaign_config = {endDate: end_date, startDate: start_date, dailyEndTime: end_time, dailyStartTime: start_time}
      
      
      const { error: projectUpdateError } = await supabase
        .from('pype_voice_projects')
        .update({ retry_configuration: retry_config, campaign_config:campaign_config })
        .eq('id', project_id)

      if (projectUpdateError) {
        console.error('Error updating project retry configuration:', projectUpdateError)
        return NextResponse.json({ error: 'Failed to update project retry configuration' }, { status: 500 })
      }
      
      console.log('Successfully updated project retry configuration')
    }

    console.log(`Creating schedule for project: ${project_id}`)
    console.log(`Schedule: ${start_date} to ${end_date}, ${start_time}-${end_time}, concurrency: ${concurrencyNum}`)

    // Create schedule payload
    const schedulePayload = {
      start_date,
      end_date,
      start_time,
      end_time,
      concurrency: concurrencyNum
    }

    // Call external schedule API
    const scheduleResponse = await fetch('https://nbekv3zxpi.execute-api.ap-south-1.amazonaws.com/dev/api/v1/cron/create-schedule', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(schedulePayload),
    })

    if (!scheduleResponse.ok) {
      const errorText = await scheduleResponse.text()
      console.error('Schedule creation failed:', errorText)
      return NextResponse.json({ error: 'Failed to create campaign schedule' }, { status: 500 })
    }

    const scheduleData = await scheduleResponse.json()
    console.log('Schedule created successfully:', scheduleData)

    return NextResponse.json({
      message: 'Campaign schedule created successfully',
      scheduleId: scheduleData.id,
      schedule: {
        start_date,
        end_date,
        start_time,
        end_time,
        concurrency: concurrencyNum
      },
      retry_configuration: retry_config
    })

  } catch (error) {
    console.error('Error in schedule route:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.147 0.004 49.25);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.147 0.004 49.25);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.147 0.004 49.25);
  --primary: oklch(0.216 0.006 56.043);
  --primary-foreground: oklch(0.985 0.001 106.423);
  --secondary: oklch(0.97 0.001 106.424);
  --secondary-foreground: oklch(0.216 0.006 56.043);
  --muted: oklch(0.97 0.001 106.424);
  --muted-foreground: oklch(0.553 0.013 58.071);
  --accent: oklch(0.97 0.001 106.424);
  --accent-foreground: oklch(0.216 0.006 56.043);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.923 0.003 48.717);
  --input: oklch(0.923 0.003 48.717);
  --ring: oklch(0.709 0.01 56.259);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0.001 106.423);
  --sidebar-foreground: oklch(0.147 0.004 49.25);
  --sidebar-primary: oklch(0.216 0.006 56.043);
  --sidebar-primary-foreground: oklch(0.985 0.001 106.423);
  --sidebar-accent: oklch(0.97 0.001 106.424);
  --sidebar-accent-foreground: oklch(0.216 0.006 56.043);
  --sidebar-border: oklch(0.923 0.003 48.717);
  --sidebar-ring: oklch(0.709 0.01 56.259);
}

.dark {
  --background: oklch(0.147 0.004 49.25);
  --foreground: oklch(0.985 0.001 106.423);
  --card: oklch(0.216 0.006 56.043);
  --card-foreground: oklch(0.985 0.001 106.423);
  --popover: oklch(0.216 0.006 56.043);
  --popover-foreground: oklch(0.985 0.001 106.423);
  --primary: oklch(0.923 0.003 48.717);
  --primary-foreground: oklch(0.216 0.006 56.043);
  --secondary: oklch(0.268 0.007 34.298);
  --secondary-foreground: oklch(0.985 0.001 106.423);
  --muted: oklch(0.268 0.007 34.298);
  --muted-foreground: oklch(0.709 0.01 56.259);
  --accent: oklch(0.268 0.007 34.298);
  --accent-foreground: oklch(0.985 0.001 106.423);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.553 0.013 58.071);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.216 0.006 56.043);
  --sidebar-foreground: oklch(0.985 0.001 106.423);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.001 106.423);
  --sidebar-accent: oklch(0.268 0.007 34.298);
  --sidebar-accent-foreground: oklch(0.985 0.001 106.423);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.553 0.013 58.071);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  
  body {
    @apply bg-background text-foreground;
  }
}

/* Professional Background Utilities */
@layer utilities {
  .bg-professional {
    background: 
      linear-gradient(135deg, hsl(var(--background)) 0%, hsl(var(--muted) / 0.3) 100%),
      radial-gradient(circle at 25% 25%, hsl(var(--primary) / 0.02) 0%, transparent 50%),
      radial-gradient(circle at 75% 75%, hsl(var(--primary) / 0.01) 0%, transparent 50%);
  }
  
  .bg-enterprise {
    background: 
      linear-gradient(180deg, hsl(var(--background)) 0%, hsl(var(--muted) / 0.2) 50%, hsl(var(--background)) 100%);
  }
  
  .bg-minimal-texture {
    background-image: 
      radial-gradient(circle at 1px 1px, hsl(var(--border) / 0.15) 1px, transparent 0);
    background-size: 20px 20px;
  }
}

/* Professional Component Styles */
@layer components {
  .auth-gradient {
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #0f172a 100%);
    position: relative;
  }
  
  .auth-gradient::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 30% 20%, rgba(59, 130, 246, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 70% 80%, rgba(147, 51, 234, 0.1) 0%, transparent 50%);
    pointer-events: none;
  }
  
  /* Professional card styling */
  .card-professional {
    @apply bg-card/95 backdrop-blur-sm border border-border/60 shadow-sm;
  }
  
  .card-professional:hover {
    @apply bg-card border-border shadow-md;
  }
  
  /* Enhanced button styles */
  .btn-professional {
    @apply bg-primary text-primary-foreground hover:bg-primary/90 
           shadow-sm hover:shadow-md transition-all duration-200 
           font-medium border-0;
  }
  
  /* Professional input styling */
  .input-professional {
    @apply bg-background border-border/60 focus:border-primary/60 
           focus:ring-2 focus:ring-primary/10 transition-all duration-200;
  }
}

/* Scrollbar Styling */
::-webkit-scrollbar {
  width: 6px;
}

::-webkit-scrollbar-thumb {
  background-color: hsl(var(--border));
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background-color: hsl(var(--muted-foreground) / 0.3);
}

::-webkit-scrollbar-track {
  background: hsl(var(--muted) / 0.1);
}
</file>

<file path="src/components/campaigns/CampaignLogs.tsx">
'use client'
import React, { useState, useEffect, useCallback, useRef } from 'react'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { 
  ChevronLeft,
  ChevronRight,
  RefreshCw,
  Search,
  Phone,
  Clock,
  Building2,
  FileText,
  Filter,
  Download,
  Loader2,
  AlertCircle,
  Upload,
  Calendar,
  Trash2,
  CheckCircle,
  ArrowUpDown,
  ArrowUp,
  ArrowDown,
  MoreHorizontal,
} from 'lucide-react'
import { cn } from '@/lib/utils'

interface CampaignLog {
  id: string
  phoneNumber: string
  alternative_number?: string
  fpoName: string
  fpoLoginId: string
  call_status: string
  attempt_count: number
  sourceFile: string
  createdAt: string
  uploadedAt: string
  real_attempt_count: number
  system_error_count: number
}

interface PaginationMeta {
  currentPage: number
  totalPages: number
  totalItems: number
  itemsPerPage: number
  hasNextPage: boolean
  hasPreviousPage: boolean
  nextPage: number | null
  previousPage: number | null
}

interface CampaignLogsResponse {
  items: CampaignLog[]
  pagination: PaginationMeta
  filters: any
  scannedCount: number
}

interface CampaignLogsProps {
  project: any
  agent: any
  onBack: () => void
}

const CALL_STATUS_OPTIONS = [
  { value: 'all', label: 'All Status' },
  { value: 'pending', label: 'Pending' },
  { value: 'completed', label: 'Completed' },
  { value: 'failed', label: 'Failed' },
  { value: 'in_progress', label: 'In Progress' }
]

const ITEMS_PER_PAGE_OPTIONS = [10, 20, 50, 100]

const SORT_OPTIONS = [
  { value: 'createdAt', label: 'Created Date' },
  { value: 'phoneNumber', label: 'Phone Number' },
  { value: 'call_status', label: 'Status' },
]

// Debounce hook
function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value)

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value)
    }, delay)

    return () => {
      clearTimeout(handler)
    }
  }, [value, delay])

  return debouncedValue
}

const CampaignLogs: React.FC<CampaignLogsProps> = ({ project, agent, onBack }) => {
  // Data state
  const [logs, setLogs] = useState<CampaignLog[]>([])
  const [pagination, setPagination] = useState<PaginationMeta | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  
  // Filter and search state
  const [searchQuery, setSearchQuery] = useState('')
  const [statusFilter, setStatusFilter] = useState('all')
  const [sourceFileFilter, setSourceFileFilter] = useState('')
  const [sortBy, setSortBy] = useState<'createdAt' | 'phoneNumber' | 'call_status'>('createdAt')
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc')
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage, setItemsPerPage] = useState(20)
  
  // UI state
  const [refreshing, setRefreshing] = useState(false)
  
  // Dialog states
  const [showUploadDialog, setShowUploadDialog] = useState(false)
  const [showScheduleDialog, setShowScheduleDialog] = useState(false) 
  const [csvFile, setCsvFile] = useState<File | null>(null)
  const [uploading, setUploading] = useState(false)
  const [scheduling, setScheduling] = useState(false)
  
  // Schedule form data
  const [scheduleData, setScheduleData] = useState({
    start_date: '',
    end_date: '',
    start_time: '09:00',
    end_time: '17:00',
    concurrency: 10,
    retry_config: {
      '408': 60,
      '480': 60,
      '486': 120,
      '504': 60,
      '600': 120
    }
  })
  
  // Delete All states
  const [showDeleteDialog, setShowDeleteDialog] = useState(false)
  const [deleteConfirmText, setDeleteConfirmText] = useState('')
  const [deleting, setDeleting] = useState(false)
  const [deleteResult, setDeleteResult] = useState<any>(null)

  // Debounced search
  const debouncedSearchQuery = useDebounce(searchQuery, 500)

  // Memoized project ID
  const projectId = agent?.project_id || project?.id

  // Fetch logs function with improved error handling and caching
  const fetchLogs = useCallback(async (resetPage = false) => {
    if (!projectId) {
      setError('Project ID not available')
      setLoading(false)
      return
    }

    try {
      const pageToFetch = resetPage ? 1 : currentPage
      
      if (resetPage) {
        setCurrentPage(1)
        setLogs([])
        setPagination(null)
      }

      setLoading(true)
      setError(null)

      const params = new URLSearchParams()
      params.append('project_id', projectId)
      params.append('page', pageToFetch.toString())
      params.append('limit', itemsPerPage.toString())
      params.append('sort_by', sortBy)
      params.append('sort_order', sortOrder)

      if (statusFilter && statusFilter !== 'all') {
        params.append('call_status', statusFilter)
      }

      if (sourceFileFilter && sourceFileFilter.trim()) {
        params.append('source_file', sourceFileFilter.trim())
      }

      if (debouncedSearchQuery && debouncedSearchQuery.trim()) {
        params.append('search', debouncedSearchQuery.trim())
      }

      const url = `/api/campaign-logs?${params.toString()}`
      console.log(`Fetching logs: ${url}`)

      const response = await fetch(url)
      
      if (!response.ok) {
        let errorMessage = 'Failed to fetch campaign logs'
        try {
          const errorData = await response.json()
          errorMessage = errorData.error || errorMessage
        } catch (e) {
          // If we can't parse the error response, use the default message
        }
        
        if (response.status === 403) {
          throw new Error('Campaign logs are only available for enhanced projects')
        }
        if (response.status === 400) {
          throw new Error(`Bad request: ${errorMessage}`)
        }
        throw new Error(errorMessage)
      }

      const data: CampaignLogsResponse = await response.json()
      
      setLogs(data.items)
      setPagination(data.pagination)

      console.log(`Loaded ${data.items.length} logs (Page ${data.pagination.currentPage}/${data.pagination.totalPages})`)

    } catch (err: any) {
      console.error('Error fetching campaign logs:', err)
      setError(err.message || 'Failed to fetch campaign logs')
    } finally {
      setLoading(false)
      setRefreshing(false)
    }
  }, [projectId, currentPage, itemsPerPage, statusFilter, sourceFileFilter, debouncedSearchQuery, sortBy, sortOrder])

  // Refresh function
  const refresh = useCallback(() => {
    setRefreshing(true)
    fetchLogs(true)
  }, [fetchLogs])

  // Effects
  useEffect(() => {
    if (projectId) {
      fetchLogs(true)
    }
  }, [projectId, itemsPerPage, statusFilter, sourceFileFilter, debouncedSearchQuery, sortBy, sortOrder])

  useEffect(() => {
    if (projectId && !refreshing) {
      fetchLogs(false)
    }
  }, [currentPage, fetchLogs])

  // Set default dates when schedule dialog opens
  useEffect(() => {
    if (showScheduleDialog) {
      const today = new Date()
      const tomorrow = new Date(today)
      tomorrow.setDate(tomorrow.getDate() + 1)
      
      setScheduleData(prev => ({
        ...prev,
        start_date: today.toISOString().split('T')[0],
        end_date: tomorrow.toISOString().split('T')[0]
      }))
    }
  }, [showScheduleDialog])

  // Helper functions
  const formatDateTime = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleString('en-IN', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    })
  }

  const getStatusColor = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'completed':
        return 'bg-green-100 text-green-800 border-green-200'
      case 'failed':
        return 'bg-red-100 text-red-800 border-red-200'
      case 'in_progress':
        return 'bg-blue-100 text-blue-800 border-blue-200'
      case 'pending':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const exportLogs = () => {
    const csvContent = [
      // Header
      'Phone Number,Alternative Number,FPO Name,FPO Login ID,Status,Real Attempts,Source File,Created At,Uploaded At',
      // Data rows
      ...logs.map(log => 
        `"${log.phoneNumber}","${log.alternative_number || ''}","${log.fpoName}","${log.fpoLoginId}","${log.call_status}",${log.real_attempt_count},"${log.sourceFile}","${log.createdAt}","${log.uploadedAt}"`
      )
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', `campaign-logs-page-${currentPage}-${new Date().toISOString().split('T')[0]}.csv`)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  const handleSort = (column: 'createdAt' | 'phoneNumber' | 'call_status') => {
    if (sortBy === column) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')
    } else {
      setSortBy(column)
      setSortOrder('desc')
    }
  }

  const getSortIcon = (column: string) => {
    if (sortBy !== column) {
      return <ArrowUpDown className="h-4 w-4 text-gray-400" />
    }
    return sortOrder === 'asc' 
      ? <ArrowUp className="h-4 w-4 text-blue-600" />
      : <ArrowDown className="h-4 w-4 text-blue-600" />
  }

  const goToPage = (page: number) => {
    if (page >= 1 && pagination && page <= pagination.totalPages) {
      setCurrentPage(page)
    }
  }

  const clearFilters = () => {
    setSearchQuery('')
    setStatusFilter('all')
    setSourceFileFilter('')
    setSortBy('createdAt')
    setSortOrder('desc')
    setCurrentPage(1)
  }

  // Upload CSV handler (same as before)
  const handleUpload = async () => {
    if (!csvFile) return
    
    setUploading(true)
    try {
      const formData = new FormData()
      formData.append('file', csvFile)
      formData.append('project_id', projectId)

      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to upload CSV')
      }

      const result = await response.json()
      
      const alertMessage = [
        result.message,
        `File: ${result.fileName} (${(result.fileSize / 1024).toFixed(1)} KB)`,
        result.s3Key && result.s3Key !== 'upload_successful_but_key_unavailable' 
          ? `S3 Key: ${result.s3Key}` 
          : 'Upload completed successfully',
        result.uploadUrl ? `URL: ${result.uploadUrl}` : ''
      ].filter(Boolean).join('\n')
      
      alert(alertMessage)
      
      setShowUploadDialog(false)
      setCsvFile(null)
      
      // Refresh logs after upload
      setTimeout(() => {
        refresh()
      }, 2000)
      
    } catch (error) {
      console.error('Upload error:', error)
      alert('Failed to upload CSV: ' + (error as Error).message)
    } finally {
      setUploading(false)
    }
  }

  // Schedule Campaign handler (same as before)
  const handleSchedule = async () => {
    if (!scheduleData.start_date || !scheduleData.end_date) {
      alert('Please select start date and end date')
      return
    }

    setScheduling(true)
    try {
      const schedulePayload = {
        project_id: projectId,
        start_date: scheduleData.start_date,
        end_date: scheduleData.end_date,
        start_time: scheduleData.start_time,
        end_time: scheduleData.end_time,
        concurrency: scheduleData.concurrency,
        retry_config: scheduleData.retry_config
      }

      const response = await fetch('/api/schedule', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(schedulePayload),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to create schedule')
      }

      const result = await response.json()
      
      const alertMessage = [
        result.message,
        `Schedule ID: ${result.scheduleId}`,
        `Period: ${result.schedule.start_date} to ${result.schedule.end_date}`,
        `Time: ${result.schedule.start_time} - ${result.schedule.end_time}`,
        `Concurrency: ${result.schedule.concurrency} calls`,
        result.retry_configuration ? 'Retry configuration updated' : ''
      ].filter(Boolean).join('\n')
      
      alert(alertMessage)
      setShowScheduleDialog(false)
      
    } catch (error) {
      console.error('Schedule error:', error)
      alert('Failed to create schedule: ' + (error as Error).message)
    } finally {
      setScheduling(false)
    }
  }

  // Delete All handler (similar to before but with improved UI feedback)
  const handleDeleteAll = async () => {
    if (deleteConfirmText !== 'DELETE ALL LOGS') return
    
    setDeleting(true)
    setError(null)
    try {
      const response = await fetch(`/api/campaign-logs?project_id=${projectId}&confirm=DELETE_ALL_CAMPAIGN_LOGS`, {
        method: 'DELETE'
      })

      const result = await response.json()
      if (!response.ok) {
        throw new Error(result.error || 'Failed to delete logs')
      }

      setDeleteResult({
        success: true,
        message: result.message,
        count: result.deletedCount,
        batchCount: result.batchCount
      })

      // Reset data
      setLogs([])
      setPagination(null)
      setCurrentPage(1)
      
      setShowDeleteDialog(false)
      setDeleteConfirmText('')
      
      // Refresh after delay
      setTimeout(() => {
        fetchLogs(true)
      }, 1000)

    } catch (err: any) {
      console.error('Error deleting logs:', err)
      setDeleteResult({
        success: false,
        message: err.message || 'Failed to delete logs'
      })
    } finally {
      setDeleting(false)
    }
  }

  // Render pagination component
  const renderPagination = () => {
    if (!pagination || pagination.totalPages <= 1) return null

    const { currentPage: page, totalPages, hasNextPage, hasPreviousPage } = pagination

    // Calculate page numbers to show
    const getPageNumbers = () => {
      const pages = []
      const showPages = 5 // Number of page buttons to show
      
      let startPage = Math.max(1, page - Math.floor(showPages / 2))
      let endPage = Math.min(totalPages, startPage + showPages - 1)
      
      if (endPage - startPage < showPages - 1) {
        startPage = Math.max(1, endPage - showPages + 1)
      }
      
      for (let i = startPage; i <= endPage; i++) {
        pages.push(i)
      }
      
      return pages
    }

    const pageNumbers = getPageNumbers()

    return (
      <div className="flex items-center justify-between px-6 py-4 border-t border-gray-200 bg-white">
        <div className="flex items-center gap-4 text-sm text-gray-600">
          <div>
            Showing {((page - 1) * pagination.itemsPerPage) + 1} to{' '}
            {Math.min(page * pagination.itemsPerPage, pagination.totalItems)} of{' '}
            {pagination.totalItems} results
          </div>
          
          <div className="flex items-center gap-2">
            <label className="text-sm font-medium">Rows per page:</label>
            <select
              value={itemsPerPage}
              onChange={(e) => {
                setItemsPerPage(Number(e.target.value))
                setCurrentPage(1)
              }}
              className="px-2 py-1 text-sm border border-gray-300 rounded focus:border-blue-500 focus:ring-1 focus:ring-blue-100"
            >
              {ITEMS_PER_PAGE_OPTIONS.map(option => (
                <option key={option} value={option}>{option}</option>
              ))}
            </select>
          </div>
        </div>

        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => goToPage(page - 1)}
            disabled={!hasPreviousPage || loading}
          >
            <ChevronLeft className="h-4 w-4" />
            Previous
          </Button>

          <div className="flex items-center gap-1">
            {pageNumbers[0] > 1 && (
              <>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(1)}
                  disabled={loading}
                >
                  1
                </Button>
                {pageNumbers[0] > 2 && (
                  <span className="px-2 text-gray-400">...</span>
                )}
              </>
            )}

            {pageNumbers.map(pageNum => (
              <Button
                key={pageNum}
                variant={pageNum === page ? "default" : "outline"}
                size="sm"
                onClick={() => goToPage(pageNum)}
                disabled={loading}
                className={pageNum === page ? "bg-blue-600 text-white" : ""}
              >
                {pageNum}
              </Button>
            ))}

            {pageNumbers[pageNumbers.length - 1] < totalPages && (
              <>
                {pageNumbers[pageNumbers.length - 1] < totalPages - 1 && (
                  <span className="px-2 text-gray-400">...</span>
                )}
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(totalPages)}
                  disabled={loading}
                >
                  {totalPages}
                </Button>
              </>
            )}
          </div>

          <Button
            variant="outline"
            size="sm"
            onClick={() => goToPage(page + 1)}
            disabled={!hasNextPage || loading}
          >
            Next
            <ChevronRight className="h-4 w-4" />
          </Button>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center space-y-4 max-w-md">
          <AlertCircle className="w-12 h-12 text-red-500 mx-auto" />
          <h2 className="text-xl font-semibold text-gray-900">Unable to Load Campaign Logs</h2>
          <p className="text-gray-600">{error}</p>
          <div className="flex gap-3 justify-center">
            <Button variant="outline" onClick={onBack}>
              <ChevronLeft className="h-4 w-4 mr-2" />
              Go Back
            </Button>
            <Button onClick={() => fetchLogs(true)}>
              <RefreshCw className="h-4 w-4 mr-2" />
              Retry
            </Button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="flex-1 flex flex-col min-h-0 overflow-hidden">
      {/* Header */}
      <header className="px-6 py-4 border-b border-gray-100 bg-gradient-to-r from-purple-50 to-pink-50">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-4">
              <div>
                <h1 className="text-xl font-semibold text-gray-900">Campaign Logs</h1>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => setShowUploadDialog(true)}
                className="bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-200"
              >
                <Upload className="h-4 w-4 mr-2" />
                Upload CSV
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => setShowScheduleDialog(true)}
                className="bg-green-50 hover:bg-green-100 text-green-700 border-green-200"
              >
                <Calendar className="h-4 w-4 mr-2" />
                Schedule
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={exportLogs}
                disabled={logs.length === 0}
              >
                <Download className="h-4 w-4 mr-2" />
                Export CSV
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={refresh}
                disabled={refreshing}
              >
                {refreshing ? (
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4 mr-2" />
                )}
                Refresh
              </Button>
              <Button 
                variant="destructive" 
                size="sm" 
                onClick={() => setShowDeleteDialog(true)}
                disabled={logs.length === 0 || loading}
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Delete All
              </Button>
            </div>
          </div>

          {/* Filters */}
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            {/* Search */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400" />
              <Input
                placeholder="Search contacts..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 bg-white/80 backdrop-blur-sm"
              />
            </div>

            {/* Status Filter */}
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="px-3 py-2 text-sm border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 focus:outline-none bg-white/80 backdrop-blur-sm"
            >
              {CALL_STATUS_OPTIONS.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>

            {/* Source File Filter */}
            <Input
              placeholder="Filter by source file..."
              value={sourceFileFilter}
              onChange={(e) => setSourceFileFilter(e.target.value)}
              className="bg-white/80 backdrop-blur-sm"
            />

            {/* Sort Options */}
            <select
              value={`${sortBy}-${sortOrder}`}
              onChange={(e) => {
                const [field, order] = e.target.value.split('-')
                setSortBy(field as 'createdAt' | 'phoneNumber' | 'call_status')
                setSortOrder(order as 'asc' | 'desc')
              }}
              className="px-3 py-2 text-sm border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 focus:outline-none bg-white/80 backdrop-blur-sm"
            >
              {SORT_OPTIONS.map(option => (
                <React.Fragment key={option.value}>
                  <option value={`${option.value}-desc`}>
                    {option.label} ‚Üì
                  </option>
                  <option value={`${option.value}-asc`}>
                    {option.label} ‚Üë
                  </option>
                </React.Fragment>
              ))}
            </select>

            {/* Clear Filters */}
            <Button 
              variant="outline" 
              onClick={clearFilters}
              className="bg-white/80 backdrop-blur-sm"
            >
              <Filter className="h-4 w-4 mr-2" />
              Clear Filters
            </Button>
          </div>
        </div>
      </header>

      {/* Table */}
      <main className="flex-1 overflow-hidden">
        {loading && logs.length === 0 ? (
          <div className="text-center py-12">
            <Loader2 className="w-8 h-8 animate-spin text-blue-500 mx-auto mb-4" />
            <p className="text-gray-600">Loading campaign logs...</p>
          </div>
        ) : logs.length === 0 ? (
          <div className="text-center py-12">
            <Building2 className="w-12 h-12 text-gray-300 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No campaign logs found</h3>
            <p className="text-gray-600 mb-6">
              {searchQuery || statusFilter !== 'all' || sourceFileFilter 
                ? 'Try adjusting your search criteria' 
                : 'No contacts have been uploaded yet'
              }
            </p>
            {(searchQuery || statusFilter !== 'all' || sourceFileFilter) && (
              <Button variant="outline" onClick={clearFilters}>
                Clear Filters
              </Button>
            )}
          </div>
        ) : (
          <div className="h-full flex flex-col">
            <div className="flex-1 overflow-auto">
              <div className="min-w-full" style={{ minWidth: "1500px" }}>
                <Table className="w-full">
                  <TableHeader className="sticky top-0 z-10 bg-background/95 backdrop-blur-sm border-b-2">
                    <TableRow className="bg-muted/80 hover:bg-muted/80">
                      <TableHead 
                        className="w-[140px] font-semibold text-foreground pl-6 cursor-pointer hover:bg-muted/60"
                        onClick={() => handleSort('phoneNumber')}
                      >
                        <div className="flex items-center gap-2">
                          Phone Number
                          {getSortIcon('phoneNumber')}
                        </div>
                      </TableHead>
                      <TableHead className="w-[140px] font-semibold text-foreground">Alternative</TableHead>
                      <TableHead className="w-[160px] font-semibold text-foreground">FPO Name</TableHead>
                      <TableHead className="w-[120px] font-semibold text-foreground">FPO Login ID</TableHead>
                      <TableHead 
                        className="w-[100px] font-semibold text-foreground cursor-pointer hover:bg-muted/60"
                        onClick={() => handleSort('call_status')}
                      >
                        <div className="flex items-center gap-2">
                          Status
                          {getSortIcon('call_status')}
                        </div>
                      </TableHead>
                      <TableHead className="w-[90px] font-semibold text-foreground">Retry Attempts</TableHead>
                      <TableHead className="w-[200px] font-semibold text-foreground">System Error</TableHead>
                      <TableHead 
                        className="w-[140px] font-semibold text-foreground pr-6 cursor-pointer hover:bg-muted/60"
                        onClick={() => handleSort('createdAt')}
                      >
                        <div className="flex items-center gap-2">
                          Created At
                          {getSortIcon('createdAt')}
                        </div>
                      </TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {logs.map((log) => (
                      <TableRow
                        key={log.id}
                        className="cursor-default hover:bg-muted/30 transition-all duration-200 border-b border-border/50"
                      >
                        <TableCell className="font-medium pl-6 py-4">
                          <div className="flex items-center gap-3">
                            <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                              <Phone className="w-4 h-4 text-primary" />
                            </div>
                            <span className="font-medium">{log.phoneNumber}</span>
                          </div>
                        </TableCell>

                        <TableCell className="py-4">
                          <span className="text-sm text-gray-600">{log.alternative_number || '-'}</span>
                        </TableCell>

                        <TableCell className="py-4">
                          <div className="flex items-center gap-2">
                            <Building2 className="w-3 h-3 text-muted-foreground" />
                            <span className="font-medium">{log.fpoName}</span>
                          </div>
                        </TableCell>

                        <TableCell className="py-4">
                          <code className="text-xs bg-muted/60 px-2 py-1 rounded font-mono">
                            {log.fpoLoginId}
                          </code>
                        </TableCell>

                        <TableCell className="py-4">
                          <Badge
                            className={cn("text-xs font-medium px-2.5 py-1", getStatusColor(log.call_status))}
                          >
                            {log.call_status}
                          </Badge>
                        </TableCell>

                        <TableCell className="py-4">
                          <div className="flex items-center gap-2 text-sm font-medium">
                            <Clock className="w-3 h-3 text-muted-foreground" />
                            {log.real_attempt_count}
                          </div>
                        </TableCell>

                        <TableCell className="py-4">
                          <div className="flex items-center gap-2 text-sm font-medium">
                            <Clock className="w-3 h-3 text-muted-foreground" />
                            {log.system_error_count}
                          </div>
                        </TableCell>
                        
                        <TableCell className="text-sm text-muted-foreground py-4 pr-6">
                          {formatDateTime(log.createdAt)}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>

                {loading && logs.length > 0 && (
                  <div className="text-center py-4">
                    <Loader2 className="w-6 h-6 animate-spin text-blue-500 mx-auto" />
                    <p className="text-sm text-gray-600 mt-2">Loading more data...</p>
                  </div>
                )}
              </div>
            </div>

            {/* Pagination */}
            {renderPagination()}
          </div>
        )}
      </main>

      {/* All the existing dialogs remain the same */}
      {/* Upload CSV Dialog */}
      {showUploadDialog && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-6 space-y-4">
            <div className="text-center">
              <div className="w-12 h-12 mx-auto mb-4 bg-blue-100 rounded-full flex items-center justify-center">
                <Upload className="w-6 h-6 text-blue-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">Upload CSV File</h3>
              <p className="text-sm text-gray-600">Select a CSV file to upload to S3</p>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  CSV File
                </label>
                <input
                  type="file"
                  accept=".csv"
                  onChange={(e) => setCsvFile(e.target.files?.[0] || null)}
                  className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                />
              </div>
              
              {csvFile && (
                <div className="text-sm text-gray-600 bg-gray-50 rounded p-3">
                  <strong>Selected:</strong> {csvFile.name} ({(csvFile.size / 1024).toFixed(1)} KB)
                </div>
              )}
            </div>
            
            <div className="flex gap-3 pt-2">
              <Button 
                variant="outline" 
                onClick={() => {
                  setShowUploadDialog(false)
                  setCsvFile(null)
                }} 
                disabled={uploading}
                className="flex-1"
              >
                Cancel
              </Button>
              <Button 
                onClick={handleUpload}
                disabled={!csvFile || uploading}
                className="flex-1"
              >
                {uploading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Uploading...
                  </>
                ) : (
                  <>
                    <Upload className="w-4 h-4 mr-2" />
                    Upload to S3
                  </>
                )}
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Delete All Confirmation Dialog */}
      {showDeleteDialog && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-6 space-y-4">
            {!deleteResult ? (
              <>
                <div className="text-center">
                  <div className="w-12 h-12 mx-auto mb-4 bg-red-100 rounded-full flex items-center justify-center">
                    <Trash2 className="w-6 h-6 text-red-600" />
                  </div>
                  <h3 className="text-xl font-semibold text-red-900 mb-2">Delete All Campaign Logs</h3>
                  <p className="text-sm text-red-700">This will permanently delete all campaign logs from DynamoDB</p>
                </div>
                
                <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                  <p className="text-sm text-red-800 mb-2">
                    <strong>‚ö†Ô∏è Warning:</strong> This action cannot be undone!
                  </p>
                </div>
                
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Type <span className="font-mono bg-gray-100 px-1 rounded">DELETE ALL LOGS</span> to confirm:
                    </label>
                    <input
                      type="text"
                      value={deleteConfirmText}
                      onChange={(e) => setDeleteConfirmText(e.target.value)}
                      placeholder="DELETE ALL LOGS"
                      disabled={deleting}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg font-mono text-sm focus:border-red-500 focus:ring-2 focus:ring-red-100"
                    />
                  </div>
                  
                  {pagination && (
                    <div className="text-sm text-gray-600 bg-gray-50 rounded p-3">
                      <strong>Records to be deleted:</strong> {pagination.totalItems} campaign log entries
                    </div>
                  )}
                </div>
                
                <div className="flex gap-3 pt-2">
                  <Button 
                    variant="outline" 
                    onClick={() => {
                      setShowDeleteDialog(false)
                      setDeleteConfirmText('')
                      setDeleteResult(null)
                    }}
                    disabled={deleting}
                    className="flex-1"
                  >
                    Cancel
                  </Button>
                  <Button 
                    variant="destructive"
                    onClick={handleDeleteAll}
                    disabled={deleteConfirmText !== 'DELETE ALL LOGS' || deleting}
                    className="flex-1"
                  >
                    {deleting ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        Deleting...
                      </>
                    ) : (
                      <>
                        <Trash2 className="w-4 h-4 mr-2" />
                        Delete All Logs
                      </>
                    )}
                  </Button>
                </div>
              </>
            ) : (
              <>
                <div className="text-center">
                  <div className={`w-12 h-12 mx-auto mb-4 rounded-full flex items-center justify-center ${
                    deleteResult.success ? 'bg-green-100' : 'bg-red-100'
                  }`}>
                    {deleteResult.success ? (
                      <CheckCircle className="w-6 h-6 text-green-600" />
                    ) : (
                      <AlertCircle className="w-6 h-6 text-red-600" />
                    )}
                  </div>
                  <h3 className={`text-xl font-semibold mb-2 ${
                    deleteResult.success ? 'text-green-900' : 'text-red-900'
                  }`}>
                    {deleteResult.success ? 'Deletion Successful!' : 'Deletion Failed'}
                  </h3>
                  <p className={`text-sm ${
                    deleteResult.success ? 'text-green-700' : 'text-red-700'
                  }`}>
                    {deleteResult.message}
                  </p>
                  
                  {deleteResult.success && (
                    <div className="mt-3 text-sm text-gray-600 bg-gray-50 rounded p-3">
                      <strong>Deleted:</strong> {deleteResult.count} records in {deleteResult.batchCount} batches
                    </div>
                  )}
                </div>
                
                <div className="pt-2">
                  <Button 
                    variant="outline" 
                    onClick={() => {
                      setShowDeleteDialog(false)
                      setDeleteConfirmText('')
                      setDeleteResult(null)
                    }}
                    className="w-full"
                  >
                    Close
                  </Button>
                </div>
              </>
            )}
          </div>
        </div>
      )}

      {/* Schedule Dialog - keeping the same structure as original */}
      {showScheduleDialog && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-6 space-y-4 max-h-[90vh] overflow-y-auto">
            <div className="text-center">
              <div className="w-12 h-12 mx-auto mb-4 bg-green-100 rounded-full flex items-center justify-center">
                <Calendar className="w-6 h-6 text-green-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">Schedule Campaign</h3>
              <p className="text-sm text-gray-600">Configure your campaign schedule settings</p>
            </div>
            
            {/* Schedule form content - same as original */}
            <div className="space-y-4">
              {/* Date Range */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Start Date
                  </label>
                  <input
                    type="date"
                    value={scheduleData.start_date}
                    onChange={(e) => setScheduleData({ ...scheduleData, start_date: e.target.value })}
                    disabled={scheduling}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:border-green-500 focus:ring-2 focus:ring-green-100"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    End Date
                  </label>
                  <input
                    type="date"
                    value={scheduleData.end_date}
                    onChange={(e) => setScheduleData({ ...scheduleData, end_date: e.target.value })}
                    disabled={scheduling}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:border-green-500 focus:ring-2 focus:ring-green-100"
                  />
                </div>
              </div>

              {/* Time Range and other fields - same structure */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    <Clock className="w-4 h-4 inline mr-1" />
                    Start Time
                  </label>
                  <input
                    type="time"
                    value={scheduleData.start_time}
                    onChange={(e) => setScheduleData({ ...scheduleData, start_time: e.target.value })}
                    disabled={scheduling}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:border-green-500 focus:ring-2 focus:ring-green-100"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    <Clock className="w-4 h-4 inline mr-1" />
                    End Time
                  </label>
                  <input
                    type="time"
                    value={scheduleData.end_time}
                    onChange={(e) => setScheduleData({ ...scheduleData, end_time: e.target.value })}
                    disabled={scheduling}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:border-green-500 focus:ring-2 focus:ring-green-100"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Concurrency
                </label>
                <input
                  type="number"
                  min="1"
                  max="50"
                  value={scheduleData.concurrency}
                  onChange={(e) => setScheduleData({ ...scheduleData, concurrency: parseInt(e.target.value) || 1 })}
                  disabled={scheduling}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:border-green-500 focus:ring-2 focus:ring-green-100"
                />
              </div>
            </div>

            <div className="flex gap-3 pt-2">
              <Button 
                variant="outline" 
                onClick={() => setShowScheduleDialog(false)}
                disabled={scheduling}
                className="flex-1"
              >
                Cancel
              </Button>
              <Button 
                onClick={handleSchedule}
                disabled={scheduling}
                className="flex-1"
              >
                {scheduling ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Scheduling...
                  </>
                ) : (
                  <>
                    <Calendar className="w-4 w-4 mr-2" />
                    Create Schedule
                  </>
                )}
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default CampaignLogs
</file>

<file path="src/components/EnhancedChartBuilder.tsx">
// Enhanced chart hook - COUNT with multi-line support
import React, { useState, useEffect } from 'react'
import { supabase } from '../lib/supabase'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, ResponsiveContainer, Tooltip, Legend } from 'recharts'
import { Plus, X, Loader2, TrendingUp } from 'lucide-react'

interface ChartConfig {
  id: string
  title: string
  field: string
  source: 'table' | 'metadata' | 'transcription_metrics'
  chartType: 'line' | 'bar'
  filterValue?: string
  color: string
}


interface ChartDataPoint {
  date: string
  [key: string]: string | number
}

interface DatabaseRecord {
  created_at: string
  [key: string]: any
  metadata?: { [key: string]: any }
  transcription_metrics?: { [key: string]: any }
}

interface ProcessedRecord {
  created_at: string
  fieldValue: string
}


export const useCountChartData = (
  config: ChartConfig,
  agentId: string,
  dateFrom: string,
  dateTo: string,
  groupBy: 'day' | 'week' | 'month' = 'day'
) => {
  const [data, setData] = useState<ChartDataPoint[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [uniqueValues, setUniqueValues] = useState<string[]>([])

  useEffect(() => {
    if (!config.field) return

    const fetchChartData = async () => {
      try {
        setLoading(true)
        setError(null)

        let query: any

        if (config.filterValue) {
          // SINGLE LINE: Filter for specific value, only need created_at
          query = supabase
            .from('pype_voice_call_logs')
            .select('created_at')  // ‚úÖ FIXED: Added .select()
            .eq('agent_id', agentId)
            .gte('created_at', `${dateFrom}T00:00:00`)
            .lte('created_at', `${dateTo}T23:59:59`)
          
          if (config.source === 'table') {
            query = query.eq(config.field, config.filterValue)
          } else if (config.source === 'metadata') {
            query = query.eq(`metadata->${config.field}`, config.filterValue)
          } else if (config.source === 'transcription_metrics') {
            query = query.eq(`transcription_metrics->${config.field}`, config.filterValue)
          }
        } else {
          // MULTI-LINE: Need the actual field data to group by values
          if (config.source === 'table') {
            query = supabase
              .from('pype_voice_call_logs')
              .select(`created_at, ${config.field}`)  // ‚úÖ FIXED: Added .select()
              .eq('agent_id', agentId)
              .gte('created_at', `${dateFrom}T00:00:00`)
              .lte('created_at', `${dateTo}T23:59:59`)
          } else if (config.source === 'metadata') {
            query = supabase
              .from('pype_voice_call_logs')
              .select('created_at, metadata')  // ‚úÖ FIXED: Added .select()
              .eq('agent_id', agentId)
              .gte('created_at', `${dateFrom}T00:00:00`)
              .lte('created_at', `${dateTo}T23:59:59`)
              .not(`metadata->${config.field}`, 'is', null)
          } else if (config.source === 'transcription_metrics') {
            query = supabase
              .from('pype_voice_call_logs')
              .select('created_at, transcription_metrics')  // ‚úÖ FIXED: Added .select()
              .eq('agent_id', agentId)
              .gte('created_at', `${dateFrom}T00:00:00`)
              .lte('created_at', `${dateTo}T23:59:59`)
              .not(`transcription_metrics->${config.field}`, 'is', null)
          }
        }

        console.log('üîç Query setup:', {
          hasFilter: !!config.filterValue,
          source: config.source,
          field: config.field
        })

        const { data: records, error }: { data: DatabaseRecord[] | null, error: any } = await query

        if (error) {
          console.error('‚ùå Query error:', error)
          throw error
        }
        
        if (!records || records.length === 0) {
          console.log('‚ö†Ô∏è No records returned')
          setData([])
          setUniqueValues([])
          return
        }

        console.log('‚úÖ Records found:', records.length)

        if (config.filterValue) {
          // SINGLE LINE LOGIC: Just count by date
          const grouped = records.reduce((acc, record) => {
            const date = new Date(record.created_at)
            const dateKey = getDateKey(date, groupBy)

            if (!acc[dateKey]) {
              acc[dateKey] = 0
            }
            acc[dateKey]++
            return acc
          }, {} as { [key: string]: number })

          const chartData: ChartDataPoint[] = Object.entries(grouped)
            .map(([dateKey, count]) => ({
              date: dateKey,
              value: count
            }))
            .sort((a, b) => a.date.localeCompare(b.date))

          console.log('üìà Single line chart data:', chartData)
          setData(chartData)
          setUniqueValues([])
        } else {
          // MULTI-LINE LOGIC: Extract field values and group by both date AND value
          const processedRecords: ProcessedRecord[] = records.map(record => {
            let fieldValue: any
            
            if (config.source === 'table') {
              fieldValue = record[config.field]
            } else if (config.source === 'metadata') {
              fieldValue = record.metadata?.[config.field]
            } else if (config.source === 'transcription_metrics') {
              fieldValue = record.transcription_metrics?.[config.field]
            }

            // Convert to string, handling booleans properly
            let fieldString: string
            if (fieldValue === null || fieldValue === undefined) {
              fieldString = 'null'
            } else if (typeof fieldValue === 'boolean') {
              fieldString = fieldValue.toString() // true -> "true", false -> "false"
            } else {
              fieldString = String(fieldValue)
            }

            return {
              created_at: record.created_at,
              fieldValue: fieldString
            }
          }).filter((record: ProcessedRecord) => record.fieldValue !== 'null') // Remove null values

          console.log('üìä Processed records sample:', processedRecords.slice(0, 5))

          // Get unique values
          const uniqueVals: string[] = [...new Set(processedRecords.map(r => r.fieldValue))].sort()
          console.log('üéØ Unique values found:', uniqueVals)
          setUniqueValues(uniqueVals)

          if (uniqueVals.length === 0) {
            console.log('‚ö†Ô∏è No unique values found')
            setData([])
            return
          }

          // Group by date AND field value
          const grouped = processedRecords.reduce((acc, record) => {
            const date = new Date(record.created_at)
            const dateKey = getDateKey(date, groupBy)
            const fieldValue = record.fieldValue

            if (!acc[dateKey]) {
              acc[dateKey] = {}
            }
            if (!acc[dateKey][fieldValue]) {
              acc[dateKey][fieldValue] = 0
            }
            acc[dateKey][fieldValue]++
            return acc
          }, {} as { [date: string]: { [value: string]: number } })

          console.log('üìä Grouped by date and value:', Object.keys(grouped).length, 'dates')

          // Convert to chart format
          const chartData: ChartDataPoint[] = Object.entries(grouped)
            .map(([dateKey, valueCounts]) => {
              const dataPoint: ChartDataPoint = { date: dateKey }
              
              // Add count for each unique value (0 if missing)
              uniqueVals.forEach(value => {
                dataPoint[value] = valueCounts[value] || 0
              })
              
              return dataPoint
            })
            .sort((a, b) => a.date.localeCompare(b.date))

          console.log('üìà Final chart data sample:', chartData.slice(0, 2))
          console.log('üé® Lines will be created for:', uniqueVals)
          setData(chartData)
        }

      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to fetch chart data')
        console.error('‚ùå Chart data fetch error:', err)
      } finally {
        setLoading(false)
      }
    }

    fetchChartData()
  }, [config, agentId, dateFrom, dateTo, groupBy])

  return { data, loading, error, uniqueValues }
}

// Helper function to get date key based on groupBy
const getDateKey = (date: Date, groupBy: 'day' | 'week' | 'month'): string => {
  switch (groupBy) {
    case 'week':
      const weekStart = new Date(date)
      weekStart.setDate(date.getDate() - date.getDay())
      return weekStart.toISOString().split('T')[0]
    
    case 'month':
      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`
    
    default: // day
      return date.toISOString().split('T')[0]
  }
}

// Simplified field discovery - same as before
export const useQuickFieldDiscovery = (agentId: string, dateFrom: string, dateTo: string) => {
  const [fields, setFields] = useState<{
    metadata: string[]
    transcription_metrics: string[]
  }>({ metadata: [], transcription_metrics: [] })
  
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const discoverFields = async () => {
      try {
        setLoading(true)

        // Get transcription fields from agent configuration
        const { data: agentData } = await supabase
          .from('pype_voice_agents')
          .select('field_extractor_keys')
          .eq('id', agentId)
          .single()

        // Get metadata fields from sample data
        const { data: sampleRecords } = await supabase
          .from('pype_voice_call_logs')
          .select('metadata')
          .eq('agent_id', agentId)
          .gte('created_at', `${dateFrom}T00:00:00`)
          .lte('created_at', `${dateTo}T23:59:59`)
          .not('metadata', 'is', null)
          .limit(20)

        // Extract metadata field names
        const metadataKeys = new Set<string>()
        sampleRecords?.forEach((record:any) => {
          if (record.metadata && typeof record.metadata === 'object') {
            Object.keys(record.metadata).forEach(key => {
              if (key && record.metadata[key] != null) {
                metadataKeys.add(key)
              }
            })
          }
        })

        setFields({
          metadata: Array.from(metadataKeys),
          transcription_metrics: agentData?.field_extractor_keys || []
        })
      } catch (error) {
        console.error('Field discovery error:', error)
      } finally {
        setLoading(false)
      }
    }

    if (agentId && dateFrom && dateTo) {
      discoverFields()
    }
  }, [agentId, dateFrom, dateTo])

  return { fields, loading }
}

// Enhanced Chart Builder Component
interface EnhancedChartBuilderProps {
  agentId: string
  dateFrom: string
  dateTo: string
}

export const EnhancedChartBuilder: React.FC<EnhancedChartBuilderProps> = ({ agentId, dateFrom, dateTo }) => {
  const [charts, setCharts] = useState<ChartConfig[]>([])
  const [showBuilder, setShowBuilder] = useState(false)
  const [groupBy, setGroupBy] = useState<'day' | 'week' | 'month'>('day')
  const [newChart, setNewChart] = useState<Partial<ChartConfig>>({
    chartType: 'line',
    color: '#3b82f6'
  })

  const { fields, loading: fieldsLoading } = useQuickFieldDiscovery(agentId, dateFrom, dateTo)

  // Predefined table fields for quick access
  const tableFields = [
    'call_ended_reason',
    'transcript_type',
    'environment'
  ]

  const addChart = () => {
    if (!newChart.field || !newChart.source) return

    const chart: ChartConfig = {
      id: Date.now().toString(),
      title: newChart.title || `${newChart.field} Count${newChart.filterValue ? ` (${newChart.filterValue})` : ''}`,
      field: newChart.field,
      source: newChart.source as any,
      chartType: newChart.chartType as any,
      filterValue: newChart.filterValue,
      color: newChart.color || '#3b82f6'
    }

    setCharts(prev => [...prev, chart])
    setNewChart({ chartType: 'line', color: '#3b82f6' })
    setShowBuilder(false)
  }

  // Enhanced Chart Component with professional styling
  const ChartComponent = ({ config }: { config: ChartConfig }) => {
    const { data, loading, error, uniqueValues } = useCountChartData(config, agentId, dateFrom, dateTo, groupBy)

    if (loading) {
      return (
        <div className="h-80 flex items-center justify-center">
          <Loader2 className="w-6 h-6 animate-spin text-blue-500" />
        </div>
      )
    }

    if (error) {
      return (
        <div className="h-80 flex items-center justify-center text-red-500 text-sm">
          Error: {error}
        </div>
      )
    }

    if (!data || data.length === 0) {
      return (
        <div className="h-80 flex items-center justify-center text-gray-500 text-sm">
          No data available
        </div>
      )
    }

    // Professional color palette
    const colors = [
      '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',
      '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'
    ]

    // Custom tooltip
    const CustomTooltip = ({ active, payload, label }: any) => {
      if (active && payload && payload.length) {
        return (
          <div className="bg-white p-3 border border-gray-200 rounded-lg shadow-lg">
            <p className="font-medium text-gray-900 mb-2">{label}</p>
            {payload.map((entry: any, index: number) => (
              <div key={index} className="flex items-center justify-between space-x-3">
                <div className="flex items-center space-x-2">
                  <div 
                    className="w-3 h-3 rounded-full" 
                    style={{ backgroundColor: entry.color }}
                  />
                  <span className="text-sm text-gray-700">
                    {entry.dataKey === 'value' ? config.field : entry.dataKey}
                  </span>
                </div>
                <span className="text-sm font-semibold">{entry.value}</span>
              </div>
            ))}
          </div>
        )
      }
      return null
    }

    return (
      <div className="h-80">
        <ResponsiveContainer width="100%" height="100%">
          {config.chartType === 'line' ? (
            <LineChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
              <XAxis 
                dataKey="date" 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12, fill: '#6b7280' }}
                tickFormatter={(value) => {
                  if (groupBy === 'day') {
                    return new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
                  }
                  return value
                }}
              />
              <YAxis 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12, fill: '#6b7280' }}
                tickFormatter={(value) => value.toLocaleString()}
              />
              <Tooltip content={<CustomTooltip />} />
              {config.filterValue ? (
                // Single line for filtered data
                <Line 
                  type="monotone" 
                  dataKey="value" 
                  stroke={config.color}
                  strokeWidth={3}
                  dot={{ fill: config.color, strokeWidth: 2, r: 4 }}
                  activeDot={{ r: 6, fill: config.color }}
                />
              ) : (
                // Multiple lines for each unique value
                uniqueValues.map((value, index) => (
                  <Line
                    key={value}
                    type="monotone"
                    dataKey={value}
                    stroke={colors[index % colors.length]}
                    strokeWidth={3}
                    dot={{ fill: colors[index % colors.length], strokeWidth: 2, r: 4 }}
                    activeDot={{ r: 6, fill: colors[index % colors.length] }}
                  />
                ))
              )}
              {!config.filterValue && uniqueValues.length > 1 && (
                <Legend 
                  wrapperStyle={{ paddingTop: '20px' }}
                  iconType="line"
                />
              )}
            </LineChart>
          ) : (
            <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
              <XAxis 
                dataKey="date" 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12, fill: '#6b7280' }}
                tickFormatter={(value) => {
                  if (groupBy === 'day') {
                    return new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
                  }
                  return value
                }}
              />
              <YAxis 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12, fill: '#6b7280' }}
                tickFormatter={(value) => value.toLocaleString()}
              />
              <Tooltip content={<CustomTooltip />} />
              {config.filterValue ? (
                // Single bar series for filtered data
                <Bar 
                  dataKey="value" 
                  fill={config.color}
                  radius={[6, 6, 0, 0]}
                />
              ) : (
                // Stacked bars for each unique value
                uniqueValues.map((value, index) => (
                  <Bar
                    key={value}
                    dataKey={value}
                    stackId="stack"
                    fill={colors[index % colors.length]}
                    radius={index === uniqueValues.length - 1 ? [6, 6, 0, 0] : [0, 0, 0, 0]}
                  />
                ))
              )}
              {!config.filterValue && uniqueValues.length > 1 && (
                <Legend 
                  wrapperStyle={{ paddingTop: '20px' }}
                />
              )}
            </BarChart>
          )}
        </ResponsiveContainer>
      </div>
    )
  }

  if (fieldsLoading) {
    return (
      <div className="space-y-6">
        <Card className="border-0 bg-gradient-to-r from-blue-50 to-purple-50">
          <CardContent className="p-6">
            <div className="flex items-center justify-center">
              <Loader2 className="w-6 h-6 animate-spin mr-2" />
              <span>Discovering available fields...</span>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header with Group By Control */}
      <Card className="border-0 bg-gradient-to-r from-blue-50 to-purple-50">
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center">
                <TrendingUp className="w-6 h-6 text-blue-600" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-900">Count Analytics</h3>
                <p className="text-sm text-gray-600">
                  {fields.metadata.length} metadata fields ‚Ä¢ {fields.transcription_metrics.length} transcription fields
                </p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <Select value={groupBy} onValueChange={(value: any) => setGroupBy(value)}>
                <SelectTrigger className="w-32">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="day">Daily</SelectItem>
                  <SelectItem value="week">Weekly</SelectItem>
                  <SelectItem value="month">Monthly</SelectItem>
                </SelectContent>
              </Select>
              <Button onClick={() => setShowBuilder(true)}>
                <Plus className="w-4 h-4 mr-2" />
                Add Chart
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Charts Grid */}
      {charts.length > 0 && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {charts.map(chart => (
            <Card key={chart.id} className="border-0 bg-white shadow-sm hover:shadow-md transition-shadow">
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-lg font-semibold">{chart.title}</CardTitle>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setCharts(prev => prev.filter(c => c.id !== chart.id))}
                  className="text-gray-400 hover:text-red-500"
                >
                  <X className="w-4 h-4" />
                </Button>
              </CardHeader>
              <CardContent className="pt-0">
                <ChartComponent config={chart} />
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* Chart Builder Modal - Same as before */}
      {showBuilder && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>Add Count Chart</CardTitle>
                <Button variant="ghost" size="sm" onClick={() => setShowBuilder(false)}>
                  <X className="w-4 h-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Source Selection */}
              <div>
                <Label>Data Source</Label>
                <Select
                  value={newChart.source}
                  onValueChange={(value) => setNewChart(prev => ({ ...prev, source: value as any, field: undefined }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select data source" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="table">Table Fields ({tableFields.length})</SelectItem>
                    <SelectItem value="metadata">Metadata ({fields.metadata.length} fields)</SelectItem>
                    <SelectItem value="transcription_metrics">Transcription ({fields.transcription_metrics.length} fields)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Field Selection */}
              {newChart.source && (
                <div>
                  <Label>Field</Label>
                  <Select
                    value={newChart.field}
                    onValueChange={(value) => setNewChart(prev => ({ ...prev, field: value }))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select field" />
                    </SelectTrigger>
                    <SelectContent>
                      {(newChart.source === 'table' ? tableFields : fields[newChart.source as keyof typeof fields]).map(field => (
                        <SelectItem key={field} value={field}>
                          {field}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              )}

              {/* Filter Value */}
              <div>
                <Label>Filter Value (Optional)</Label>
                <Input
                  placeholder="e.g., 'Yes', 'completed', 'Successful'"
                  value={newChart.filterValue || ''}
                  onChange={(e) => setNewChart(prev => ({ ...prev, filterValue: e.target.value }))}
                />
                <p className="text-xs text-gray-500 mt-1">
                  Leave empty to show multiple lines for all values
                </p>
              </div>

              {/* Chart Type */}
              <div>
                <Label>Chart Type</Label>
                <Select
                  value={newChart.chartType}
                  onValueChange={(value) => setNewChart(prev => ({ ...prev, chartType: value as any }))}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="line">Line Chart</SelectItem>
                    <SelectItem value="bar">Bar Chart (Stacked)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Actions */}
              <div className="flex justify-end gap-2 pt-4">
                <Button variant="outline" onClick={() => setShowBuilder(false)}>
                  Cancel
                </Button>
                <Button
                  onClick={addChart}
                  disabled={!newChart.field || !newChart.source}
                >
                  Add Chart
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/middleware.ts">
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';

// Define which routes are public (don't require authentication)
const isPublicRoute = createRouteMatcher([
  '/sign-in(.*)',
  '/sign-up(.*)',
  // '/api/webhooks(.*)', // if you have public API routes
  '/api(.*)'
  // Add other public routes here
]);

export default clerkMiddleware(async (auth, request) => {
  // If it's not a public route and user is not authenticated, redirect to sign-in
  if (!isPublicRoute(request)) {
    await auth.protect();
  }
});

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
};
</file>

<file path="eslint.config.mjs">
const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),

  {
    files: ["**/*.ts", "**/*.tsx"],
    rules: {
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-unused-vars": "off",
      "react/no-unescaped-entities": "off",
      "@next/next/no-page-custom-font": "off",
      "@typescript-eslint/no-empty-object-type": "off", // üëà Add this line
    },
  },
];
</file>

<file path="src/app/layout.tsx">
import { type Metadata } from 'next'
import {
  ClerkProvider,
  SignedIn,
  SignedOut,
} from '@clerk/nextjs'
import { Geist, Geist_Mono } from 'next/font/google'
import './globals.css'

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
})

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
})

export const metadata: Metadata = {
  title: 'Whispey - OSS LiveKit observability platform',
  description: 'An observability platform for all your agents built on LiveKit.',
}



export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <ClerkProvider
      signInUrl='/sign-in'
      appearance={{
        variables: {
          colorPrimary: "#2563eb", // Blue-600
        }
      }}
    >
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased bg-white text-gray-900`}
        >
          <main>
            <SignedOut>
              {/* This ensures auth pages don't show header */}
              <div className="min-h-screen">
                {children}
              </div>
            </SignedOut>
            <SignedIn>
              {children}
            </SignedIn>
          </main>
        </body>
      </html>
    </ClerkProvider>
  )
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions
.env
# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# clerk configuration (can include secrets)
/.clerk/


# Build artifacts
dist/
build/
*.egg-info/
__pycache__/
*.pyc

# Environment
venv/
.env
.env.local

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

deploy.sh
</file>

<file path="src/components/AudioPlayer.tsx">
"use client"

import type React from "react"
import { useState, useRef, useEffect, useMemo, useCallback } from "react"
import { Play, Pause, Loader2, AlertCircle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { cn } from "@/lib/utils"

interface AudioPlayerProps {
  s3Key: string
  callId: string
  className?: string
  url: string | null
}

const AudioPlayer: React.FC<AudioPlayerProps> = ({ s3Key, url,callId, className }) => {

  console.log(url)
  const [isPlaying, setIsPlaying] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [audioUrl, setAudioUrl] = useState<string | null>(null)
  const [currentTime, setCurrentTime] = useState(0)
  const [duration, setDuration] = useState(0)
  const [isReady, setIsReady] = useState(false)
  const [audioData, setAudioData] = useState<number[]>([])

  const audioRef = useRef<HTMLAudioElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const animationRef = useRef<number>(0)

  // Generate waveform data
  const waveformData = useMemo(() => {
    if (audioData.length > 0) return audioData

    const samples = 150
    const data = []

    for (let i = 0; i < samples; i++) {
      const position = i / samples
      const baseFreq = Math.sin(position * Math.PI * 4) * 0.3
      const noise = (Math.random() - 0.5) * 0.4
      const envelope = Math.sin(position * Math.PI) * 0.8
      const speechPattern = Math.sin(position * Math.PI * 12) * 0.6
      const pause = Math.random() > 0.85 ? 0.1 : 1

      let amplitude = (baseFreq + noise + speechPattern) * envelope * pause
      amplitude = Math.max(0.05, Math.min(0.95, Math.abs(amplitude)))
      data.push(amplitude)
    }
    return data
  }, [audioData])

  // Get presigned URL from API
  const getAudioUrl = useCallback(async () => {
    if (audioUrl) return audioUrl
  
    setIsLoading(true)
    setError(null)
  
    // First, try to use the direct URL if provided
    if (url) {
      try {
        // Test if the URL is accessible using our proxy API
        const testResponse = await fetch('/api/audio-proxy', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ url, method: 'HEAD' })
        })

        const result = await testResponse.json()
        console.log('Audio proxy response:', result)

        if (testResponse.ok && result.accessible) {
          // If it's a valid S3 presigned URL, use the original URL directly
          // Otherwise use the proxy URL for streaming
          if (result.isS3PresignedUrl) {
            console.log('Using S3 presigned URL directly to avoid CORS issues')
            setAudioUrl(url)
            setIsLoading(false)
            return url
          } else {
            const proxyUrl = `/api/audio-proxy?url=${encodeURIComponent(url)}`
            setAudioUrl(proxyUrl)
            setIsLoading(false)
            return proxyUrl
          }
        }
      } catch (err) {
        console.log('Proxy URL test failed, falling back to S3 key extraction')
      }
    }
  
    // If direct URL fails or is not provided, try S3 key extraction
    try {
      const response = await fetch("/api/audio", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ s3Key }),
      })
  
      if (!response.ok) throw new Error("Failed to get audio URL")
  
      const { url: s3Url } = await response.json()
      setAudioUrl(s3Url)
      return s3Url
    } catch (err) {
      setError("Failed to load audio")
      return null
    } finally {
      setIsLoading(false)
    }
  }, [audioUrl, url, s3Key])

  // Handle play/pause
  const togglePlay = useCallback(async () => {
    if (!audioRef.current) return

    if (isPlaying) {
      audioRef.current.pause()
      setIsPlaying(false)
    } else {
      const url = await getAudioUrl()
      if (url && audioRef.current) {
        if (audioRef.current.src !== url) {
          audioRef.current.src = url
        }
        try {
          await audioRef.current.play()
          setIsPlaying(true)
        } catch (err) {
          setError("Playback failed")
          setIsPlaying(false)
        }
      }
    }
  }, [isPlaying, getAudioUrl])

  // Draw waveform
  const drawWaveform = useCallback(() => {
    const canvas = canvasRef.current
    if (!canvas || !waveformData.length) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    const { width, height } = canvas
    const barWidth = width / waveformData.length
    const progress = duration > 0 ? currentTime / duration : 0

    // Clear canvas
    ctx.clearRect(0, 0, width, height)

    // Draw waveform
    waveformData.forEach((amplitude, index) => {
      const barHeight = amplitude * height * 0.8
      const x = index * barWidth
      const y = (height - barHeight) / 2

      const barProgress = index / waveformData.length
      const isPlayed = barProgress <= progress

      // Simple colors
      if (isPlayed) {
        ctx.fillStyle = "#10b981" // emerald-500
      } else {
        ctx.fillStyle = "#d1d5db" // gray-300
      }

      // Draw thin bars
      const barWidthActual = Math.max(1, barWidth * 0.6)
      ctx.fillRect(x, y, barWidthActual, barHeight)
    })

    // Draw progress line
    if (duration > 0 && isReady) {
      const progressX = progress * width
      ctx.strokeStyle = "#10b981"
      ctx.lineWidth = 2
      ctx.beginPath()
      ctx.moveTo(progressX, 0)
      ctx.lineTo(progressX, height)
      ctx.stroke()
    }

    if (isPlaying) {
      animationRef.current = requestAnimationFrame(drawWaveform)
    }
  }, [waveformData, currentTime, duration, isPlaying, isReady])

  // Audio event listeners
  useEffect(() => {
    const audio = audioRef.current
    if (!audio) return

    const handleTimeUpdate = () => setCurrentTime(audio.currentTime)
    const handleLoadedMetadata = () => {
      setDuration(audio.duration)
      setIsReady(true)
    }
    const handleEnded = () => setIsPlaying(false)
    const handleError = () => {
      setError("Playback failed")
      setIsPlaying(false)
    }
    const handleCanPlay = () => setIsReady(true)

    audio.addEventListener("timeupdate", handleTimeUpdate)
    audio.addEventListener("loadedmetadata", handleLoadedMetadata)
    audio.addEventListener("ended", handleEnded)
    audio.addEventListener("error", handleError)
    audio.addEventListener("canplay", handleCanPlay)

    return () => {
      audio.removeEventListener("timeupdate", handleTimeUpdate)
      audio.removeEventListener("loadedmetadata", handleLoadedMetadata)
      audio.removeEventListener("ended", handleEnded)
      audio.removeEventListener("error", handleError)
      audio.removeEventListener("canplay", handleCanPlay)
    }
  }, [])

  // Draw waveform effect
  useEffect(() => {
    drawWaveform()
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current)
      }
    }
  }, [drawWaveform])

  // Handle waveform click for seeking
  const handleWaveformClick = (e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!audioRef.current || !isReady || duration === 0) return

    const canvas = canvasRef.current
    if (!canvas) return

    const rect = canvas.getBoundingClientRect()
    const x = e.clientX - rect.left
    const progress = x / rect.width
    const newTime = progress * duration

    audioRef.current.currentTime = newTime
    setCurrentTime(newTime)
  }

  const formatTime = (time: number) => {
    if (!isFinite(time)) return "0:00"
    const minutes = Math.floor(time / 60)
    const seconds = Math.floor(time % 60)
    return `${minutes}:${seconds.toString().padStart(2, "0")}`
  }

  if (error) {
    return (
      <Card className={cn("p-3 border-destructive/20 bg-destructive/5", className)}>
        <div className="flex items-center gap-2">
          <AlertCircle className="w-4 h-4 text-destructive flex-shrink-0" />
          <span className="text-sm text-destructive">Audio unavailable</span>
        </div>
      </Card>
    )
  }

  return (
    <Card className={cn("p-4 bg-background border", className)}>
      <audio ref={audioRef} preload="metadata" />

      <div className="flex items-center gap-3">
        {/* Play Button */}
        <Button
          onClick={togglePlay}
          disabled={isLoading}
          size="sm"
          className="w-8 h-8 rounded-full p-0 flex-shrink-0"
          variant="default"
        >
          {isLoading ? (
            <Loader2 className="w-3 h-3 animate-spin" />
          ) : isPlaying ? (
            <Pause className="w-3 h-3" />
          ) : (
            <Play className="w-3 h-3 ml-0.5" />
          )}
        </Button>

        {/* Waveform */}
        <div className="flex-1 relative">
          <canvas
            ref={canvasRef}
            width={600}
            height={40}
            className="w-full h-10 cursor-pointer rounded"
            onClick={handleWaveformClick}
          />

          {isLoading && (
            <div className="absolute inset-0 flex items-center justify-center bg-background/80 rounded">
              <Loader2 className="w-4 h-4 animate-spin text-muted-foreground" />
            </div>
          )}
        </div>

        {/* Time Display */}
        <div className="text-xs text-muted-foreground font-mono flex-shrink-0 min-w-[35px]">
          {formatTime(currentTime)}
        </div>
      </div>
    </Card>
  )
}

export default AudioPlayer
</file>

<file path="src/app/page.tsx">
'use client'

import { useUser } from '@clerk/nextjs'
import ProjectSelection from '../components/projects/ProjectSelection'
import LoadingSpinner from '../components/shared/LoadingSpinner'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'

export default function Home() {
  const { isSignedIn, isLoaded } = useUser()
  const router = useRouter()

  useEffect(() => {
    if (isLoaded && !isSignedIn) {
      router.push('/sign') // This ensures your custom page is used
    }
  }, [isLoaded, isSignedIn, router])

  if (!isLoaded) return <LoadingSpinner />
  if (!isSignedIn) return <LoadingSpinner />

  return <ProjectSelection />
}
</file>

<file path="src/components/Dashboard.tsx">
'use client'
import React, { useEffect, useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Calendar } from '@/components/ui/calendar'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'
import { 
  ChevronLeft,
  BarChart3, 
  List,
  Loader2,
  AlertCircle,
  Database,
  Bot,
  Settings,
  Copy,
  Home,
  Circle,
  CalendarDays
} from 'lucide-react'
import Overview from './Overview'
import CallLogs from './calls/CallLogs'
import CampaignLogs from './campaigns/CampaignLogs'
import Header from '@/components/shared/Header'

import { useSupabaseQuery } from '../hooks/useSupabase'
import FieldExtractorDialog from './FieldExtractorLogs'
import { supabase } from '../lib/supabase'

interface DashboardProps {
  agentId: string
}

interface DateRange {
  from: Date | undefined
  to?: Date | undefined
}

const ENHANCED_PROJECT_ID = '371c4bbb-76db-4c61-9926-bd75726a1cda'

// Date utility functions
const subDays = (date: Date, days: number) => {
  const result = new Date(date)
  result.setDate(result.getDate() - days)
  return result
}

const formatDateISO = (date: Date) => {
  return date.toISOString().split('T')[0]
}

const formatDateDisplay = (date: Date) => {
  return date.toLocaleDateString('en-US', { 
    month: 'short', 
    day: 'numeric',
    year: 'numeric'
  })
}

const Dashboard: React.FC<DashboardProps> = ({ agentId }) => {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [copiedId, setCopiedId] = useState(false)
  
  // Date filter state
  const [quickFilter, setQuickFilter] = useState('7d')
  const [dateRange, setDateRange] = useState<DateRange>({
    from: subDays(new Date(), 7),
    to: new Date()
  })
  const [isCustomRange, setIsCustomRange] = useState(false)
  
  const activeTab = searchParams.get('tab') || 'overview'
  const shouldFetch = agentId && agentId !== 'undefined' && agentId.trim() !== ''

  const quickFilters = [
    { id: '1d', label: '1D', days: 1 },
    { id: '7d', label: '7D', days: 7 },
    { id: '30d', label: '30D', days: 30 }
  ]

  // Date range for API calls
  const apiDateRange = React.useMemo(() => {
    if (isCustomRange && dateRange.from && dateRange.to) {
      return {
        from: formatDateISO(dateRange.from),
        to: formatDateISO(dateRange.to)
      }
    }
    
    const days = quickFilters.find(f => f.id === quickFilter)?.days || 7
    const endDate = new Date()
    const startDate = subDays(endDate, days)
    return {
      from: formatDateISO(startDate),
      to: formatDateISO(endDate)
    }
  }, [quickFilter, dateRange, isCustomRange])

  const handleQuickFilter = (filterId: string) => {
    setQuickFilter(filterId)
    setIsCustomRange(false)
    
    const days = quickFilters.find(f => f.id === filterId)?.days || 7
    const endDate = new Date()
    const startDate = subDays(endDate, days)
    setDateRange({ from: startDate, to: endDate })
  }

  const handleDateRangeSelect = (range: DateRange | undefined) => {
    if (range?.from && range?.to) {
      setDateRange(range)
      setIsCustomRange(true)
      setQuickFilter('')
    }
  }

  const { data: agents, loading: agentLoading, error: agentError, refetch: refetchAgent } = useSupabaseQuery('pype_voice_agents', {
    select: 'id, name, agent_type, configuration, environment, created_at, is_active, project_id,field_extractor_prompt,field_extractor',
    filters: shouldFetch ? [{ column: 'id', operator: 'eq', value: agentId }] : []
  })

  const agent = shouldFetch ? agents?.[0] : null

  const { data: projects, loading: projectLoading, error: projectError } = useSupabaseQuery('pype_voice_projects', {
    select: 'id, name, description, environment, created_at, is_active',
    filters: (shouldFetch && agent?.project_id) ? [{ column: 'id', operator: 'eq', value: agent.project_id }] : []
  })

  const project = (shouldFetch && agent?.project_id) ? projects?.[0] : null

  const handleBack = () => {
    if (agent?.project_id) {
      router.push(`/${agent.project_id}/agents`)
    } else {
      router.push('/')
    }
  }

  const handleTabChange = (tab: string) => {
    const current = new URLSearchParams(Array.from(searchParams.entries()))
    current.set('tab', tab)
    const search = current.toString()
    const query = search ? `?${search}` : ""
    router.push(`/agents/${agentId}${query}`)
  }

  const handleCopyAgentId = async () => {
    try {
      await navigator.clipboard.writeText(agentId)
      setCopiedId(true)
      setTimeout(() => setCopiedId(false), 2000)
    } catch (err) {
      console.error('Failed to copy agent ID:', err)
    }
  }

  const getEnvironmentColor = (environment: string) => {
    switch (environment.toLowerCase()) {
      case 'production':
      case 'prod':
        return 'bg-red-50 text-red-600 border-red-200'
      case 'staging':
      case 'stage':
        return 'bg-yellow-50 text-yellow-600 border-yellow-200'
      case 'development':
      case 'dev':
        return 'bg-blue-50 text-blue-600 border-blue-200'
      default:
        return 'bg-gray-50 text-gray-600 border-gray-200'
    }
  }

  const getAgentTypeColor = (type: string) => {
    switch (type.toLowerCase()) {
      case 'inbound':
        return 'bg-blue-50 text-blue-600 border-blue-200'
      case 'outbound':
        return 'bg-emerald-50 text-emerald-600 border-emerald-200'
      case 'custom':
        return 'bg-purple-50 text-purple-600 border-purple-200'
      default:
        return 'bg-gray-50 text-gray-600 border-gray-200'
    }
  }

  useEffect(() => {
    if (!searchParams.get('tab')) {
      handleTabChange('overview')
    }
  }, [searchParams])

  const isEnhancedProject = agent?.project_id === ENHANCED_PROJECT_ID

  const tabs = [
    { id: 'overview', label: 'Overview', icon: BarChart3 },
    { id: 'logs', label: 'Call Logs', icon: List },
    ...(isEnhancedProject ? [{ id: 'campaign-logs', label: 'Campaign Logs', icon: Database }] : [])
  ]

  if (!shouldFetch) {
    return (
      <div className="h-screen flex flex-col bg-gray-50">
        <Header />
        <div className="flex-1 flex items-center justify-center">
          <div className="bg-white rounded-lg border border-gray-200 p-6 max-w-md">
            <AlertCircle className="w-8 h-8 text-red-500 mx-auto mb-3" />
            <h2 className="font-medium text-gray-900 mb-2 text-center">Invalid Agent ID</h2>
            <p className="text-gray-600 text-sm mb-4 text-center">
              Agent ID missing or invalid: "{agentId}"
            </p>
            <Button onClick={() => router.push('/')} className="w-full" size="sm">
              <Home className="h-3.5 w-3.5 mr-1.5" />
              Back to Workspaces
            </Button>
          </div>
        </div>
      </div>
    )
  }

  if (agentLoading || (shouldFetch && projectLoading)) {
    return (
      <div className="h-screen flex flex-col bg-gray-50">
        <Header />
        
        {/* Single loading header - no duplicates */}
        <div className="border-b border-gray-200 bg-white px-6 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-6 h-6 bg-gray-200 rounded animate-pulse"></div>
              <div className="w-32 h-4 bg-gray-200 rounded animate-pulse"></div>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-20 h-6 bg-gray-200 rounded animate-pulse"></div>
              <div className="w-16 h-6 bg-gray-200 rounded animate-pulse"></div>
            </div>
          </div>
        </div>

        <div className="flex-1 p-6 space-y-4">
          <div className="bg-white rounded border border-gray-200 p-4">
            <div className="w-24 h-4 bg-gray-200 rounded animate-pulse mb-3"></div>
            <div className="grid grid-cols-4 gap-4">
              {[1, 2, 3, 4].map((i) => (
                <div key={i} className="bg-gray-50 rounded p-3">
                  <div className="w-16 h-3 bg-gray-200 rounded animate-pulse mb-2"></div>
                  <div className="w-12 h-5 bg-gray-200 rounded animate-pulse"></div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="fixed bottom-4 right-4">
          <div className="bg-white rounded shadow-lg border px-3 py-2 flex items-center gap-2">
            <Loader2 className="w-3.5 h-3.5 animate-spin text-blue-600" />
            <span className="text-xs text-gray-600">Loading...</span>
          </div>
        </div>
      </div>
    )
  }

  if (agentError || projectError || !agent) {
    return (
      <div className="h-screen flex flex-col bg-gray-50">
        <Header />
        <div className="flex-1 flex items-center justify-center">
          <div className="bg-white rounded-lg border border-gray-200 p-6 max-w-md">
            <AlertCircle className="w-8 h-8 text-red-500 mx-auto mb-3" />
            <h2 className="font-medium text-gray-900 mb-2 text-center">Agent not found</h2>
            <p className="text-gray-600 text-sm mb-4 text-center">
              {agentError || projectError || 'Agent not found'}
            </p>
            <Button onClick={handleBack} variant="outline" className="w-full" size="sm">
              <ChevronLeft className="h-3.5 w-3.5 mr-1.5" />
              Go Back
            </Button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="h-screen flex flex-col bg-gray-50">
      {/* Replace the duplicate Whispey header with existing Header component */}
      <Header />

      {/* Consolidated Professional Header - All-in-One */}
      <div className="bg-white border-b border-gray-200 px-6 py-3 flex-shrink-0">
        <div className="flex items-center justify-between">
          {/* Left: Agent Context */}
          <div className="flex items-center gap-4 min-w-0 flex-1">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={handleBack}
              className="text-gray-500 hover:text-gray-700 h-8 w-8 p-0 flex-shrink-0"
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            
            {/* Breadcrumb + Agent Info */}
            <div className="flex items-center gap-3 min-w-0">
              <div className="flex items-center gap-1.5 text-sm text-gray-500">
                {project?.name && (
                  <>
                    <span className="font-medium">{project.name}</span>
                    <span>/</span>
                  </>
                )}
                <span className="text-gray-400">Agents</span>
                <span>/</span>
              </div>
              
              <div className="flex items-center gap-2 min-w-0">
                <div className="w-6 h-6 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-md flex items-center justify-center flex-shrink-0">
                  <Bot className="w-3.5 h-3.5 text-white" />
                </div>
                <h2 className="font-semibold text-gray-900 text-base truncate">{agent.name}</h2>
                <Circle className={`w-2 h-2 fill-current flex-shrink-0 ${agent.is_active ? 'text-emerald-500' : 'text-gray-300'}`} />
                
                <div className="flex items-center gap-1.5 ml-2">
                  <Badge variant="secondary" className={`text-xs h-5 ${getAgentTypeColor(agent.agent_type)}`}>
                    {agent.agent_type}
                  </Badge>
                  <Badge variant="secondary" className={`text-xs h-5 ${getEnvironmentColor(agent.environment)}`}>
                    {agent.environment}
                  </Badge>
                </div>
              </div>
            </div>
          </div>

          {/* Center: Main Navigation Tabs */}
          <div className="flex items-center mx-8">
            <nav className="flex items-center bg-gray-50 rounded-lg p-1">
              {tabs.map((tab) => {
                const Icon = tab.icon
                const isActive = activeTab === tab.id
                return (
                  <button
                    key={tab.id}
                    onClick={() => handleTabChange(tab.id)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-semibold transition-all duration-200 ${
                      isActive
                        ? 'bg-white text-blue-600 shadow-sm'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <Icon className="w-4 h-4" />
                    {tab.label}
                  </button>
                )
              })}
            </nav>
          </div>

          {/* Right: Filters + Actions */}
          <div className="flex items-center gap-4 flex-shrink-0">
            {/* Compact Period Filters */}
            <div className="flex items-center gap-2">
              <span className="text-xs text-gray-500 font-medium">Period:</span>
              <div className="flex items-center bg-gray-100 rounded-md p-0.5">
                {quickFilters.map((filter) => (
                  <Button
                    key={filter.id}
                    variant="ghost"
                    size="sm"
                    onClick={() => handleQuickFilter(filter.id)}
                    className={`h-6 px-2.5 text-xs font-medium rounded-sm transition-all ${
                      quickFilter === filter.id && !isCustomRange
                        ? 'bg-white shadow-sm text-gray-900'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    {filter.label}
                  </Button>
                ))}
              </div>
              
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    className={`h-6 px-2.5 text-xs border-gray-300 transition-all ${
                      isCustomRange ? 'bg-gray-900 text-white border-gray-900' : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <CalendarDays className="mr-1 h-3 w-3" />
                    Custom
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="end">
                  <Calendar
                    initialFocus
                    mode="range"
                    defaultMonth={dateRange?.from}
                    selected={dateRange}
                    onSelect={handleDateRangeSelect}
                    numberOfMonths={2}
                  />
                </PopoverContent>
              </Popover>
            </div>

            {/* Agent ID + Copy */}
            <div className="flex items-center gap-1.5 px-2 py-1 bg-gray-50 rounded border">
              <code className="text-xs font-mono text-gray-600">
                {agentId.slice(0, 8)}
              </code>
              <Button
                size="sm"
                variant="ghost"
                onClick={handleCopyAgentId}
                className="h-4 w-4 p-0 text-gray-500 hover:text-gray-700"
              >
                <Copy className="w-3 h-3" />
              </Button>
              {copiedId && <span className="text-xs text-emerald-600">‚úì</span>}
            </div>

            {/* Action Buttons */}
            <div className="flex items-center gap-2">
              <FieldExtractorDialog
                initialData={JSON.parse(agent?.field_extractor_prompt || '[]')}
                isEnabled={!!agent?.field_extractor}
                onSave={async (data, enabled) => {
                  const { error } = await supabase
                    .from('pype_voice_agents')
                    .update({ field_extractor_prompt: JSON.stringify(data), field_extractor: enabled })
                    .eq('id', agent.id)
                  if (!error) {
                    alert('Saved field extractor config.')
                    refetchAgent()
                  } else {
                    alert('Error saving config: ' + error.message)
                  }
                }}
              />
              <Button variant="outline" size="sm" className="text-gray-600 h-7 px-3 text-xs">
                <Settings className="w-3.5 h-3.5 mr-1.5" />
                Settings
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Maximum Content Area */}
      <div className="flex-1 overflow-hidden">
        {activeTab === 'overview' && (
          <Overview project={project} agent={agent} />
        )}
        {activeTab === 'logs' && (
          <CallLogs project={project} agent={agent} onBack={handleBack} />
        )}
        {activeTab === 'campaign-logs' && isEnhancedProject && (
          <CampaignLogs project={project} agent={agent} onBack={handleBack} />
        )}
      </div>
    </div>
  )
}

export default Dashboard
</file>

<file path="src/components/Overview.tsx">
'use client'
import React, { useState, useMemo } from 'react'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Calendar } from '@/components/ui/calendar'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'
import { Tooltip } from 'recharts'
import { EnhancedChartBuilder } from './EnhancedChartBuilder'

import { 
  Phone, 
  Clock, 
  CheckCircle, 
  TrendingUp, 
  Loader2,
  AlertCircle,
  Users,
  CalendarDays,
  DollarSign,
  Zap,
  XCircle,
  TrendingDown,
  BarChart3,
  Activity,
  Target
} from 'lucide-react'
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  ResponsiveContainer, 
  BarChart, 
  Bar, 
  CartesianGrid,
  PieChart,
  Pie,
  Cell
} from 'recharts'
import { useOverviewQuery } from '../hooks/useOverviewQuery'
import AgentCustomLogsView from './calls/AgentCustomLogsView'

const subDays = (date: Date, days: number) => {
  const result = new Date(date)
  result.setDate(result.getDate() - days)
  return result
}

const formatDateISO = (date: Date) => {
  return date.toISOString().split('T')[0]
}

const formatDateDisplay = (date: Date) => {
  return date.toLocaleDateString('en-US', { 
    month: 'short', 
    day: 'numeric',
    year: 'numeric'
  })
}

interface OverviewProps {
  project: any
  agent: any
}

interface DateRange {
  from: Date | undefined
  to?: Date | undefined
}

const Overview: React.FC<OverviewProps> = ({ project, agent }) => {
  const [quickFilter, setQuickFilter] = useState('7d')
  const [dateRange, setDateRange] = useState<DateRange>({
    from: subDays(new Date(), 7),
    to: new Date()
  })
  const [isCustomRange, setIsCustomRange] = useState(false)

  const quickFilters = [
    { id: '1d', label: '1D', days: 1 },
    { id: '7d', label: '7D', days: 7 },
    { id: '30d', label: '30D', days: 30 }
  ]

  const apiDateRange = useMemo(() => {
    if (isCustomRange && dateRange.from && dateRange.to) {
      return {
        from: formatDateISO(dateRange.from),
        to: formatDateISO(dateRange.to)
      }
    }
    
    const days = quickFilters.find(f => f.id === quickFilter)?.days || 7
    const endDate = new Date()
    const startDate = subDays(endDate, days)
    return {
      from: formatDateISO(startDate),
      to: formatDateISO(endDate)
    }
  }, [quickFilter, dateRange, isCustomRange])

  const handleQuickFilter = (filterId: string) => {
    setQuickFilter(filterId)
    setIsCustomRange(false)
    
    const days = quickFilters.find(f => f.id === filterId)?.days || 7
    const endDate = new Date()
    const startDate = subDays(endDate, days)
    setDateRange({ from: startDate, to: endDate })
  }

  const handleDateRangeSelect = (range: DateRange | undefined) => {
    if (range?.from && range?.to) {
      setDateRange(range)
      setIsCustomRange(true)
      setQuickFilter('')
    }
  }

  const { data: analytics, loading, error } = useOverviewQuery({
    agentId: agent.id,
    dateFrom: apiDateRange.from,
    dateTo: apiDateRange.to
  })

  // Prepare chart data
  const successFailureData = analytics ? [
    { name: 'Success', value: analytics.successfulCalls, color: '#10b981' },
    { name: 'Failed', value: analytics.totalCalls - analytics.successfulCalls, color: '#ef4444' }
  ] : []

  if (loading) {
    return (
      <div className="h-full bg-slate-50 flex items-center justify-center">
        <div className="text-center space-y-3">
          <Loader2 className="w-6 h-6 animate-spin text-slate-600 mx-auto" />
          <p className="text-sm text-slate-600 font-medium">Loading analytics...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="h-full bg-slate-50 flex items-center justify-center p-4">
        <div className="text-center space-y-4 max-w-md">
          <AlertCircle className="w-8 h-8 text-red-500 mx-auto" />
          <div>
            <h3 className="text-base font-semibold text-slate-900 mb-2">Unable to load analytics</h3>
            <p className="text-sm text-slate-600">{error}</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="h-full flex flex-col bg-slate-50">
      {/* Enhanced Time Controls - Moved to Right Side */}
      <div className="bg-white border-b border-slate-200 px-6 py-4 flex-shrink-0">
        <div className="flex items-center justify-end">
          <div className="flex items-center gap-3">
            <span className="text-sm text-slate-600 font-medium">Period:</span>
            
            <div className="flex items-center bg-slate-100 rounded-md p-0.5">
              {quickFilters.map((filter) => (
                <Button
                  key={filter.id}
                  variant="ghost"
                  size="sm"
                  onClick={() => handleQuickFilter(filter.id)}
                  className={`h-7 px-3 text-xs font-medium rounded-sm transition-all ${
                    quickFilter === filter.id && !isCustomRange
                      ? 'bg-white shadow-sm text-slate-900'
                      : 'text-slate-600 hover:text-slate-900'
                  }`}
                >
                  {filter.label}
                </Button>
              ))}
            </div>

            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  size="sm"
                  className={`h-7 px-3 text-xs border-slate-300 transition-all ${
                    isCustomRange ? 'bg-slate-900 text-white border-slate-900' : 'text-slate-600 hover:text-slate-900'
                  }`}
                >
                  <CalendarDays className="mr-1.5 h-3 w-3" />
                  {dateRange?.from && dateRange?.to ? (
                    `${formatDateDisplay(dateRange.from)} - ${formatDateDisplay(dateRange.to)}`
                  ) : (
                    'Custom Range'
                  )}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="end">
                <Calendar
                  initialFocus
                  mode="range"
                  defaultMonth={dateRange?.from}
                  selected={dateRange}
                  onSelect={handleDateRangeSelect}
                  numberOfMonths={2}
                />
              </PopoverContent>
            </Popover>

            <div className="text-xs text-slate-500 font-mono bg-slate-50 px-2 py-1 rounded ml-2">
              {apiDateRange.from} ‚Äî {apiDateRange.to}
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Content */}
      <div className="flex-1 overflow-auto">
        {analytics ? (
          <div className="p-6 space-y-8">
            {/* Enhanced Metrics Grid - 6 columns for better distribution */}
            <div className="grid grid-cols-6 gap-6">
              <div className="bg-white border border-slate-200 rounded-xl p-5 shadow-sm hover:shadow-md transition-shadow">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-10 h-10 bg-blue-50 rounded-xl flex items-center justify-center">
                    <Phone className="w-5 h-5 text-blue-600" />
                  </div>
                  <div>
                    <div className="text-sm font-medium text-slate-600">Total Calls</div>
                    <div className="text-2xl font-bold text-slate-900">{analytics.totalCalls}</div>
                  </div>
                </div>
              </div>

              <div className="bg-white border border-slate-200 rounded-xl p-5 shadow-sm hover:shadow-md transition-shadow">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-10 h-10 bg-emerald-50 rounded-xl flex items-center justify-center">
                    <Clock className="w-5 h-5 text-emerald-600" />
                  </div>
                  <div>
                    <div className="text-sm font-medium text-slate-600">Minutes</div>
                    <div className="text-2xl font-bold text-slate-900">{analytics.totalMinutes}</div>
                  </div>
                </div>
              </div>

              <div className="bg-white border border-slate-200 rounded-xl p-5 shadow-sm hover:shadow-md transition-shadow">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-10 h-10 bg-amber-50 rounded-xl flex items-center justify-center">
                    <DollarSign className="w-5 h-5 text-amber-600" />
                  </div>
                  <div>
                    <div className="text-sm font-medium text-slate-600">Cost</div>
                    <div className="text-2xl font-bold text-slate-900">‚Çπ{analytics.totalCost?.toFixed(2)}</div>
                  </div>
                </div>
              </div>

              <div className="bg-white border border-slate-200 rounded-xl p-5 shadow-sm hover:shadow-md transition-shadow">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-10 h-10 bg-purple-50 rounded-xl flex items-center justify-center">
                    <Zap className="w-5 h-5 text-purple-600" />
                  </div>
                  <div>
                    <div className="text-sm font-medium text-slate-600">Latency</div>
                    <div className="text-2xl font-bold text-slate-900">{analytics.averageLatency.toFixed(2)}s</div>
                  </div>
                </div>
              </div>

              <div className="bg-white border border-slate-200 rounded-xl p-5 shadow-sm hover:shadow-md transition-shadow">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-10 h-10 bg-emerald-50 rounded-xl flex items-center justify-center">
                    <CheckCircle className="w-5 h-5 text-emerald-600" />
                  </div>
                  <div>
                    <div className="text-sm font-medium text-slate-600">Success</div>
                    <div className="text-2xl font-bold text-emerald-600">{analytics.successfulCalls}</div>
                  </div>
                </div>
              </div>

              <div className="bg-white border border-slate-200 rounded-xl p-5 shadow-sm hover:shadow-md transition-shadow">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-10 h-10 bg-red-50 rounded-xl flex items-center justify-center">
                    <XCircle className="w-5 h-5 text-red-600" />
                  </div>
                  <div>
                    <div className="text-sm font-medium text-slate-600">Failed</div>
                    <div className="text-2xl font-bold text-red-600">{analytics.totalCalls - analytics.successfulCalls}</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Professional Chart Grid - 2x2 Layout */}
            <div className="grid grid-cols-2 gap-8">
              {/* Daily Calls Chart */}
              <div className="bg-white border border-slate-200 rounded-xl shadow-sm hover:shadow-md transition-shadow">
                <div className="border-b border-slate-100 px-6 py-5">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold text-slate-900">Daily Calls</h3>
                      <p className="text-sm text-slate-500 mt-1">Call volume trend over time</p>
                    </div>
                  </div>
                </div>
                <div className="p-6">
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={analytics.dailyData} margin={{ top: 20, right: 30, left: 40, bottom: 60 }}>
                        <CartesianGrid strokeDasharray="3 3" stroke="#f1f5f9" />
                        <XAxis 
                          dataKey="date" 
                          axisLine={false}
                          tickLine={false}
                          tick={{ fontSize: 12, fill: '#64748b' }}
                          height={50}
                          tickFormatter={(value) => {
                            const date = new Date(value)
                            return `${date.getMonth() + 1}/${date.getDate()}`
                          }}
                        />
                        <YAxis 
                          axisLine={false}
                          tickLine={false}
                          tick={{ fontSize: 12, fill: '#64748b' }}
                          width={60}
                          tickFormatter={(value) => value.toString()}
                        />
                        <Tooltip 
                          contentStyle={{
                            backgroundColor: 'white',
                            border: '1px solid #e2e8f0',
                            borderRadius: '12px',
                            fontSize: '14px',
                            boxShadow: '0 10px 15px -3px rgb(0 0 0 / 0.1)'
                          }}
                          labelFormatter={(value) => {
                            const date = new Date(value)
                            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })
                          }}
                          formatter={(value) => [`${value}`, 'Calls']}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="calls" 
                          stroke="#3b82f6" 
                          strokeWidth={3}
                          dot={{ r: 5, fill: '#3b82f6', strokeWidth: 3, stroke: '#ffffff' }}
                          activeDot={{ r: 7, fill: '#3b82f6', strokeWidth: 0 }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>

              {/* Daily Minutes Chart */}
              <div className="bg-white border border-slate-200 rounded-xl shadow-sm hover:shadow-md transition-shadow">
                <div className="border-b border-slate-100 px-6 py-5">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold text-slate-900">Daily Minutes</h3>
                      <p className="text-sm text-slate-500 mt-1">Usage minutes distribution</p>
                    </div>
                    <div className="flex items-center gap-2">
                      <BarChart3 className="w-5 h-5 text-blue-600" />
                      <span className="text-sm font-medium text-blue-600">Avg: {Math.round(analytics.totalMinutes / analytics.totalCalls)}m</span>
                    </div>
                  </div>
                </div>
                <div className="p-6">
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={analytics.dailyData} margin={{ top: 20, right: 30, left: 40, bottom: 60 }}>
                        <CartesianGrid strokeDasharray="3 3" stroke="#f1f5f9" />
                        <XAxis 
                          dataKey="date" 
                          axisLine={false}
                          tickLine={false}
                          tick={{ fontSize: 12, fill: '#64748b' }}
                          height={50}
                          tickFormatter={(value) => {
                            const date = new Date(value)
                            return `${date.getMonth() + 1}/${date.getDate()}`
                          }}
                        />
                        <YAxis 
                          axisLine={false}
                          tickLine={false}
                          tick={{ fontSize: 12, fill: '#64748b' }}
                          width={60}
                          tickFormatter={(value) => `${value}m`}
                        />
                        <Tooltip 
                          contentStyle={{
                            backgroundColor: 'white',
                            border: '1px solid #e2e8f0',
                            borderRadius: '12px',
                            fontSize: '14px',
                            boxShadow: '0 10px 15px -3px rgb(0 0 0 / 0.1)'
                          }}
                          formatter={(value) => [`${value} minutes`, 'Duration']}
                          labelFormatter={(value) => {
                            const date = new Date(value)
                            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })
                          }}
                        />
                        <Bar 
                          dataKey="minutes" 
                          fill="#3b82f6"
                          radius={[6, 6, 0, 0]}
                        />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>

              {/* Average Latency Chart */}
              <div className="bg-white border border-slate-200 rounded-xl shadow-sm hover:shadow-md transition-shadow">
                <div className="border-b border-slate-100 px-6 py-5">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold text-slate-900">Average Latency</h3>
                      <p className="text-sm text-slate-500 mt-1">Response time performance</p>
                    </div>
                    <div className="flex items-center gap-2">
                      <Activity className="w-5 h-5 text-emerald-600" />
                      <span className="text-sm font-medium text-emerald-600">{analytics.averageLatency.toFixed(2)}s avg</span>
                    </div>
                  </div>
                </div>
                <div className="p-6">
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={analytics.dailyData} margin={{ top: 20, right: 30, left: 40, bottom: 60 }}>
                        <CartesianGrid strokeDasharray="3 3" stroke="#f1f5f9" />
                        <XAxis 
                          dataKey="date" 
                          axisLine={false}
                          tickLine={false}
                          tick={{ fontSize: 12, fill: '#64748b' }}
                          height={50}
                          tickFormatter={(value) => {
                            const date = new Date(value)
                            return `${date.getMonth() + 1}/${date.getDate()}`
                          }}
                        />
                        <YAxis 
                          axisLine={false}
                          tickLine={false}
                          tick={{ fontSize: 12, fill: '#64748b' }}
                          width={60}
                          tickFormatter={(value) => `${value}s`}
                        />
                        <Tooltip 
                          contentStyle={{
                            backgroundColor: 'white',
                            border: '1px solid #e2e8f0',
                            borderRadius: '12px',
                            fontSize: '14px',
                            boxShadow: '0 10px 15px -3px rgb(0 0 0 / 0.1)'
                          }}
                          formatter={(value) => [`${value}s`, 'Latency']}
                          labelFormatter={(value) => {
                            const date = new Date(value)
                            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })
                          }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="avg_latency" 
                          stroke="#10b981" 
                          strokeWidth={3}
                          dot={{ r: 5, fill: '#10b981', strokeWidth: 3, stroke: '#ffffff' }}
                          activeDot={{ r: 7, fill: '#10b981', strokeWidth: 0 }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>

              {/* Success vs Failed Chart */}
              <div className="bg-white border border-slate-200 rounded-xl shadow-sm hover:shadow-md transition-shadow">
                <div className="border-b border-slate-100 px-6 py-5">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold text-slate-900">Success Rate</h3>
                      <p className="text-sm text-slate-500 mt-1">Call completion analysis</p>
                    </div>
                    <div className="flex items-center gap-2">
                      <Target className="w-5 h-5 text-emerald-600" />
                      <span className="text-sm font-medium text-emerald-600">
                        {analytics.totalCalls > 0 ? ((analytics.successfulCalls / analytics.totalCalls) * 100).toFixed(1) : 0}%
                      </span>
                    </div>
                  </div>
                </div>
                <div className="p-6">
                  <div className="h-64 flex items-center justify-center">
                    <div className="w-48 h-48">
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={successFailureData}
                            cx="50%"
                            cy="50%"
                            innerRadius={40}
                            outerRadius={80}
                            paddingAngle={5}
                            dataKey="value"
                          >
                            {successFailureData.map((entry, index) => (
                              <Cell key={`cell-${index}`} fill={entry.color} />
                            ))}
                          </Pie>
                          <Tooltip 
                            contentStyle={{
                              backgroundColor: 'white',
                              border: '1px solid #e2e8f0',
                              borderRadius: '12px',
                              fontSize: '14px',
                              boxShadow: '0 10px 15px -3px rgb(0 0 0 / 0.1)'
                            }}
                            formatter={(value, name) => [`${value} calls`, name]}
                          />
                        </PieChart>
                      </ResponsiveContainer>
                    </div>
                    <div className="ml-8 space-y-3">
                      <div className="flex items-center gap-3">
                        <div className="w-4 h-4 bg-emerald-500 rounded-full"></div>
                        <span className="text-sm font-medium text-slate-700">Success</span>
                        <span className="text-sm font-bold text-slate-900">{analytics.successfulCalls}</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <div className="w-4 h-4 bg-red-500 rounded-full"></div>
                        <span className="text-sm font-medium text-slate-700">Failed</span>
                        <span className="text-sm font-bold text-slate-900">{analytics.totalCalls - analytics.successfulCalls}</span>
                      </div>
                      <div className="pt-2 border-t border-slate-100">
                        <div className="text-xs text-slate-500">Total Calls</div>
                        <div className="text-lg font-bold text-slate-900">{analytics.totalCalls}</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Enhanced Additional Components */}
            <div className="space-y-8">
              <AgentCustomLogsView
                agentId={agent.id}
                dateRange={apiDateRange}
              />

              <EnhancedChartBuilder 
                agentId={agent.id}
                dateFrom={apiDateRange.from}
                dateTo={apiDateRange.to}
              />
            </div>
          </div>
        ) : (
          <div className="h-full flex items-center justify-center p-6">
            <div className="text-center space-y-4">
              <CalendarDays className="w-16 h-16 text-slate-300 mx-auto" />
              <div>
                <h3 className="text-xl font-semibold text-slate-900 mb-2">No data available</h3>
                <p className="text-base text-slate-600">No calls found for the selected period.</p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default Overview
</file>

<file path="package.json">
{
  "name": "pype_voice_analytics_dashboard",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@aws-sdk/client-dynamodb": "^3.848.0",
    "@aws-sdk/lib-dynamodb": "^3.850.0",
    "@clerk/nextjs": "^6.27.1",
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/modifiers": "^9.0.0",
    "@dnd-kit/sortable": "^10.0.0",
    "@heroicons/react": "^2.2.0",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/auth-helpers-react": "^0.5.0",
    "@supabase/auth-ui-react": "^0.4.7",
    "@supabase/auth-ui-shared": "^0.1.8",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.51.0",
    "aws-sdk": "^2.1692.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.525.0",
    "next": "15.4.1",
    "papaparse": "^5.5.3",
    "react": "19.1.0",
    "react-day-picker": "^9.8.1",
    "react-dom": "19.1.0",
    "react-icons": "^5.5.0",
    "recharts": "^3.1.0",
    "svix": "^1.69.0",
    "tailwind-merge": "^3.3.1",
    "vaul": "^1.1.2",
    "zod": "^4.0.15"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/node": "^20",
    "@types/papaparse": "^5.3.16",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.4.1",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.5",
    "typescript": "^5"
  }
}
</file>

<file path="README.md">
# Whispey ‚Äì Voice AI Observability Platform

<div align="center">

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python](https://img.shields.io/badge/python-v3.8+-blue.svg)](https://www.python.org/downloads/)
[![PyPI version](https://badge.fury.io/py/whispey.svg)](https://badge.fury.io/py/whispey)
[![Documentation](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://pype-voice-analytics-dashboard.vercel.app/docs)
[![Contributors](https://img.shields.io/github/contributors/obsera-ai/obsera)](https://github.com/PYPE-AI-MAIN/whispey/graphs/contributors)
[![Stars](https://img.shields.io/github/stars/obsera-ai/obsera)](https://github.com/PYPE-AI-MAIN/whispey/stargazers)

**Professional voice analytics and observability for AI agents. Monitor, analyze, and improve your voice AI applications with beautiful dashboards and actionable insights.**

[üöÄ Get Started](#quick-start) ‚Ä¢ [üìä Live Demo](https://pype-voice-analytics-dashboard.vercel.app) ‚Ä¢ [üìñ Documentation](https://pype-voice-analytics-dashboard.vercel.app/docs) ‚Ä¢ [‚≠ê Star on GitHub](https://github.com/PYPE-AI-MAIN/whispey)

</div>

<div align="center">
<img src="public/whispey.png" alt="Whispey Dashboard" width="400" height="400" />
</div>

## ‚ú® Features

- **üîç Real-time Monitoring** - Track every voice interaction with comprehensive analytics
- **üí∞ Cost Tracking** - Monitor STT, TTS, and LLM costs across all providers
- **‚ö° Performance Metrics** - Analyze latency, response times, and quality scores
- **üéØ Multi-Project Support** - Organize and compare multiple voice AI applications
- **üìà Beautiful Dashboards** - Intuitive visualizations with customizable views
- **üîí Privacy-First** - Self-host option with complete data control
- **üì§ Data Export** - Export analytics to CSV for further analysis
- **üîß Easy Integration** - One-line SDK integration with LiveKit agents
- **üåê Open Source** - Full transparency and community-driven development

## üöÄ Quick Start

### Cloud Platform (Recommended)

Get started in under 2 minutes with our hosted platform:

#### 1. Get Your Credentials

1. **Sign up** at [Whispey Voice Analytics Dashboard](https://whispey.pypeai.com/)
2. **Get your Agent ID** from the dashboard
3. **Generate your API Key** from your account settings

#### 2. Environment Setup

Create a `.env` file in your project root:

```env
# Whispey Voice Analytics
WHISPEY_API_KEY=your_whispey_api_key_here
```

#### 3. Install and Integrate

```bash
# Install the SDK
pip install whispey
```

```python
from dotenv import load_dotenv
from whispey import LivekitObserve

# Load environment variables
load_dotenv()

# Initialize observability with your Agent ID
whispey = LivekitObserve(agent_id="your-agent-id-from-dashboard")

# Wrap your LiveKit session
session = AgentSession(...)
session_id = whispey.start_session(session, phone_number="+1234567890")

# Ensure data is exported on shutdown
async def whispey_shutdown():
    await whispey.export(session_id)

ctx.add_shutdown_callback(whispey_shutdown)
await session.start(...)
```

**üìä View your analytics:** [https://whispey.pypeai.com/](https://whispey.pypeai.com/)

### Self-Hosted Installation

For complete control over your data, deploy Whispey on your own infrastructure:

```bash
# Clone and setup
git clone https://github.com/PYPE-AI-MAIN/whispey
cd whispey
npm install

# Configure environment
cp .env.example .env.local
# Edit .env.local with your Supabase and Clerk credentials

# Run development server
npm run dev
```

**üîß Detailed setup guide:** [Self-hosting Documentation](docs/self-hosting.md)

## üèóÔ∏è Architecture

Whispey consists of three main components:

- **Python SDK** - Lightweight library for data collection
- **Dashboard** - Next.js web application for analytics visualization  
- **Backend** - Supabase for data storage and real-time updates

## üìä What You Can Track

| Metric | Description | Providers |
|--------|-------------|-----------|
| **Latency** | Response times for each component | All STT/TTS/LLM providers |
| **Costs** | Token usage and billing across services | OpenAI, Anthropic, Google, Azure |
| **Quality** | Transcription accuracy, response relevance | Custom scoring algorithms |
| **Usage** | Call volume, session duration, user patterns | Built-in analytics |

## üéØ Use Cases

- **Production Monitoring** - Keep voice AI applications running smoothly
- **Cost Optimization** - Identify expensive operations and optimize spending
- **Quality Assurance** - Review call transcripts and agent responses
- **Performance Debugging** - Diagnose latency issues and bottlenecks
- **Business Intelligence** - Generate reports for stakeholders

## üõ†Ô∏è Technology Stack

- **Frontend:** Next.js 14, React, Tailwind CSS, shadcn/ui
- **Backend:** Supabase (PostgreSQL + Real-time)
- **Authentication:** Clerk.dev
- **SDK:** Python 3.8+, asyncio
- **Analytics:** Custom metrics engine
- **Deployment:** Vercel, Docker support

## üìö Documentation

- [üöÄ Getting Started Guide](docs/getting-started.md)
- [üîß SDK Reference](docs/sdk-reference.md)
- [üè† Self-hosting Guide](docs/self-hosting.md)
- [üìä Dashboard Tutorial](docs/dashboard-guide.md)
- [üîå API Documentation](docs/api-reference.md)
- [‚ùì FAQ](docs/faq.md)

## ü§ù Contributing

We welcome contributions from the community! Here's how to get started:

1. **Fork the repository**
2. **Create a feature branch:** `git checkout -b feature/amazing-feature`
3. **Make your changes** and add tests
4. **Run the test suite:** `npm test`
5. **Commit your changes:** `git commit -m 'Add amazing feature'`
6. **Push to the branch:** `git push origin feature/amazing-feature`
7. **Open a Pull Request**

Please read our [Contributing Guidelines](CONTRIBUTING.md) and [Code of Conduct](CODE_OF_CONDUCT.md) before contributing.

### Development Setup

```bash
# Clone the repository
git clone https://github.com/PYPE-AI-MAIN/whispey
cd whispey

# Install dependencies
npm install

# Set up environment
cp .env.example .env.local

# Start development server
npm run dev
```

### SDK Development

```bash
# Navigate to SDK directory
cd sdk

# Install Python dependencies
pip install -r requirements.txt

# Install in development mode
pip install -e .
```

## üîí Security

Security is a top priority for Whispey. We implement:

- **End-to-end encryption** for data in transit
- **SOC 2 compliant** infrastructure partners
- **Regular security audits** and dependency updates
- **Privacy-first design** with optional self-hosting

Found a security issue? Please email security@whispey.ai instead of opening a public issue.

## üìà Roadmap

- [ ] Multi-language SDK support (JavaScript, Go, Rust)
- [ ] Advanced ML-powered insights and anomaly detection
- [ ] Slack/Discord integrations for alerts
- [ ] GraphQL API
- [ ] Mobile app for monitoring on-the-go
- [ ] Custom webhook integrations

<!-- See our [public roadmap](https://github.com/whispey-ai/whispey/projects/1) for more details. -->

## üí¨ Community & Support

- **üêõ Bug Reports:** [GitHub Issues](https://github.com/whispey-ai/whispey/issues)
- **üí° Feature Requests:** [GitHub Discussions](https://github.com/whispey-ai/whispey/discussions)
- **üí¨ Chat:** [Discord Community](https://discord.gg/pypeai)
- **üìß Email:** support@whispey.ai
- **üì± Twitter:** [@WhispeyAI](https://twitter.com/WhispeyAI)

## üè¢ Enterprise

Need enterprise features like SSO, custom deployments, or dedicated support? 

**Contact us:** enterprise@whispey.ai

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments


- Built with ‚ù§Ô∏è by the [PYPE](https://pypeai.com/home) team
- Inspired by the observability tools from Datadog, New Relic, and Honeycomb
- Special thanks to the LiveKit community for their amazing real-time infrastructure

---

<div align="center">

**‚≠ê Star us on GitHub if Whispey helps your voice AI applications!**

[‚¨Ü Back to top](#-whispey--voice-ai-observability-platform)

</div>
</file>

</files>
